
20-UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002da4  00400000  00400000  00008000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000844  20000000  00402da4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000dc  20000844  004035e8  00010844  2**2
                  ALLOC
  3 .stack        00003000  20000920  004036c4  00010844  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00010844  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001086e  2**0
                  CONTENTS, READONLY
  6 .debug_info   00009773  00000000  00000000  000108c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019d9  00000000  00000000  0001a03c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003b27  00000000  00000000  0001ba15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000890  00000000  00000000  0001f53c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000007d8  00000000  00000000  0001fdcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00004f82  00000000  00000000  000205a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009466  00000000  00000000  00025526  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000525bf  00000000  00000000  0002e98c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001b14  00000000  00000000  00080f4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003920 	.word	0x20003920
  400004:	004007ed 	.word	0x004007ed
  400008:	004007e9 	.word	0x004007e9
  40000c:	004007e9 	.word	0x004007e9
  400010:	004007e9 	.word	0x004007e9
  400014:	004007e9 	.word	0x004007e9
  400018:	004007e9 	.word	0x004007e9
	...
  40002c:	004007e9 	.word	0x004007e9
  400030:	004007e9 	.word	0x004007e9
  400034:	00000000 	.word	0x00000000
  400038:	004007e9 	.word	0x004007e9
  40003c:	004007e9 	.word	0x004007e9
  400040:	004007e9 	.word	0x004007e9
  400044:	004007e9 	.word	0x004007e9
  400048:	004007e9 	.word	0x004007e9
  40004c:	004007e9 	.word	0x004007e9
  400050:	004007e9 	.word	0x004007e9
  400054:	004007e9 	.word	0x004007e9
  400058:	004007e9 	.word	0x004007e9
  40005c:	004007e9 	.word	0x004007e9
  400060:	004007e9 	.word	0x004007e9
  400064:	004007e9 	.word	0x004007e9
  400068:	00000000 	.word	0x00000000
  40006c:	004005e5 	.word	0x004005e5
  400070:	004005f9 	.word	0x004005f9
  400074:	0040060d 	.word	0x0040060d
  400078:	004007e9 	.word	0x004007e9
  40007c:	004007e9 	.word	0x004007e9
	...
  400088:	004007e9 	.word	0x004007e9
  40008c:	004007e9 	.word	0x004007e9
  400090:	004007e9 	.word	0x004007e9
  400094:	004007e9 	.word	0x004007e9
  400098:	004007e9 	.word	0x004007e9
  40009c:	004007e9 	.word	0x004007e9
  4000a0:	004007e9 	.word	0x004007e9
  4000a4:	004007e9 	.word	0x004007e9
  4000a8:	004007e9 	.word	0x004007e9
  4000ac:	004007e9 	.word	0x004007e9
  4000b0:	004007e9 	.word	0x004007e9
  4000b4:	004007e9 	.word	0x004007e9
  4000b8:	004007e9 	.word	0x004007e9
  4000bc:	004007e9 	.word	0x004007e9
  4000c0:	004007e9 	.word	0x004007e9
  4000c4:	004007e9 	.word	0x004007e9
  4000c8:	004007e9 	.word	0x004007e9

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000844 	.word	0x20000844
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00402da4 	.word	0x00402da4

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4808      	ldr	r0, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4908      	ldr	r1, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	00402da4 	.word	0x00402da4
  40011c:	20000848 	.word	0x20000848
  400120:	00402da4 	.word	0x00402da4
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	4b0e      	ldr	r3, [pc, #56]	; (400168 <sysclk_init+0x40>)
  40012e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	2000      	movs	r0, #0
  400132:	213e      	movs	r1, #62	; 0x3e
  400134:	4b0d      	ldr	r3, [pc, #52]	; (40016c <sysclk_init+0x44>)
  400136:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	4c0d      	ldr	r4, [pc, #52]	; (400170 <sysclk_init+0x48>)
  40013a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fc      	beq.n	40013a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	4b0c      	ldr	r3, [pc, #48]	; (400174 <sysclk_init+0x4c>)
  400142:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a0c      	ldr	r2, [pc, #48]	; (400178 <sysclk_init+0x50>)
  400146:	4b0d      	ldr	r3, [pc, #52]	; (40017c <sysclk_init+0x54>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	4c0d      	ldr	r4, [pc, #52]	; (400180 <sysclk_init+0x58>)
  40014c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fc      	beq.n	40014c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	4b0b      	ldr	r3, [pc, #44]	; (400184 <sysclk_init+0x5c>)
  400156:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	4b0b      	ldr	r3, [pc, #44]	; (400188 <sysclk_init+0x60>)
  40015a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	4b02      	ldr	r3, [pc, #8]	; (400168 <sysclk_init+0x40>)
  400160:	4798      	blx	r3
  400162:	bd10      	pop	{r4, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	004009b1 	.word	0x004009b1
  40016c:	00400689 	.word	0x00400689
  400170:	004006dd 	.word	0x004006dd
  400174:	004006ed 	.word	0x004006ed
  400178:	20133f01 	.word	0x20133f01
  40017c:	400e0400 	.word	0x400e0400
  400180:	004006fd 	.word	0x004006fd
  400184:	00400621 	.word	0x00400621
  400188:	0040089d 	.word	0x0040089d

0040018c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  40018c:	b9a8      	cbnz	r0, 4001ba <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40018e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400192:	460c      	mov	r4, r1
  400194:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400196:	2a00      	cmp	r2, #0
  400198:	dd0a      	ble.n	4001b0 <_read+0x24>
  40019a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40019c:	4e08      	ldr	r6, [pc, #32]	; (4001c0 <_read+0x34>)
  40019e:	4d09      	ldr	r5, [pc, #36]	; (4001c4 <_read+0x38>)
  4001a0:	6830      	ldr	r0, [r6, #0]
  4001a2:	4621      	mov	r1, r4
  4001a4:	682b      	ldr	r3, [r5, #0]
  4001a6:	4798      	blx	r3
		ptr++;
  4001a8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4001aa:	42bc      	cmp	r4, r7
  4001ac:	d1f8      	bne.n	4001a0 <_read+0x14>
  4001ae:	e001      	b.n	4001b4 <_read+0x28>
  4001b0:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  4001b4:	4640      	mov	r0, r8
  4001b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  4001ba:	f04f 30ff 	mov.w	r0, #4294967295
  4001be:	4770      	bx	lr
  4001c0:	20000914 	.word	0x20000914
  4001c4:	2000090c 	.word	0x2000090c

004001c8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001c8:	3801      	subs	r0, #1
  4001ca:	2802      	cmp	r0, #2
  4001cc:	d818      	bhi.n	400200 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001d2:	460e      	mov	r6, r1
  4001d4:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	b182      	cbz	r2, 4001fa <_write+0x32>
  4001d8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001da:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400214 <_write+0x4c>
  4001de:	4f0c      	ldr	r7, [pc, #48]	; (400210 <_write+0x48>)
  4001e0:	f8d8 0000 	ldr.w	r0, [r8]
  4001e4:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001e8:	683b      	ldr	r3, [r7, #0]
  4001ea:	4798      	blx	r3
  4001ec:	2800      	cmp	r0, #0
  4001ee:	db0a      	blt.n	400206 <_write+0x3e>
  4001f0:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001f2:	3c01      	subs	r4, #1
  4001f4:	d1f4      	bne.n	4001e0 <_write+0x18>
  4001f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001fa:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4001fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  400200:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  400204:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  400206:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40020a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40020e:	bf00      	nop
  400210:	20000910 	.word	0x20000910
  400214:	20000914 	.word	0x20000914

00400218 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  400218:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40021a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40021e:	4b10      	ldr	r3, [pc, #64]	; (400260 <board_init+0x48>)
  400220:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400222:	200b      	movs	r0, #11
  400224:	4c0f      	ldr	r4, [pc, #60]	; (400264 <board_init+0x4c>)
  400226:	47a0      	blx	r4
  400228:	200c      	movs	r0, #12
  40022a:	47a0      	blx	r4
  40022c:	200d      	movs	r0, #13
  40022e:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  400230:	2013      	movs	r0, #19
  400232:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400236:	4c0c      	ldr	r4, [pc, #48]	; (400268 <board_init+0x50>)
  400238:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  40023a:	2014      	movs	r0, #20
  40023c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400240:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  400242:	2023      	movs	r0, #35	; 0x23
  400244:	4909      	ldr	r1, [pc, #36]	; (40026c <board_init+0x54>)
  400246:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  400248:	204c      	movs	r0, #76	; 0x4c
  40024a:	4909      	ldr	r1, [pc, #36]	; (400270 <board_init+0x58>)
  40024c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  40024e:	4809      	ldr	r0, [pc, #36]	; (400274 <board_init+0x5c>)
  400250:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400254:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400258:	4b07      	ldr	r3, [pc, #28]	; (400278 <board_init+0x60>)
  40025a:	4798      	blx	r3
  40025c:	bd10      	pop	{r4, pc}
  40025e:	bf00      	nop
  400260:	400e1450 	.word	0x400e1450
  400264:	0040070d 	.word	0x0040070d
  400268:	0040037d 	.word	0x0040037d
  40026c:	28000079 	.word	0x28000079
  400270:	28000059 	.word	0x28000059
  400274:	400e0e00 	.word	0x400e0e00
  400278:	004004a1 	.word	0x004004a1

0040027c <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  40027c:	6301      	str	r1, [r0, #48]	; 0x30
  40027e:	4770      	bx	lr

00400280 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400280:	6341      	str	r1, [r0, #52]	; 0x34
  400282:	4770      	bx	lr

00400284 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400284:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400286:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40028a:	d02f      	beq.n	4002ec <pio_set_peripheral+0x68>
  40028c:	d807      	bhi.n	40029e <pio_set_peripheral+0x1a>
  40028e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400292:	d014      	beq.n	4002be <pio_set_peripheral+0x3a>
  400294:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400298:	d01e      	beq.n	4002d8 <pio_set_peripheral+0x54>
  40029a:	b939      	cbnz	r1, 4002ac <pio_set_peripheral+0x28>
  40029c:	4770      	bx	lr
  40029e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4002a2:	d037      	beq.n	400314 <pio_set_peripheral+0x90>
  4002a4:	d804      	bhi.n	4002b0 <pio_set_peripheral+0x2c>
  4002a6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4002aa:	d029      	beq.n	400300 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4002ac:	6042      	str	r2, [r0, #4]
  4002ae:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4002b0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4002b4:	d02e      	beq.n	400314 <pio_set_peripheral+0x90>
  4002b6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4002ba:	d02b      	beq.n	400314 <pio_set_peripheral+0x90>
  4002bc:	e7f6      	b.n	4002ac <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4002be:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4002c0:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4002c2:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4002c4:	43d3      	mvns	r3, r2
  4002c6:	4021      	ands	r1, r4
  4002c8:	4019      	ands	r1, r3
  4002ca:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4002cc:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4002ce:	6f44      	ldr	r4, [r0, #116]	; 0x74
  4002d0:	4021      	ands	r1, r4
  4002d2:	400b      	ands	r3, r1
  4002d4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4002d6:	e01a      	b.n	40030e <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4002d8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4002da:	4313      	orrs	r3, r2
  4002dc:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4002de:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4002e0:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4002e2:	400b      	ands	r3, r1
  4002e4:	ea23 0302 	bic.w	r3, r3, r2
  4002e8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4002ea:	e7df      	b.n	4002ac <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4002ec:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4002ee:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4002f0:	400b      	ands	r3, r1
  4002f2:	ea23 0302 	bic.w	r3, r3, r2
  4002f6:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4002f8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4002fa:	4313      	orrs	r3, r2
  4002fc:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4002fe:	e7d5      	b.n	4002ac <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400300:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400302:	4313      	orrs	r3, r2
  400304:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400306:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400308:	4313      	orrs	r3, r2
  40030a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40030c:	e7ce      	b.n	4002ac <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40030e:	6042      	str	r2, [r0, #4]
}
  400310:	f85d 4b04 	ldr.w	r4, [sp], #4
  400314:	4770      	bx	lr
  400316:	bf00      	nop

00400318 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400318:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40031a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  40031e:	bf14      	ite	ne
  400320:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400322:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400324:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400328:	bf14      	ite	ne
  40032a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  40032c:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40032e:	f012 0f02 	tst.w	r2, #2
  400332:	d002      	beq.n	40033a <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  400334:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400338:	e004      	b.n	400344 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40033a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  40033e:	bf18      	it	ne
  400340:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400344:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400346:	6001      	str	r1, [r0, #0]
  400348:	4770      	bx	lr
  40034a:	bf00      	nop

0040034c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40034c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40034e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400350:	9c01      	ldr	r4, [sp, #4]
  400352:	b10c      	cbz	r4, 400358 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  400354:	6641      	str	r1, [r0, #100]	; 0x64
  400356:	e000      	b.n	40035a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400358:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40035a:	b10b      	cbz	r3, 400360 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  40035c:	6501      	str	r1, [r0, #80]	; 0x50
  40035e:	e000      	b.n	400362 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400360:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400362:	b10a      	cbz	r2, 400368 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  400364:	6301      	str	r1, [r0, #48]	; 0x30
  400366:	e000      	b.n	40036a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400368:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40036a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40036c:	6001      	str	r1, [r0, #0]
}
  40036e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400372:	4770      	bx	lr

00400374 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400374:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400376:	4770      	bx	lr

00400378 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400378:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40037a:	4770      	bx	lr

0040037c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  40037c:	b570      	push	{r4, r5, r6, lr}
  40037e:	b082      	sub	sp, #8
  400380:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400382:	0943      	lsrs	r3, r0, #5
  400384:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400388:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40038c:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40038e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  400392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400396:	d047      	beq.n	400428 <pio_configure_pin+0xac>
  400398:	d809      	bhi.n	4003ae <pio_configure_pin+0x32>
  40039a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40039e:	d021      	beq.n	4003e4 <pio_configure_pin+0x68>
  4003a0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4003a4:	d02f      	beq.n	400406 <pio_configure_pin+0x8a>
  4003a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4003aa:	d16f      	bne.n	40048c <pio_configure_pin+0x110>
  4003ac:	e009      	b.n	4003c2 <pio_configure_pin+0x46>
  4003ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4003b2:	d055      	beq.n	400460 <pio_configure_pin+0xe4>
  4003b4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4003b8:	d052      	beq.n	400460 <pio_configure_pin+0xe4>
  4003ba:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4003be:	d044      	beq.n	40044a <pio_configure_pin+0xce>
  4003c0:	e064      	b.n	40048c <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4003c2:	f000 001f 	and.w	r0, r0, #31
  4003c6:	2601      	movs	r6, #1
  4003c8:	4086      	lsls	r6, r0
  4003ca:	4620      	mov	r0, r4
  4003cc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4003d0:	4632      	mov	r2, r6
  4003d2:	4b30      	ldr	r3, [pc, #192]	; (400494 <pio_configure_pin+0x118>)
  4003d4:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4003d6:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4003da:	bf14      	ite	ne
  4003dc:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4003de:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4003e0:	2001      	movs	r0, #1
  4003e2:	e054      	b.n	40048e <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4003e4:	f000 001f 	and.w	r0, r0, #31
  4003e8:	2601      	movs	r6, #1
  4003ea:	4086      	lsls	r6, r0
  4003ec:	4620      	mov	r0, r4
  4003ee:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4003f2:	4632      	mov	r2, r6
  4003f4:	4b27      	ldr	r3, [pc, #156]	; (400494 <pio_configure_pin+0x118>)
  4003f6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4003f8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4003fc:	bf14      	ite	ne
  4003fe:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400400:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400402:	2001      	movs	r0, #1
  400404:	e043      	b.n	40048e <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400406:	f000 001f 	and.w	r0, r0, #31
  40040a:	2601      	movs	r6, #1
  40040c:	4086      	lsls	r6, r0
  40040e:	4620      	mov	r0, r4
  400410:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400414:	4632      	mov	r2, r6
  400416:	4b1f      	ldr	r3, [pc, #124]	; (400494 <pio_configure_pin+0x118>)
  400418:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40041a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40041e:	bf14      	ite	ne
  400420:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400422:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400424:	2001      	movs	r0, #1
  400426:	e032      	b.n	40048e <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400428:	f000 001f 	and.w	r0, r0, #31
  40042c:	2601      	movs	r6, #1
  40042e:	4086      	lsls	r6, r0
  400430:	4620      	mov	r0, r4
  400432:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400436:	4632      	mov	r2, r6
  400438:	4b16      	ldr	r3, [pc, #88]	; (400494 <pio_configure_pin+0x118>)
  40043a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40043c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400440:	bf14      	ite	ne
  400442:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400444:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400446:	2001      	movs	r0, #1
  400448:	e021      	b.n	40048e <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40044a:	f000 031f 	and.w	r3, r0, #31
  40044e:	2601      	movs	r6, #1
  400450:	4620      	mov	r0, r4
  400452:	fa06 f103 	lsl.w	r1, r6, r3
  400456:	462a      	mov	r2, r5
  400458:	4b0f      	ldr	r3, [pc, #60]	; (400498 <pio_configure_pin+0x11c>)
  40045a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  40045c:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  40045e:	e016      	b.n	40048e <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400460:	f000 031f 	and.w	r3, r0, #31
  400464:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400466:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40046a:	ea05 0106 	and.w	r1, r5, r6
  40046e:	9100      	str	r1, [sp, #0]
  400470:	4620      	mov	r0, r4
  400472:	fa06 f103 	lsl.w	r1, r6, r3
  400476:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40047a:	bf14      	ite	ne
  40047c:	2200      	movne	r2, #0
  40047e:	2201      	moveq	r2, #1
  400480:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400484:	4c05      	ldr	r4, [pc, #20]	; (40049c <pio_configure_pin+0x120>)
  400486:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  400488:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40048a:	e000      	b.n	40048e <pio_configure_pin+0x112>

	default:
		return 0;
  40048c:	2000      	movs	r0, #0
	}

	return 1;
}
  40048e:	b002      	add	sp, #8
  400490:	bd70      	pop	{r4, r5, r6, pc}
  400492:	bf00      	nop
  400494:	00400285 	.word	0x00400285
  400498:	00400319 	.word	0x00400319
  40049c:	0040034d 	.word	0x0040034d

004004a0 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  4004a0:	b570      	push	{r4, r5, r6, lr}
  4004a2:	b082      	sub	sp, #8
  4004a4:	4606      	mov	r6, r0
  4004a6:	460d      	mov	r5, r1
  4004a8:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4004aa:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  4004ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4004b2:	d038      	beq.n	400526 <pio_configure_pin_group+0x86>
  4004b4:	d809      	bhi.n	4004ca <pio_configure_pin_group+0x2a>
  4004b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4004ba:	d01c      	beq.n	4004f6 <pio_configure_pin_group+0x56>
  4004bc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4004c0:	d025      	beq.n	40050e <pio_configure_pin_group+0x6e>
  4004c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4004c6:	d150      	bne.n	40056a <pio_configure_pin_group+0xca>
  4004c8:	e009      	b.n	4004de <pio_configure_pin_group+0x3e>
  4004ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4004ce:	d03a      	beq.n	400546 <pio_configure_pin_group+0xa6>
  4004d0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4004d4:	d037      	beq.n	400546 <pio_configure_pin_group+0xa6>
  4004d6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4004da:	d030      	beq.n	40053e <pio_configure_pin_group+0x9e>
  4004dc:	e045      	b.n	40056a <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  4004de:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4004e2:	462a      	mov	r2, r5
  4004e4:	4b22      	ldr	r3, [pc, #136]	; (400570 <pio_configure_pin_group+0xd0>)
  4004e6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4004e8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4004ec:	bf14      	ite	ne
  4004ee:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4004f0:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4004f2:	2001      	movs	r0, #1
  4004f4:	e03a      	b.n	40056c <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  4004f6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4004fa:	462a      	mov	r2, r5
  4004fc:	4b1c      	ldr	r3, [pc, #112]	; (400570 <pio_configure_pin_group+0xd0>)
  4004fe:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400500:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400504:	bf14      	ite	ne
  400506:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400508:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40050a:	2001      	movs	r0, #1
  40050c:	e02e      	b.n	40056c <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  40050e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400512:	462a      	mov	r2, r5
  400514:	4b16      	ldr	r3, [pc, #88]	; (400570 <pio_configure_pin_group+0xd0>)
  400516:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400518:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40051c:	bf14      	ite	ne
  40051e:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400520:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400522:	2001      	movs	r0, #1
  400524:	e022      	b.n	40056c <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  400526:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40052a:	462a      	mov	r2, r5
  40052c:	4b10      	ldr	r3, [pc, #64]	; (400570 <pio_configure_pin_group+0xd0>)
  40052e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400530:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400534:	bf14      	ite	ne
  400536:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400538:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40053a:	2001      	movs	r0, #1
  40053c:	e016      	b.n	40056c <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  40053e:	4b0d      	ldr	r3, [pc, #52]	; (400574 <pio_configure_pin_group+0xd4>)
  400540:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400542:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  400544:	e012      	b.n	40056c <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400546:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  40054a:	f004 0301 	and.w	r3, r4, #1
  40054e:	9300      	str	r3, [sp, #0]
  400550:	4630      	mov	r0, r6
  400552:	4629      	mov	r1, r5
  400554:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400558:	bf14      	ite	ne
  40055a:	2200      	movne	r2, #0
  40055c:	2201      	moveq	r2, #1
  40055e:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400562:	4c05      	ldr	r4, [pc, #20]	; (400578 <pio_configure_pin_group+0xd8>)
  400564:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  400566:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400568:	e000      	b.n	40056c <pio_configure_pin_group+0xcc>

	default:
		return 0;
  40056a:	2000      	movs	r0, #0
	}

	return 1;
}
  40056c:	b002      	add	sp, #8
  40056e:	bd70      	pop	{r4, r5, r6, pc}
  400570:	00400285 	.word	0x00400285
  400574:	00400319 	.word	0x00400319
  400578:	0040034d 	.word	0x0040034d

0040057c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40057c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400580:	4681      	mov	r9, r0
  400582:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400584:	4b12      	ldr	r3, [pc, #72]	; (4005d0 <pio_handler_process+0x54>)
  400586:	4798      	blx	r3
  400588:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40058a:	4648      	mov	r0, r9
  40058c:	4b11      	ldr	r3, [pc, #68]	; (4005d4 <pio_handler_process+0x58>)
  40058e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400590:	4005      	ands	r5, r0
  400592:	d013      	beq.n	4005bc <pio_handler_process+0x40>
  400594:	4c10      	ldr	r4, [pc, #64]	; (4005d8 <pio_handler_process+0x5c>)
  400596:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40059a:	6823      	ldr	r3, [r4, #0]
  40059c:	4543      	cmp	r3, r8
  40059e:	d108      	bne.n	4005b2 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4005a0:	6861      	ldr	r1, [r4, #4]
  4005a2:	4229      	tst	r1, r5
  4005a4:	d005      	beq.n	4005b2 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4005a6:	68e3      	ldr	r3, [r4, #12]
  4005a8:	4640      	mov	r0, r8
  4005aa:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4005ac:	6863      	ldr	r3, [r4, #4]
  4005ae:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4005b2:	42b4      	cmp	r4, r6
  4005b4:	d002      	beq.n	4005bc <pio_handler_process+0x40>
  4005b6:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4005b8:	2d00      	cmp	r5, #0
  4005ba:	d1ee      	bne.n	40059a <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4005bc:	4b07      	ldr	r3, [pc, #28]	; (4005dc <pio_handler_process+0x60>)
  4005be:	681b      	ldr	r3, [r3, #0]
  4005c0:	b123      	cbz	r3, 4005cc <pio_handler_process+0x50>
		if (pio_capture_handler) {
  4005c2:	4b07      	ldr	r3, [pc, #28]	; (4005e0 <pio_handler_process+0x64>)
  4005c4:	681b      	ldr	r3, [r3, #0]
  4005c6:	b10b      	cbz	r3, 4005cc <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  4005c8:	4648      	mov	r0, r9
  4005ca:	4798      	blx	r3
  4005cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4005d0:	00400375 	.word	0x00400375
  4005d4:	00400379 	.word	0x00400379
  4005d8:	20000864 	.word	0x20000864
  4005dc:	20000918 	.word	0x20000918
  4005e0:	20000860 	.word	0x20000860

004005e4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4005e4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4005e6:	4802      	ldr	r0, [pc, #8]	; (4005f0 <PIOA_Handler+0xc>)
  4005e8:	210b      	movs	r1, #11
  4005ea:	4b02      	ldr	r3, [pc, #8]	; (4005f4 <PIOA_Handler+0x10>)
  4005ec:	4798      	blx	r3
  4005ee:	bd08      	pop	{r3, pc}
  4005f0:	400e0e00 	.word	0x400e0e00
  4005f4:	0040057d 	.word	0x0040057d

004005f8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4005f8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4005fa:	4802      	ldr	r0, [pc, #8]	; (400604 <PIOB_Handler+0xc>)
  4005fc:	210c      	movs	r1, #12
  4005fe:	4b02      	ldr	r3, [pc, #8]	; (400608 <PIOB_Handler+0x10>)
  400600:	4798      	blx	r3
  400602:	bd08      	pop	{r3, pc}
  400604:	400e1000 	.word	0x400e1000
  400608:	0040057d 	.word	0x0040057d

0040060c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40060c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40060e:	4802      	ldr	r0, [pc, #8]	; (400618 <PIOC_Handler+0xc>)
  400610:	210d      	movs	r1, #13
  400612:	4b02      	ldr	r3, [pc, #8]	; (40061c <PIOC_Handler+0x10>)
  400614:	4798      	blx	r3
  400616:	bd08      	pop	{r3, pc}
  400618:	400e1200 	.word	0x400e1200
  40061c:	0040057d 	.word	0x0040057d

00400620 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400620:	4a18      	ldr	r2, [pc, #96]	; (400684 <pmc_switch_mck_to_pllack+0x64>)
  400622:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400628:	4318      	orrs	r0, r3
  40062a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40062c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40062e:	f013 0f08 	tst.w	r3, #8
  400632:	d003      	beq.n	40063c <pmc_switch_mck_to_pllack+0x1c>
  400634:	e009      	b.n	40064a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400636:	3b01      	subs	r3, #1
  400638:	d103      	bne.n	400642 <pmc_switch_mck_to_pllack+0x22>
  40063a:	e01e      	b.n	40067a <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40063c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400640:	4910      	ldr	r1, [pc, #64]	; (400684 <pmc_switch_mck_to_pllack+0x64>)
  400642:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400644:	f012 0f08 	tst.w	r2, #8
  400648:	d0f5      	beq.n	400636 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40064a:	4a0e      	ldr	r2, [pc, #56]	; (400684 <pmc_switch_mck_to_pllack+0x64>)
  40064c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40064e:	f023 0303 	bic.w	r3, r3, #3
  400652:	f043 0302 	orr.w	r3, r3, #2
  400656:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400658:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40065a:	f010 0008 	ands.w	r0, r0, #8
  40065e:	d004      	beq.n	40066a <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400660:	2000      	movs	r0, #0
  400662:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  400664:	3b01      	subs	r3, #1
  400666:	d103      	bne.n	400670 <pmc_switch_mck_to_pllack+0x50>
  400668:	e009      	b.n	40067e <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40066a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40066e:	4905      	ldr	r1, [pc, #20]	; (400684 <pmc_switch_mck_to_pllack+0x64>)
  400670:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400672:	f012 0f08 	tst.w	r2, #8
  400676:	d0f5      	beq.n	400664 <pmc_switch_mck_to_pllack+0x44>
  400678:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40067a:	2001      	movs	r0, #1
  40067c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40067e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400680:	4770      	bx	lr
  400682:	bf00      	nop
  400684:	400e0400 	.word	0x400e0400

00400688 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400688:	b138      	cbz	r0, 40069a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40068a:	4911      	ldr	r1, [pc, #68]	; (4006d0 <pmc_switch_mainck_to_xtal+0x48>)
  40068c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40068e:	4a11      	ldr	r2, [pc, #68]	; (4006d4 <pmc_switch_mainck_to_xtal+0x4c>)
  400690:	401a      	ands	r2, r3
  400692:	4b11      	ldr	r3, [pc, #68]	; (4006d8 <pmc_switch_mainck_to_xtal+0x50>)
  400694:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400696:	620b      	str	r3, [r1, #32]
  400698:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40069a:	4a0d      	ldr	r2, [pc, #52]	; (4006d0 <pmc_switch_mainck_to_xtal+0x48>)
  40069c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40069e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4006a2:	f023 0303 	bic.w	r3, r3, #3
  4006a6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4006aa:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4006ae:	0209      	lsls	r1, r1, #8
  4006b0:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4006b2:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4006b4:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4006b6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006b8:	f013 0f01 	tst.w	r3, #1
  4006bc:	d0fb      	beq.n	4006b6 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4006be:	4a04      	ldr	r2, [pc, #16]	; (4006d0 <pmc_switch_mainck_to_xtal+0x48>)
  4006c0:	6a13      	ldr	r3, [r2, #32]
  4006c2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4006c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4006ca:	6213      	str	r3, [r2, #32]
  4006cc:	4770      	bx	lr
  4006ce:	bf00      	nop
  4006d0:	400e0400 	.word	0x400e0400
  4006d4:	fec8fffc 	.word	0xfec8fffc
  4006d8:	01370002 	.word	0x01370002

004006dc <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4006dc:	4b02      	ldr	r3, [pc, #8]	; (4006e8 <pmc_osc_is_ready_mainck+0xc>)
  4006de:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4006e0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4006e4:	4770      	bx	lr
  4006e6:	bf00      	nop
  4006e8:	400e0400 	.word	0x400e0400

004006ec <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4006ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4006f0:	4b01      	ldr	r3, [pc, #4]	; (4006f8 <pmc_disable_pllack+0xc>)
  4006f2:	629a      	str	r2, [r3, #40]	; 0x28
  4006f4:	4770      	bx	lr
  4006f6:	bf00      	nop
  4006f8:	400e0400 	.word	0x400e0400

004006fc <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4006fc:	4b02      	ldr	r3, [pc, #8]	; (400708 <pmc_is_locked_pllack+0xc>)
  4006fe:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400700:	f000 0002 	and.w	r0, r0, #2
  400704:	4770      	bx	lr
  400706:	bf00      	nop
  400708:	400e0400 	.word	0x400e0400

0040070c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40070c:	2822      	cmp	r0, #34	; 0x22
  40070e:	d81e      	bhi.n	40074e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400710:	281f      	cmp	r0, #31
  400712:	d80c      	bhi.n	40072e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400714:	4b11      	ldr	r3, [pc, #68]	; (40075c <pmc_enable_periph_clk+0x50>)
  400716:	699a      	ldr	r2, [r3, #24]
  400718:	2301      	movs	r3, #1
  40071a:	4083      	lsls	r3, r0
  40071c:	401a      	ands	r2, r3
  40071e:	4293      	cmp	r3, r2
  400720:	d017      	beq.n	400752 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400722:	2301      	movs	r3, #1
  400724:	4083      	lsls	r3, r0
  400726:	4a0d      	ldr	r2, [pc, #52]	; (40075c <pmc_enable_periph_clk+0x50>)
  400728:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40072a:	2000      	movs	r0, #0
  40072c:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40072e:	4b0b      	ldr	r3, [pc, #44]	; (40075c <pmc_enable_periph_clk+0x50>)
  400730:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400734:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400736:	2301      	movs	r3, #1
  400738:	4083      	lsls	r3, r0
  40073a:	401a      	ands	r2, r3
  40073c:	4293      	cmp	r3, r2
  40073e:	d00a      	beq.n	400756 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400740:	2301      	movs	r3, #1
  400742:	4083      	lsls	r3, r0
  400744:	4a05      	ldr	r2, [pc, #20]	; (40075c <pmc_enable_periph_clk+0x50>)
  400746:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  40074a:	2000      	movs	r0, #0
  40074c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  40074e:	2001      	movs	r0, #1
  400750:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400752:	2000      	movs	r0, #0
  400754:	4770      	bx	lr
  400756:	2000      	movs	r0, #0
}
  400758:	4770      	bx	lr
  40075a:	bf00      	nop
  40075c:	400e0400 	.word	0x400e0400

00400760 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400760:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400762:	23ac      	movs	r3, #172	; 0xac
  400764:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400766:	680b      	ldr	r3, [r1, #0]
  400768:	684a      	ldr	r2, [r1, #4]
  40076a:	fbb3 f3f2 	udiv	r3, r3, r2
  40076e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400770:	1e5c      	subs	r4, r3, #1
  400772:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400776:	4294      	cmp	r4, r2
  400778:	d80a      	bhi.n	400790 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  40077a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  40077c:	688b      	ldr	r3, [r1, #8]
  40077e:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400780:	f240 2302 	movw	r3, #514	; 0x202
  400784:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400788:	2350      	movs	r3, #80	; 0x50
  40078a:	6003      	str	r3, [r0, #0]

	return 0;
  40078c:	2000      	movs	r0, #0
  40078e:	e000      	b.n	400792 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  400790:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  400792:	f85d 4b04 	ldr.w	r4, [sp], #4
  400796:	4770      	bx	lr

00400798 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400798:	6943      	ldr	r3, [r0, #20]
  40079a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40079e:	bf1a      	itte	ne
  4007a0:	61c1      	strne	r1, [r0, #28]
	return 0;
  4007a2:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  4007a4:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  4007a6:	4770      	bx	lr

004007a8 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4007a8:	6943      	ldr	r3, [r0, #20]
  4007aa:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4007ae:	bf1d      	ittte	ne
  4007b0:	6983      	ldrne	r3, [r0, #24]
  4007b2:	700b      	strbne	r3, [r1, #0]
	return 0;
  4007b4:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  4007b6:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  4007b8:	4770      	bx	lr
  4007ba:	bf00      	nop

004007bc <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4007bc:	6943      	ldr	r3, [r0, #20]
  4007be:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4007c2:	bf1d      	ittte	ne
  4007c4:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  4007c8:	61c1      	strne	r1, [r0, #28]
	return 0;
  4007ca:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  4007cc:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  4007ce:	4770      	bx	lr

004007d0 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4007d0:	6943      	ldr	r3, [r0, #20]
  4007d2:	f013 0f01 	tst.w	r3, #1
  4007d6:	d005      	beq.n	4007e4 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4007d8:	6983      	ldr	r3, [r0, #24]
  4007da:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4007de:	600b      	str	r3, [r1, #0]

	return 0;
  4007e0:	2000      	movs	r0, #0
  4007e2:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  4007e4:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  4007e6:	4770      	bx	lr

004007e8 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
  4007e8:	e7fe      	b.n	4007e8 <Dummy_Handler>
  4007ea:	bf00      	nop

004007ec <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4007ec:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  4007ee:	4b20      	ldr	r3, [pc, #128]	; (400870 <Reset_Handler+0x84>)
  4007f0:	4a20      	ldr	r2, [pc, #128]	; (400874 <Reset_Handler+0x88>)
  4007f2:	429a      	cmp	r2, r3
  4007f4:	d913      	bls.n	40081e <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  4007f6:	4b20      	ldr	r3, [pc, #128]	; (400878 <Reset_Handler+0x8c>)
  4007f8:	4a1d      	ldr	r2, [pc, #116]	; (400870 <Reset_Handler+0x84>)
  4007fa:	429a      	cmp	r2, r3
  4007fc:	d21f      	bcs.n	40083e <Reset_Handler+0x52>
  4007fe:	4611      	mov	r1, r2
  400800:	3204      	adds	r2, #4
  400802:	3303      	adds	r3, #3
  400804:	1a9b      	subs	r3, r3, r2
  400806:	f023 0303 	bic.w	r3, r3, #3
  40080a:	3304      	adds	r3, #4
  40080c:	4a19      	ldr	r2, [pc, #100]	; (400874 <Reset_Handler+0x88>)
  40080e:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  400810:	f852 0b04 	ldr.w	r0, [r2], #4
  400814:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  400818:	429a      	cmp	r2, r3
  40081a:	d1f9      	bne.n	400810 <Reset_Handler+0x24>
  40081c:	e00f      	b.n	40083e <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  40081e:	4b14      	ldr	r3, [pc, #80]	; (400870 <Reset_Handler+0x84>)
  400820:	4a14      	ldr	r2, [pc, #80]	; (400874 <Reset_Handler+0x88>)
  400822:	429a      	cmp	r2, r3
  400824:	d20b      	bcs.n	40083e <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400826:	4b14      	ldr	r3, [pc, #80]	; (400878 <Reset_Handler+0x8c>)
  400828:	4a11      	ldr	r2, [pc, #68]	; (400870 <Reset_Handler+0x84>)
  40082a:	1a9a      	subs	r2, r3, r2
  40082c:	4813      	ldr	r0, [pc, #76]	; (40087c <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  40082e:	1881      	adds	r1, r0, r2
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400830:	b12a      	cbz	r2, 40083e <Reset_Handler+0x52>
			*pDest-- = *pSrc--;
  400832:	f851 2904 	ldr.w	r2, [r1], #-4
  400836:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  40083a:	4281      	cmp	r1, r0
  40083c:	d1f9      	bne.n	400832 <Reset_Handler+0x46>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40083e:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400840:	4b0f      	ldr	r3, [pc, #60]	; (400880 <Reset_Handler+0x94>)
  400842:	4a10      	ldr	r2, [pc, #64]	; (400884 <Reset_Handler+0x98>)
  400844:	429a      	cmp	r2, r3
  400846:	d20b      	bcs.n	400860 <Reset_Handler+0x74>
  400848:	1d13      	adds	r3, r2, #4
  40084a:	4a0f      	ldr	r2, [pc, #60]	; (400888 <Reset_Handler+0x9c>)
  40084c:	1ad2      	subs	r2, r2, r3
  40084e:	f022 0203 	bic.w	r2, r2, #3
  400852:	441a      	add	r2, r3
  400854:	3b04      	subs	r3, #4
		*pDest++ = 0;
  400856:	2100      	movs	r1, #0
  400858:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40085c:	4293      	cmp	r3, r2
  40085e:	d1fb      	bne.n	400858 <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  400860:	4b0a      	ldr	r3, [pc, #40]	; (40088c <Reset_Handler+0xa0>)
  400862:	4a0b      	ldr	r2, [pc, #44]	; (400890 <Reset_Handler+0xa4>)
  400864:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  400866:	4b0b      	ldr	r3, [pc, #44]	; (400894 <Reset_Handler+0xa8>)
  400868:	4798      	blx	r3

	/* Branch to main function */
	main();
  40086a:	4b0b      	ldr	r3, [pc, #44]	; (400898 <Reset_Handler+0xac>)
  40086c:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  40086e:	e7fe      	b.n	40086e <Reset_Handler+0x82>
  400870:	20000000 	.word	0x20000000
  400874:	00402da4 	.word	0x00402da4
  400878:	20000844 	.word	0x20000844
  40087c:	00402da0 	.word	0x00402da0
  400880:	20000920 	.word	0x20000920
  400884:	20000844 	.word	0x20000844
  400888:	20000923 	.word	0x20000923
  40088c:	e000ed00 	.word	0xe000ed00
  400890:	00400000 	.word	0x00400000
  400894:	00400e05 	.word	0x00400e05
  400898:	00400c91 	.word	0x00400c91

0040089c <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  40089c:	4b3d      	ldr	r3, [pc, #244]	; (400994 <SystemCoreClockUpdate+0xf8>)
  40089e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4008a0:	f003 0303 	and.w	r3, r3, #3
  4008a4:	2b03      	cmp	r3, #3
  4008a6:	d85d      	bhi.n	400964 <SystemCoreClockUpdate+0xc8>
  4008a8:	e8df f003 	tbb	[pc, r3]
  4008ac:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4008b0:	4b39      	ldr	r3, [pc, #228]	; (400998 <SystemCoreClockUpdate+0xfc>)
  4008b2:	695b      	ldr	r3, [r3, #20]
  4008b4:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4008b8:	bf14      	ite	ne
  4008ba:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4008be:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4008c2:	4b36      	ldr	r3, [pc, #216]	; (40099c <SystemCoreClockUpdate+0x100>)
  4008c4:	601a      	str	r2, [r3, #0]
  4008c6:	e04d      	b.n	400964 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4008c8:	4b32      	ldr	r3, [pc, #200]	; (400994 <SystemCoreClockUpdate+0xf8>)
  4008ca:	6a1b      	ldr	r3, [r3, #32]
  4008cc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4008d0:	d003      	beq.n	4008da <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4008d2:	4a33      	ldr	r2, [pc, #204]	; (4009a0 <SystemCoreClockUpdate+0x104>)
  4008d4:	4b31      	ldr	r3, [pc, #196]	; (40099c <SystemCoreClockUpdate+0x100>)
  4008d6:	601a      	str	r2, [r3, #0]
  4008d8:	e044      	b.n	400964 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4008da:	4a32      	ldr	r2, [pc, #200]	; (4009a4 <SystemCoreClockUpdate+0x108>)
  4008dc:	4b2f      	ldr	r3, [pc, #188]	; (40099c <SystemCoreClockUpdate+0x100>)
  4008de:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4008e0:	4b2c      	ldr	r3, [pc, #176]	; (400994 <SystemCoreClockUpdate+0xf8>)
  4008e2:	6a1b      	ldr	r3, [r3, #32]
  4008e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4008e8:	2b10      	cmp	r3, #16
  4008ea:	d002      	beq.n	4008f2 <SystemCoreClockUpdate+0x56>
  4008ec:	2b20      	cmp	r3, #32
  4008ee:	d004      	beq.n	4008fa <SystemCoreClockUpdate+0x5e>
  4008f0:	e038      	b.n	400964 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4008f2:	4a2d      	ldr	r2, [pc, #180]	; (4009a8 <SystemCoreClockUpdate+0x10c>)
  4008f4:	4b29      	ldr	r3, [pc, #164]	; (40099c <SystemCoreClockUpdate+0x100>)
  4008f6:	601a      	str	r2, [r3, #0]
			break;
  4008f8:	e034      	b.n	400964 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4008fa:	4a29      	ldr	r2, [pc, #164]	; (4009a0 <SystemCoreClockUpdate+0x104>)
  4008fc:	4b27      	ldr	r3, [pc, #156]	; (40099c <SystemCoreClockUpdate+0x100>)
  4008fe:	601a      	str	r2, [r3, #0]
			break;
  400900:	e030      	b.n	400964 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400902:	4b24      	ldr	r3, [pc, #144]	; (400994 <SystemCoreClockUpdate+0xf8>)
  400904:	6a1b      	ldr	r3, [r3, #32]
  400906:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40090a:	d003      	beq.n	400914 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  40090c:	4a24      	ldr	r2, [pc, #144]	; (4009a0 <SystemCoreClockUpdate+0x104>)
  40090e:	4b23      	ldr	r3, [pc, #140]	; (40099c <SystemCoreClockUpdate+0x100>)
  400910:	601a      	str	r2, [r3, #0]
  400912:	e012      	b.n	40093a <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400914:	4a23      	ldr	r2, [pc, #140]	; (4009a4 <SystemCoreClockUpdate+0x108>)
  400916:	4b21      	ldr	r3, [pc, #132]	; (40099c <SystemCoreClockUpdate+0x100>)
  400918:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40091a:	4b1e      	ldr	r3, [pc, #120]	; (400994 <SystemCoreClockUpdate+0xf8>)
  40091c:	6a1b      	ldr	r3, [r3, #32]
  40091e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400922:	2b10      	cmp	r3, #16
  400924:	d002      	beq.n	40092c <SystemCoreClockUpdate+0x90>
  400926:	2b20      	cmp	r3, #32
  400928:	d004      	beq.n	400934 <SystemCoreClockUpdate+0x98>
  40092a:	e006      	b.n	40093a <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40092c:	4a1e      	ldr	r2, [pc, #120]	; (4009a8 <SystemCoreClockUpdate+0x10c>)
  40092e:	4b1b      	ldr	r3, [pc, #108]	; (40099c <SystemCoreClockUpdate+0x100>)
  400930:	601a      	str	r2, [r3, #0]
					break;
  400932:	e002      	b.n	40093a <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400934:	4a1a      	ldr	r2, [pc, #104]	; (4009a0 <SystemCoreClockUpdate+0x104>)
  400936:	4b19      	ldr	r3, [pc, #100]	; (40099c <SystemCoreClockUpdate+0x100>)
  400938:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40093a:	4b16      	ldr	r3, [pc, #88]	; (400994 <SystemCoreClockUpdate+0xf8>)
  40093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40093e:	f003 0303 	and.w	r3, r3, #3
  400942:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400944:	4a13      	ldr	r2, [pc, #76]	; (400994 <SystemCoreClockUpdate+0xf8>)
  400946:	bf07      	ittee	eq
  400948:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40094a:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40094c:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40094e:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  400950:	4812      	ldr	r0, [pc, #72]	; (40099c <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  400952:	f3c3 410a 	ubfx	r1, r3, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400956:	6803      	ldr	r3, [r0, #0]
  400958:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  40095c:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40095e:	fbb3 f3f2 	udiv	r3, r3, r2
  400962:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400964:	4b0b      	ldr	r3, [pc, #44]	; (400994 <SystemCoreClockUpdate+0xf8>)
  400966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400968:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40096c:	2b70      	cmp	r3, #112	; 0x70
  40096e:	d107      	bne.n	400980 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  400970:	4a0a      	ldr	r2, [pc, #40]	; (40099c <SystemCoreClockUpdate+0x100>)
  400972:	6813      	ldr	r3, [r2, #0]
  400974:	490d      	ldr	r1, [pc, #52]	; (4009ac <SystemCoreClockUpdate+0x110>)
  400976:	fba1 1303 	umull	r1, r3, r1, r3
  40097a:	085b      	lsrs	r3, r3, #1
  40097c:	6013      	str	r3, [r2, #0]
  40097e:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400980:	4b04      	ldr	r3, [pc, #16]	; (400994 <SystemCoreClockUpdate+0xf8>)
  400982:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400984:	4905      	ldr	r1, [pc, #20]	; (40099c <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400986:	f3c2 1202 	ubfx	r2, r2, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  40098a:	680b      	ldr	r3, [r1, #0]
  40098c:	40d3      	lsrs	r3, r2
  40098e:	600b      	str	r3, [r1, #0]
  400990:	4770      	bx	lr
  400992:	bf00      	nop
  400994:	400e0400 	.word	0x400e0400
  400998:	400e1410 	.word	0x400e1410
  40099c:	20000000 	.word	0x20000000
  4009a0:	00b71b00 	.word	0x00b71b00
  4009a4:	003d0900 	.word	0x003d0900
  4009a8:	007a1200 	.word	0x007a1200
  4009ac:	aaaaaaab 	.word	0xaaaaaaab

004009b0 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4009b0:	4b1a      	ldr	r3, [pc, #104]	; (400a1c <system_init_flash+0x6c>)
  4009b2:	4298      	cmp	r0, r3
  4009b4:	d807      	bhi.n	4009c6 <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4009b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  4009ba:	4a19      	ldr	r2, [pc, #100]	; (400a20 <system_init_flash+0x70>)
  4009bc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4009be:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4009c2:	6013      	str	r3, [r2, #0]
  4009c4:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  4009c6:	4b17      	ldr	r3, [pc, #92]	; (400a24 <system_init_flash+0x74>)
  4009c8:	4298      	cmp	r0, r3
  4009ca:	d806      	bhi.n	4009da <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4009cc:	4b16      	ldr	r3, [pc, #88]	; (400a28 <system_init_flash+0x78>)
  4009ce:	4a14      	ldr	r2, [pc, #80]	; (400a20 <system_init_flash+0x70>)
  4009d0:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4009d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4009d6:	6013      	str	r3, [r2, #0]
  4009d8:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  4009da:	4b14      	ldr	r3, [pc, #80]	; (400a2c <system_init_flash+0x7c>)
  4009dc:	4298      	cmp	r0, r3
  4009de:	d806      	bhi.n	4009ee <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4009e0:	4b13      	ldr	r3, [pc, #76]	; (400a30 <system_init_flash+0x80>)
  4009e2:	4a0f      	ldr	r2, [pc, #60]	; (400a20 <system_init_flash+0x70>)
  4009e4:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4009e6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4009ea:	6013      	str	r3, [r2, #0]
  4009ec:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4009ee:	4b11      	ldr	r3, [pc, #68]	; (400a34 <system_init_flash+0x84>)
  4009f0:	4298      	cmp	r0, r3
  4009f2:	d806      	bhi.n	400a02 <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4009f4:	4b10      	ldr	r3, [pc, #64]	; (400a38 <system_init_flash+0x88>)
  4009f6:	4a0a      	ldr	r2, [pc, #40]	; (400a20 <system_init_flash+0x70>)
  4009f8:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4009fa:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4009fe:	6013      	str	r3, [r2, #0]
  400a00:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400a02:	4b0e      	ldr	r3, [pc, #56]	; (400a3c <system_init_flash+0x8c>)
  400a04:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400a06:	bf94      	ite	ls
  400a08:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400a0c:	4b0c      	ldrhi	r3, [pc, #48]	; (400a40 <system_init_flash+0x90>)
  400a0e:	4a04      	ldr	r2, [pc, #16]	; (400a20 <system_init_flash+0x70>)
  400a10:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400a12:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400a16:	6013      	str	r3, [r2, #0]
  400a18:	4770      	bx	lr
  400a1a:	bf00      	nop
  400a1c:	01312cff 	.word	0x01312cff
  400a20:	400e0a00 	.word	0x400e0a00
  400a24:	026259ff 	.word	0x026259ff
  400a28:	04000100 	.word	0x04000100
  400a2c:	039386ff 	.word	0x039386ff
  400a30:	04000200 	.word	0x04000200
  400a34:	04c4b3ff 	.word	0x04c4b3ff
  400a38:	04000300 	.word	0x04000300
  400a3c:	05f5e0ff 	.word	0x05f5e0ff
  400a40:	04000500 	.word	0x04000500

00400a44 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400a44:	4b09      	ldr	r3, [pc, #36]	; (400a6c <_sbrk+0x28>)
  400a46:	681b      	ldr	r3, [r3, #0]
  400a48:	b913      	cbnz	r3, 400a50 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  400a4a:	4a09      	ldr	r2, [pc, #36]	; (400a70 <_sbrk+0x2c>)
  400a4c:	4b07      	ldr	r3, [pc, #28]	; (400a6c <_sbrk+0x28>)
  400a4e:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  400a50:	4b06      	ldr	r3, [pc, #24]	; (400a6c <_sbrk+0x28>)
  400a52:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400a54:	181a      	adds	r2, r3, r0
  400a56:	4907      	ldr	r1, [pc, #28]	; (400a74 <_sbrk+0x30>)
  400a58:	4291      	cmp	r1, r2
  400a5a:	db04      	blt.n	400a66 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  400a5c:	4610      	mov	r0, r2
  400a5e:	4a03      	ldr	r2, [pc, #12]	; (400a6c <_sbrk+0x28>)
  400a60:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400a62:	4618      	mov	r0, r3
  400a64:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  400a66:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  400a6a:	4770      	bx	lr
  400a6c:	200008d4 	.word	0x200008d4
  400a70:	20003920 	.word	0x20003920
  400a74:	20027ffc 	.word	0x20027ffc

00400a78 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400a78:	f04f 30ff 	mov.w	r0, #4294967295
  400a7c:	4770      	bx	lr
  400a7e:	bf00      	nop

00400a80 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400a80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400a84:	604b      	str	r3, [r1, #4]

	return 0;
}
  400a86:	2000      	movs	r0, #0
  400a88:	4770      	bx	lr
  400a8a:	bf00      	nop

00400a8c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400a8c:	2001      	movs	r0, #1
  400a8e:	4770      	bx	lr

00400a90 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400a90:	2000      	movs	r0, #0
  400a92:	4770      	bx	lr

00400a94 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400a94:	b5f0      	push	{r4, r5, r6, r7, lr}
  400a96:	b083      	sub	sp, #12
  400a98:	4605      	mov	r5, r0
  400a9a:	460c      	mov	r4, r1
	uint32_t val = 0;
  400a9c:	2300      	movs	r3, #0
  400a9e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400aa0:	4b18      	ldr	r3, [pc, #96]	; (400b04 <usart_serial_getchar+0x70>)
  400aa2:	4298      	cmp	r0, r3
  400aa4:	d107      	bne.n	400ab6 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  400aa6:	461f      	mov	r7, r3
  400aa8:	4e17      	ldr	r6, [pc, #92]	; (400b08 <usart_serial_getchar+0x74>)
  400aaa:	4638      	mov	r0, r7
  400aac:	4621      	mov	r1, r4
  400aae:	47b0      	blx	r6
  400ab0:	2800      	cmp	r0, #0
  400ab2:	d1fa      	bne.n	400aaa <usart_serial_getchar+0x16>
  400ab4:	e017      	b.n	400ae6 <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400ab6:	4b15      	ldr	r3, [pc, #84]	; (400b0c <usart_serial_getchar+0x78>)
  400ab8:	4298      	cmp	r0, r3
  400aba:	d107      	bne.n	400acc <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400abc:	461e      	mov	r6, r3
  400abe:	4d12      	ldr	r5, [pc, #72]	; (400b08 <usart_serial_getchar+0x74>)
  400ac0:	4630      	mov	r0, r6
  400ac2:	4621      	mov	r1, r4
  400ac4:	47a8      	blx	r5
  400ac6:	2800      	cmp	r0, #0
  400ac8:	d1fa      	bne.n	400ac0 <usart_serial_getchar+0x2c>
  400aca:	e018      	b.n	400afe <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400acc:	4b10      	ldr	r3, [pc, #64]	; (400b10 <usart_serial_getchar+0x7c>)
  400ace:	4298      	cmp	r0, r3
  400ad0:	d109      	bne.n	400ae6 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  400ad2:	461e      	mov	r6, r3
  400ad4:	4d0f      	ldr	r5, [pc, #60]	; (400b14 <usart_serial_getchar+0x80>)
  400ad6:	4630      	mov	r0, r6
  400ad8:	a901      	add	r1, sp, #4
  400ada:	47a8      	blx	r5
  400adc:	2800      	cmp	r0, #0
  400ade:	d1fa      	bne.n	400ad6 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
  400ae0:	9b01      	ldr	r3, [sp, #4]
  400ae2:	7023      	strb	r3, [r4, #0]
  400ae4:	e00b      	b.n	400afe <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400ae6:	4b0c      	ldr	r3, [pc, #48]	; (400b18 <usart_serial_getchar+0x84>)
  400ae8:	429d      	cmp	r5, r3
  400aea:	d108      	bne.n	400afe <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400aec:	461e      	mov	r6, r3
  400aee:	4d09      	ldr	r5, [pc, #36]	; (400b14 <usart_serial_getchar+0x80>)
  400af0:	4630      	mov	r0, r6
  400af2:	a901      	add	r1, sp, #4
  400af4:	47a8      	blx	r5
  400af6:	2800      	cmp	r0, #0
  400af8:	d1fa      	bne.n	400af0 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
  400afa:	9b01      	ldr	r3, [sp, #4]
  400afc:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400afe:	b003      	add	sp, #12
  400b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400b02:	bf00      	nop
  400b04:	400e0600 	.word	0x400e0600
  400b08:	004007a9 	.word	0x004007a9
  400b0c:	400e0800 	.word	0x400e0800
  400b10:	40024000 	.word	0x40024000
  400b14:	004007d1 	.word	0x004007d1
  400b18:	40028000 	.word	0x40028000

00400b1c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  400b1c:	b570      	push	{r4, r5, r6, lr}
  400b1e:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400b20:	4b18      	ldr	r3, [pc, #96]	; (400b84 <usart_serial_putchar+0x68>)
  400b22:	4298      	cmp	r0, r3
  400b24:	d108      	bne.n	400b38 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400b26:	461e      	mov	r6, r3
  400b28:	4d17      	ldr	r5, [pc, #92]	; (400b88 <usart_serial_putchar+0x6c>)
  400b2a:	4630      	mov	r0, r6
  400b2c:	4621      	mov	r1, r4
  400b2e:	47a8      	blx	r5
  400b30:	2800      	cmp	r0, #0
  400b32:	d1fa      	bne.n	400b2a <usart_serial_putchar+0xe>
		return 1;
  400b34:	2001      	movs	r0, #1
  400b36:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400b38:	4b14      	ldr	r3, [pc, #80]	; (400b8c <usart_serial_putchar+0x70>)
  400b3a:	4298      	cmp	r0, r3
  400b3c:	d108      	bne.n	400b50 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  400b3e:	461e      	mov	r6, r3
  400b40:	4d11      	ldr	r5, [pc, #68]	; (400b88 <usart_serial_putchar+0x6c>)
  400b42:	4630      	mov	r0, r6
  400b44:	4621      	mov	r1, r4
  400b46:	47a8      	blx	r5
  400b48:	2800      	cmp	r0, #0
  400b4a:	d1fa      	bne.n	400b42 <usart_serial_putchar+0x26>
		return 1;
  400b4c:	2001      	movs	r0, #1
  400b4e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400b50:	4b0f      	ldr	r3, [pc, #60]	; (400b90 <usart_serial_putchar+0x74>)
  400b52:	4298      	cmp	r0, r3
  400b54:	d108      	bne.n	400b68 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  400b56:	461e      	mov	r6, r3
  400b58:	4d0e      	ldr	r5, [pc, #56]	; (400b94 <usart_serial_putchar+0x78>)
  400b5a:	4630      	mov	r0, r6
  400b5c:	4621      	mov	r1, r4
  400b5e:	47a8      	blx	r5
  400b60:	2800      	cmp	r0, #0
  400b62:	d1fa      	bne.n	400b5a <usart_serial_putchar+0x3e>
		return 1;
  400b64:	2001      	movs	r0, #1
  400b66:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400b68:	4b0b      	ldr	r3, [pc, #44]	; (400b98 <usart_serial_putchar+0x7c>)
  400b6a:	4298      	cmp	r0, r3
  400b6c:	d108      	bne.n	400b80 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  400b6e:	461e      	mov	r6, r3
  400b70:	4d08      	ldr	r5, [pc, #32]	; (400b94 <usart_serial_putchar+0x78>)
  400b72:	4630      	mov	r0, r6
  400b74:	4621      	mov	r1, r4
  400b76:	47a8      	blx	r5
  400b78:	2800      	cmp	r0, #0
  400b7a:	d1fa      	bne.n	400b72 <usart_serial_putchar+0x56>
		return 1;
  400b7c:	2001      	movs	r0, #1
  400b7e:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  400b80:	2000      	movs	r0, #0
}
  400b82:	bd70      	pop	{r4, r5, r6, pc}
  400b84:	400e0600 	.word	0x400e0600
  400b88:	00400799 	.word	0x00400799
  400b8c:	400e0800 	.word	0x400e0800
  400b90:	40024000 	.word	0x40024000
  400b94:	004007bd 	.word	0x004007bd
  400b98:	40028000 	.word	0x40028000

00400b9c <limpvetor>:
	}
	return 0;
}

void limpvetor(uint8_t *vetor)
{
  400b9c:	1e43      	subs	r3, r0, #1
  400b9e:	300e      	adds	r0, #14
	uint8_t n;
	for(n=0;n<tam;n++)
	{
		*(vetor+n) = 0X00;
  400ba0:	2200      	movs	r2, #0
  400ba2:	f803 2f01 	strb.w	r2, [r3, #1]!
}

void limpvetor(uint8_t *vetor)
{
	uint8_t n;
	for(n=0;n<tam;n++)
  400ba6:	4283      	cmp	r3, r0
  400ba8:	d1fb      	bne.n	400ba2 <limpvetor+0x6>
	{
		*(vetor+n) = 0X00;
	}
}
  400baa:	4770      	bx	lr

00400bac <lervetor>:

/************************************************************************/
/* funcoes                                                                     */
/************************************************************************/
int lervetor(uint8_t *vetor)
{
  400bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400bb0:	4607      	mov	r7, r0
	uint8_t i=0;
	limpvetor(vetor);
  400bb2:	4b0f      	ldr	r3, [pc, #60]	; (400bf0 <lervetor+0x44>)
  400bb4:	4798      	blx	r3
  400bb6:	46b8      	mov	r8, r7
  400bb8:	f107 090f 	add.w	r9, r7, #15
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
  400bbc:	4e0d      	ldr	r6, [pc, #52]	; (400bf4 <lervetor+0x48>)
  400bbe:	4d0e      	ldr	r5, [pc, #56]	; (400bf8 <lervetor+0x4c>)
  400bc0:	ebc8 0007 	rsb	r0, r8, r7
  400bc4:	fa5f fa80 	uxtb.w	sl, r0
	for (i=0;i<tam;i++)
	{
		usart_serial_getchar((Usart *)CONSOLE_UART, (vetor+i));
  400bc8:	463c      	mov	r4, r7
  400bca:	4628      	mov	r0, r5
  400bcc:	4621      	mov	r1, r4
  400bce:	47b0      	blx	r6
  400bd0:	2800      	cmp	r0, #0
  400bd2:	d1fa      	bne.n	400bca <lervetor+0x1e>
  400bd4:	3701      	adds	r7, #1
		if (*(vetor+i) == '\n')
  400bd6:	7823      	ldrb	r3, [r4, #0]
  400bd8:	2b0a      	cmp	r3, #10
  400bda:	d104      	bne.n	400be6 <lervetor+0x3a>
		{
			*(vetor+i) = 0x00;
  400bdc:	2300      	movs	r3, #0
  400bde:	7023      	strb	r3, [r4, #0]
			return i;
  400be0:	4650      	mov	r0, sl
  400be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
/************************************************************************/
int lervetor(uint8_t *vetor)
{
	uint8_t i=0;
	limpvetor(vetor);
	for (i=0;i<tam;i++)
  400be6:	454f      	cmp	r7, r9
  400be8:	d1ea      	bne.n	400bc0 <lervetor+0x14>
			*(vetor+i) = 0x00;
			return i;
		}
		
	}
	return 0;
  400bea:	2000      	movs	r0, #0
}
  400bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400bf0:	00400b9d 	.word	0x00400b9d
  400bf4:	004007a9 	.word	0x004007a9
  400bf8:	400e0600 	.word	0x400e0600

00400bfc <config_uart>:
}

/************************************************************************/
/* Configura UART                                                       */
/************************************************************************/
void config_uart(void){
  400bfc:	b530      	push	{r4, r5, lr}
  400bfe:	b085      	sub	sp, #20
	
	/* configura pinos */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  400c00:	4816      	ldr	r0, [pc, #88]	; (400c5c <config_uart+0x60>)
  400c02:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400c06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400c0a:	4b15      	ldr	r3, [pc, #84]	; (400c60 <config_uart+0x64>)
  400c0c:	4798      	blx	r3
  400c0e:	2008      	movs	r0, #8
  400c10:	4d14      	ldr	r5, [pc, #80]	; (400c64 <config_uart+0x68>)
  400c12:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400c14:	4c14      	ldr	r4, [pc, #80]	; (400c68 <config_uart+0x6c>)
  400c16:	4b15      	ldr	r3, [pc, #84]	; (400c6c <config_uart+0x70>)
  400c18:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400c1a:	4a15      	ldr	r2, [pc, #84]	; (400c70 <config_uart+0x74>)
  400c1c:	4b15      	ldr	r3, [pc, #84]	; (400c74 <config_uart+0x78>)
  400c1e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400c20:	4a15      	ldr	r2, [pc, #84]	; (400c78 <config_uart+0x7c>)
  400c22:	4b16      	ldr	r3, [pc, #88]	; (400c7c <config_uart+0x80>)
  400c24:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400c26:	4b16      	ldr	r3, [pc, #88]	; (400c80 <config_uart+0x84>)
  400c28:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400c2a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400c2e:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400c30:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400c34:	9303      	str	r3, [sp, #12]
  400c36:	2008      	movs	r0, #8
  400c38:	47a8      	blx	r5
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART0);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400c3a:	4620      	mov	r0, r4
  400c3c:	a901      	add	r1, sp, #4
  400c3e:	4b11      	ldr	r3, [pc, #68]	; (400c84 <config_uart+0x88>)
  400c40:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400c42:	4d11      	ldr	r5, [pc, #68]	; (400c88 <config_uart+0x8c>)
  400c44:	682b      	ldr	r3, [r5, #0]
  400c46:	6898      	ldr	r0, [r3, #8]
  400c48:	2100      	movs	r1, #0
  400c4a:	4c10      	ldr	r4, [pc, #64]	; (400c8c <config_uart+0x90>)
  400c4c:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400c4e:	682b      	ldr	r3, [r5, #0]
  400c50:	6858      	ldr	r0, [r3, #4]
  400c52:	2100      	movs	r1, #0
  400c54:	47a0      	blx	r4
		.paritytype = UART_MR_PAR_NO,
		.stopbits   = 0
	};
	
	stdio_serial_init((Usart *)CONF_UART, &uart_serial_options);
}
  400c56:	b005      	add	sp, #20
  400c58:	bd30      	pop	{r4, r5, pc}
  400c5a:	bf00      	nop
  400c5c:	400e0e00 	.word	0x400e0e00
  400c60:	004004a1 	.word	0x004004a1
  400c64:	0040070d 	.word	0x0040070d
  400c68:	400e0600 	.word	0x400e0600
  400c6c:	20000914 	.word	0x20000914
  400c70:	00400b1d 	.word	0x00400b1d
  400c74:	20000910 	.word	0x20000910
  400c78:	00400a95 	.word	0x00400a95
  400c7c:	2000090c 	.word	0x2000090c
  400c80:	07270e00 	.word	0x07270e00
  400c84:	00400761 	.word	0x00400761
  400c88:	20000430 	.word	0x20000430
  400c8c:	00400f5d 	.word	0x00400f5d

00400c90 <main>:

/************************************************************************/
/* Main                                                                 */
/************************************************************************/
int main(void)
{
  400c90:	b5f0      	push	{r4, r5, r6, r7, lr}
  400c92:	b087      	sub	sp, #28
	uint8_t comd;
	uint8_t palavra[tam+1];
	

	/* Initialize the system */
	sysclk_init();
  400c94:	4b44      	ldr	r3, [pc, #272]	; (400da8 <main+0x118>)
  400c96:	4798      	blx	r3
	board_init();
  400c98:	4b44      	ldr	r3, [pc, #272]	; (400dac <main+0x11c>)
  400c9a:	4798      	blx	r3

	/* Configure LED 1 */
	pmc_enable_periph_clk(ID_LED_BLUE);
  400c9c:	200b      	movs	r0, #11
  400c9e:	4e44      	ldr	r6, [pc, #272]	; (400db0 <main+0x120>)
  400ca0:	47b0      	blx	r6
	pio_set_output(PORT_LED_BLUE  , MASK_LED_BLUE	,1,0,0);
  400ca2:	4f44      	ldr	r7, [pc, #272]	; (400db4 <main+0x124>)
  400ca4:	2400      	movs	r4, #0
  400ca6:	9400      	str	r4, [sp, #0]
  400ca8:	4638      	mov	r0, r7
  400caa:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400cae:	2201      	movs	r2, #1
  400cb0:	4623      	mov	r3, r4
  400cb2:	4d41      	ldr	r5, [pc, #260]	; (400db8 <main+0x128>)
  400cb4:	47a8      	blx	r5
	/* Configure LED 2 */
	pmc_enable_periph_clk(ID_LED_GREEN);
  400cb6:	200b      	movs	r0, #11
  400cb8:	47b0      	blx	r6
	pio_set_output(PORT_LED_GREEN  , MASK_LED_GREEN	,1,0,0);
  400cba:	9400      	str	r4, [sp, #0]
  400cbc:	4638      	mov	r0, r7
  400cbe:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  400cc2:	2201      	movs	r2, #1
  400cc4:	4623      	mov	r3, r4
  400cc6:	47a8      	blx	r5
	/* Configure LED 3 */
	pmc_enable_periph_clk(ID_LED_RED);
  400cc8:	200d      	movs	r0, #13
  400cca:	47b0      	blx	r6
	pio_set_output(PORT_LED_RED  , MASK_LED_RED	,1,0,0);
  400ccc:	4e3b      	ldr	r6, [pc, #236]	; (400dbc <main+0x12c>)
  400cce:	9400      	str	r4, [sp, #0]
  400cd0:	4630      	mov	r0, r6
  400cd2:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  400cd6:	2201      	movs	r2, #1
  400cd8:	4623      	mov	r3, r4
  400cda:	47a8      	blx	r5

	pio_clear(PORT_LED_RED, MASK_LED_RED);
  400cdc:	4630      	mov	r0, r6
  400cde:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  400ce2:	4b37      	ldr	r3, [pc, #220]	; (400dc0 <main+0x130>)
  400ce4:	4798      	blx	r3
	/* Initialize debug console */
	config_uart();
  400ce6:	4b37      	ldr	r3, [pc, #220]	; (400dc4 <main+0x134>)
  400ce8:	4798      	blx	r3
	
	/* frase de boas vindas */
	puts(" ---------------------------- \n\r"
  400cea:	4837      	ldr	r0, [pc, #220]	; (400dc8 <main+0x138>)
  400cec:	4c37      	ldr	r4, [pc, #220]	; (400dcc <main+0x13c>)
  400cee:	47a0      	blx	r4
/************************************************************************/
/* Display Menu                                                         */
/************************************************************************/
static void display_menu(void)
{
	puts(" 1 : exibe novamente esse menu \n\r"
  400cf0:	4837      	ldr	r0, [pc, #220]	; (400dd0 <main+0x140>)
  400cf2:	47a0      	blx	r4
		 " ---------------------------- \n\r");
		 
	/* display main menu */
	display_menu();

	limpvetor(&palavra);
  400cf4:	a802      	add	r0, sp, #8
  400cf6:	4b37      	ldr	r3, [pc, #220]	; (400dd4 <main+0x144>)
  400cf8:	4798      	blx	r3

	while (1) {

		comd=lervetor(&palavra);
  400cfa:	4e37      	ldr	r6, [pc, #220]	; (400dd8 <main+0x148>)
			
		}

		if (strcmp(palavra,"LigaVermelho")==0)
		{
					pio_set(PORT_LED_RED, MASK_LED_RED);
  400cfc:	f507 6780 	add.w	r7, r7, #1024	; 0x400
	while (1) {

		comd=lervetor(&palavra);

		
		if (strcmp(palavra,"LigaAzul")==0)
  400d00:	4d36      	ldr	r5, [pc, #216]	; (400ddc <main+0x14c>)
		{
					pio_clear(PORT_LED_BLUE, MASK_LED_BLUE);
  400d02:	4c2c      	ldr	r4, [pc, #176]	; (400db4 <main+0x124>)

	limpvetor(&palavra);

	while (1) {

		comd=lervetor(&palavra);
  400d04:	a802      	add	r0, sp, #8
  400d06:	47b0      	blx	r6

		
		if (strcmp(palavra,"LigaAzul")==0)
  400d08:	a802      	add	r0, sp, #8
  400d0a:	4629      	mov	r1, r5
  400d0c:	4b34      	ldr	r3, [pc, #208]	; (400de0 <main+0x150>)
  400d0e:	4798      	blx	r3
  400d10:	b938      	cbnz	r0, 400d22 <main+0x92>
		{
					pio_clear(PORT_LED_BLUE, MASK_LED_BLUE);
  400d12:	4620      	mov	r0, r4
  400d14:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400d18:	4b29      	ldr	r3, [pc, #164]	; (400dc0 <main+0x130>)
  400d1a:	4798      	blx	r3
					puts("Led ON \n\r");
  400d1c:	4831      	ldr	r0, [pc, #196]	; (400de4 <main+0x154>)
  400d1e:	4b2b      	ldr	r3, [pc, #172]	; (400dcc <main+0x13c>)
  400d20:	4798      	blx	r3
					
		}

		if (strcmp(palavra,"DesligaAzul")==0)
  400d22:	a802      	add	r0, sp, #8
  400d24:	4930      	ldr	r1, [pc, #192]	; (400de8 <main+0x158>)
  400d26:	4b2e      	ldr	r3, [pc, #184]	; (400de0 <main+0x150>)
  400d28:	4798      	blx	r3
  400d2a:	b938      	cbnz	r0, 400d3c <main+0xac>
		{
			pio_set(PORT_LED_BLUE, MASK_LED_BLUE);
  400d2c:	4620      	mov	r0, r4
  400d2e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400d32:	4b2e      	ldr	r3, [pc, #184]	; (400dec <main+0x15c>)
  400d34:	4798      	blx	r3
			puts("Led OFF \n\r");
  400d36:	482e      	ldr	r0, [pc, #184]	; (400df0 <main+0x160>)
  400d38:	4b24      	ldr	r3, [pc, #144]	; (400dcc <main+0x13c>)
  400d3a:	4798      	blx	r3
			
		}
		

		if (strcmp(palavra,"LigaVerde")==0)
  400d3c:	a802      	add	r0, sp, #8
  400d3e:	492d      	ldr	r1, [pc, #180]	; (400df4 <main+0x164>)
  400d40:	4b27      	ldr	r3, [pc, #156]	; (400de0 <main+0x150>)
  400d42:	4798      	blx	r3
  400d44:	b938      	cbnz	r0, 400d56 <main+0xc6>
		{
					pio_clear(PORT_LED_GREEN, MASK_LED_GREEN);
  400d46:	4620      	mov	r0, r4
  400d48:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  400d4c:	4b1c      	ldr	r3, [pc, #112]	; (400dc0 <main+0x130>)
  400d4e:	4798      	blx	r3
					puts("Led ON \n\r");
  400d50:	4824      	ldr	r0, [pc, #144]	; (400de4 <main+0x154>)
  400d52:	4b1e      	ldr	r3, [pc, #120]	; (400dcc <main+0x13c>)
  400d54:	4798      	blx	r3
					
		}
		
		if (strcmp(palavra,"DesligaVerde")==0)
  400d56:	a802      	add	r0, sp, #8
  400d58:	4927      	ldr	r1, [pc, #156]	; (400df8 <main+0x168>)
  400d5a:	4b21      	ldr	r3, [pc, #132]	; (400de0 <main+0x150>)
  400d5c:	4798      	blx	r3
  400d5e:	b938      	cbnz	r0, 400d70 <main+0xe0>
		{
			pio_set(PORT_LED_GREEN, MASK_LED_GREEN);
  400d60:	4620      	mov	r0, r4
  400d62:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  400d66:	4b21      	ldr	r3, [pc, #132]	; (400dec <main+0x15c>)
  400d68:	4798      	blx	r3
			puts("Led OFF \n\r");
  400d6a:	4821      	ldr	r0, [pc, #132]	; (400df0 <main+0x160>)
  400d6c:	4b17      	ldr	r3, [pc, #92]	; (400dcc <main+0x13c>)
  400d6e:	4798      	blx	r3
			
		}

		if (strcmp(palavra,"LigaVermelho")==0)
  400d70:	a802      	add	r0, sp, #8
  400d72:	4922      	ldr	r1, [pc, #136]	; (400dfc <main+0x16c>)
  400d74:	4b1a      	ldr	r3, [pc, #104]	; (400de0 <main+0x150>)
  400d76:	4798      	blx	r3
  400d78:	b938      	cbnz	r0, 400d8a <main+0xfa>
		{
					pio_set(PORT_LED_RED, MASK_LED_RED);
  400d7a:	4638      	mov	r0, r7
  400d7c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  400d80:	4b1a      	ldr	r3, [pc, #104]	; (400dec <main+0x15c>)
  400d82:	4798      	blx	r3
					puts("Led ON \n\r");
  400d84:	4817      	ldr	r0, [pc, #92]	; (400de4 <main+0x154>)
  400d86:	4b11      	ldr	r3, [pc, #68]	; (400dcc <main+0x13c>)
  400d88:	4798      	blx	r3
					
		}

		if (strcmp(palavra,"DesligaVermelho")==0)
  400d8a:	a802      	add	r0, sp, #8
  400d8c:	491c      	ldr	r1, [pc, #112]	; (400e00 <main+0x170>)
  400d8e:	4b14      	ldr	r3, [pc, #80]	; (400de0 <main+0x150>)
  400d90:	4798      	blx	r3
  400d92:	2800      	cmp	r0, #0
  400d94:	d1b6      	bne.n	400d04 <main+0x74>
		{
			pio_clear(PORT_LED_RED, MASK_LED_RED);
  400d96:	4638      	mov	r0, r7
  400d98:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  400d9c:	4b08      	ldr	r3, [pc, #32]	; (400dc0 <main+0x130>)
  400d9e:	4798      	blx	r3
			puts("Led OFF \n\r");
  400da0:	4813      	ldr	r0, [pc, #76]	; (400df0 <main+0x160>)
  400da2:	4b0a      	ldr	r3, [pc, #40]	; (400dcc <main+0x13c>)
  400da4:	4798      	blx	r3
  400da6:	e7ad      	b.n	400d04 <main+0x74>
  400da8:	00400129 	.word	0x00400129
  400dac:	00400219 	.word	0x00400219
  400db0:	0040070d 	.word	0x0040070d
  400db4:	400e0e00 	.word	0x400e0e00
  400db8:	0040034d 	.word	0x0040034d
  400dbc:	400e1200 	.word	0x400e1200
  400dc0:	00400281 	.word	0x00400281
  400dc4:	00400bfd 	.word	0x00400bfd
  400dc8:	00402c60 	.word	0x00402c60
  400dcc:	00400f4d 	.word	0x00400f4d
  400dd0:	00402cbc 	.word	0x00402cbc
  400dd4:	00400b9d 	.word	0x00400b9d
  400dd8:	00400bad 	.word	0x00400bad
  400ddc:	00402d08 	.word	0x00402d08
  400de0:	00401089 	.word	0x00401089
  400de4:	00402d14 	.word	0x00402d14
  400de8:	00402d20 	.word	0x00402d20
  400dec:	0040027d 	.word	0x0040027d
  400df0:	00402d2c 	.word	0x00402d2c
  400df4:	00402d38 	.word	0x00402d38
  400df8:	00402d44 	.word	0x00402d44
  400dfc:	00402d54 	.word	0x00402d54
  400e00:	00402d64 	.word	0x00402d64

00400e04 <__libc_init_array>:
  400e04:	b570      	push	{r4, r5, r6, lr}
  400e06:	4e0f      	ldr	r6, [pc, #60]	; (400e44 <__libc_init_array+0x40>)
  400e08:	4d0f      	ldr	r5, [pc, #60]	; (400e48 <__libc_init_array+0x44>)
  400e0a:	1b76      	subs	r6, r6, r5
  400e0c:	10b6      	asrs	r6, r6, #2
  400e0e:	bf18      	it	ne
  400e10:	2400      	movne	r4, #0
  400e12:	d005      	beq.n	400e20 <__libc_init_array+0x1c>
  400e14:	3401      	adds	r4, #1
  400e16:	f855 3b04 	ldr.w	r3, [r5], #4
  400e1a:	4798      	blx	r3
  400e1c:	42a6      	cmp	r6, r4
  400e1e:	d1f9      	bne.n	400e14 <__libc_init_array+0x10>
  400e20:	4e0a      	ldr	r6, [pc, #40]	; (400e4c <__libc_init_array+0x48>)
  400e22:	4d0b      	ldr	r5, [pc, #44]	; (400e50 <__libc_init_array+0x4c>)
  400e24:	1b76      	subs	r6, r6, r5
  400e26:	f001 ffab 	bl	402d80 <_init>
  400e2a:	10b6      	asrs	r6, r6, #2
  400e2c:	bf18      	it	ne
  400e2e:	2400      	movne	r4, #0
  400e30:	d006      	beq.n	400e40 <__libc_init_array+0x3c>
  400e32:	3401      	adds	r4, #1
  400e34:	f855 3b04 	ldr.w	r3, [r5], #4
  400e38:	4798      	blx	r3
  400e3a:	42a6      	cmp	r6, r4
  400e3c:	d1f9      	bne.n	400e32 <__libc_init_array+0x2e>
  400e3e:	bd70      	pop	{r4, r5, r6, pc}
  400e40:	bd70      	pop	{r4, r5, r6, pc}
  400e42:	bf00      	nop
  400e44:	00402d8c 	.word	0x00402d8c
  400e48:	00402d8c 	.word	0x00402d8c
  400e4c:	00402d94 	.word	0x00402d94
  400e50:	00402d8c 	.word	0x00402d8c

00400e54 <memset>:
  400e54:	b470      	push	{r4, r5, r6}
  400e56:	0784      	lsls	r4, r0, #30
  400e58:	d046      	beq.n	400ee8 <memset+0x94>
  400e5a:	1e54      	subs	r4, r2, #1
  400e5c:	2a00      	cmp	r2, #0
  400e5e:	d041      	beq.n	400ee4 <memset+0x90>
  400e60:	b2cd      	uxtb	r5, r1
  400e62:	4603      	mov	r3, r0
  400e64:	e002      	b.n	400e6c <memset+0x18>
  400e66:	1e62      	subs	r2, r4, #1
  400e68:	b3e4      	cbz	r4, 400ee4 <memset+0x90>
  400e6a:	4614      	mov	r4, r2
  400e6c:	f803 5b01 	strb.w	r5, [r3], #1
  400e70:	079a      	lsls	r2, r3, #30
  400e72:	d1f8      	bne.n	400e66 <memset+0x12>
  400e74:	2c03      	cmp	r4, #3
  400e76:	d92e      	bls.n	400ed6 <memset+0x82>
  400e78:	b2cd      	uxtb	r5, r1
  400e7a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  400e7e:	2c0f      	cmp	r4, #15
  400e80:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  400e84:	d919      	bls.n	400eba <memset+0x66>
  400e86:	f103 0210 	add.w	r2, r3, #16
  400e8a:	4626      	mov	r6, r4
  400e8c:	3e10      	subs	r6, #16
  400e8e:	2e0f      	cmp	r6, #15
  400e90:	f842 5c10 	str.w	r5, [r2, #-16]
  400e94:	f842 5c0c 	str.w	r5, [r2, #-12]
  400e98:	f842 5c08 	str.w	r5, [r2, #-8]
  400e9c:	f842 5c04 	str.w	r5, [r2, #-4]
  400ea0:	f102 0210 	add.w	r2, r2, #16
  400ea4:	d8f2      	bhi.n	400e8c <memset+0x38>
  400ea6:	f1a4 0210 	sub.w	r2, r4, #16
  400eaa:	f022 020f 	bic.w	r2, r2, #15
  400eae:	f004 040f 	and.w	r4, r4, #15
  400eb2:	3210      	adds	r2, #16
  400eb4:	2c03      	cmp	r4, #3
  400eb6:	4413      	add	r3, r2
  400eb8:	d90d      	bls.n	400ed6 <memset+0x82>
  400eba:	461e      	mov	r6, r3
  400ebc:	4622      	mov	r2, r4
  400ebe:	3a04      	subs	r2, #4
  400ec0:	2a03      	cmp	r2, #3
  400ec2:	f846 5b04 	str.w	r5, [r6], #4
  400ec6:	d8fa      	bhi.n	400ebe <memset+0x6a>
  400ec8:	1f22      	subs	r2, r4, #4
  400eca:	f022 0203 	bic.w	r2, r2, #3
  400ece:	3204      	adds	r2, #4
  400ed0:	4413      	add	r3, r2
  400ed2:	f004 0403 	and.w	r4, r4, #3
  400ed6:	b12c      	cbz	r4, 400ee4 <memset+0x90>
  400ed8:	b2c9      	uxtb	r1, r1
  400eda:	441c      	add	r4, r3
  400edc:	f803 1b01 	strb.w	r1, [r3], #1
  400ee0:	42a3      	cmp	r3, r4
  400ee2:	d1fb      	bne.n	400edc <memset+0x88>
  400ee4:	bc70      	pop	{r4, r5, r6}
  400ee6:	4770      	bx	lr
  400ee8:	4614      	mov	r4, r2
  400eea:	4603      	mov	r3, r0
  400eec:	e7c2      	b.n	400e74 <memset+0x20>
  400eee:	bf00      	nop

00400ef0 <_puts_r>:
  400ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
  400ef2:	4604      	mov	r4, r0
  400ef4:	b089      	sub	sp, #36	; 0x24
  400ef6:	4608      	mov	r0, r1
  400ef8:	460d      	mov	r5, r1
  400efa:	f000 fa2f 	bl	40135c <strlen>
  400efe:	68a3      	ldr	r3, [r4, #8]
  400f00:	4f11      	ldr	r7, [pc, #68]	; (400f48 <_puts_r+0x58>)
  400f02:	899a      	ldrh	r2, [r3, #12]
  400f04:	9504      	str	r5, [sp, #16]
  400f06:	2102      	movs	r1, #2
  400f08:	f100 0e01 	add.w	lr, r0, #1
  400f0c:	2601      	movs	r6, #1
  400f0e:	ad04      	add	r5, sp, #16
  400f10:	9102      	str	r1, [sp, #8]
  400f12:	0491      	lsls	r1, r2, #18
  400f14:	9005      	str	r0, [sp, #20]
  400f16:	f8cd e00c 	str.w	lr, [sp, #12]
  400f1a:	9706      	str	r7, [sp, #24]
  400f1c:	9607      	str	r6, [sp, #28]
  400f1e:	9501      	str	r5, [sp, #4]
  400f20:	d406      	bmi.n	400f30 <_puts_r+0x40>
  400f22:	6e59      	ldr	r1, [r3, #100]	; 0x64
  400f24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  400f28:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  400f2c:	819a      	strh	r2, [r3, #12]
  400f2e:	6659      	str	r1, [r3, #100]	; 0x64
  400f30:	4620      	mov	r0, r4
  400f32:	4619      	mov	r1, r3
  400f34:	aa01      	add	r2, sp, #4
  400f36:	f000 fd35 	bl	4019a4 <__sfvwrite_r>
  400f3a:	2800      	cmp	r0, #0
  400f3c:	bf14      	ite	ne
  400f3e:	f04f 30ff 	movne.w	r0, #4294967295
  400f42:	200a      	moveq	r0, #10
  400f44:	b009      	add	sp, #36	; 0x24
  400f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400f48:	00402d7c 	.word	0x00402d7c

00400f4c <puts>:
  400f4c:	4b02      	ldr	r3, [pc, #8]	; (400f58 <puts+0xc>)
  400f4e:	4601      	mov	r1, r0
  400f50:	6818      	ldr	r0, [r3, #0]
  400f52:	f7ff bfcd 	b.w	400ef0 <_puts_r>
  400f56:	bf00      	nop
  400f58:	20000430 	.word	0x20000430

00400f5c <setbuf>:
  400f5c:	2900      	cmp	r1, #0
  400f5e:	bf0c      	ite	eq
  400f60:	2202      	moveq	r2, #2
  400f62:	2200      	movne	r2, #0
  400f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
  400f68:	f000 b800 	b.w	400f6c <setvbuf>

00400f6c <setvbuf>:
  400f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400f70:	4c3a      	ldr	r4, [pc, #232]	; (40105c <setvbuf+0xf0>)
  400f72:	6826      	ldr	r6, [r4, #0]
  400f74:	460d      	mov	r5, r1
  400f76:	4604      	mov	r4, r0
  400f78:	4690      	mov	r8, r2
  400f7a:	461f      	mov	r7, r3
  400f7c:	b116      	cbz	r6, 400f84 <setvbuf+0x18>
  400f7e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
  400f80:	2b00      	cmp	r3, #0
  400f82:	d03c      	beq.n	400ffe <setvbuf+0x92>
  400f84:	f1b8 0f02 	cmp.w	r8, #2
  400f88:	d82f      	bhi.n	400fea <setvbuf+0x7e>
  400f8a:	2f00      	cmp	r7, #0
  400f8c:	db2d      	blt.n	400fea <setvbuf+0x7e>
  400f8e:	4621      	mov	r1, r4
  400f90:	4630      	mov	r0, r6
  400f92:	f000 fb2d 	bl	4015f0 <_fflush_r>
  400f96:	89a1      	ldrh	r1, [r4, #12]
  400f98:	2300      	movs	r3, #0
  400f9a:	6063      	str	r3, [r4, #4]
  400f9c:	61a3      	str	r3, [r4, #24]
  400f9e:	060b      	lsls	r3, r1, #24
  400fa0:	d427      	bmi.n	400ff2 <setvbuf+0x86>
  400fa2:	f021 0183 	bic.w	r1, r1, #131	; 0x83
  400fa6:	b289      	uxth	r1, r1
  400fa8:	f1b8 0f02 	cmp.w	r8, #2
  400fac:	81a1      	strh	r1, [r4, #12]
  400fae:	d02a      	beq.n	401006 <setvbuf+0x9a>
  400fb0:	2d00      	cmp	r5, #0
  400fb2:	d036      	beq.n	401022 <setvbuf+0xb6>
  400fb4:	f1b8 0f01 	cmp.w	r8, #1
  400fb8:	d011      	beq.n	400fde <setvbuf+0x72>
  400fba:	b289      	uxth	r1, r1
  400fbc:	f001 0008 	and.w	r0, r1, #8
  400fc0:	4b27      	ldr	r3, [pc, #156]	; (401060 <setvbuf+0xf4>)
  400fc2:	63f3      	str	r3, [r6, #60]	; 0x3c
  400fc4:	b280      	uxth	r0, r0
  400fc6:	6025      	str	r5, [r4, #0]
  400fc8:	6125      	str	r5, [r4, #16]
  400fca:	6167      	str	r7, [r4, #20]
  400fcc:	b178      	cbz	r0, 400fee <setvbuf+0x82>
  400fce:	f011 0f03 	tst.w	r1, #3
  400fd2:	bf18      	it	ne
  400fd4:	2700      	movne	r7, #0
  400fd6:	60a7      	str	r7, [r4, #8]
  400fd8:	2000      	movs	r0, #0
  400fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400fde:	f041 0101 	orr.w	r1, r1, #1
  400fe2:	427b      	negs	r3, r7
  400fe4:	81a1      	strh	r1, [r4, #12]
  400fe6:	61a3      	str	r3, [r4, #24]
  400fe8:	e7e7      	b.n	400fba <setvbuf+0x4e>
  400fea:	f04f 30ff 	mov.w	r0, #4294967295
  400fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400ff2:	6921      	ldr	r1, [r4, #16]
  400ff4:	4630      	mov	r0, r6
  400ff6:	f000 fbfd 	bl	4017f4 <_free_r>
  400ffa:	89a1      	ldrh	r1, [r4, #12]
  400ffc:	e7d1      	b.n	400fa2 <setvbuf+0x36>
  400ffe:	4630      	mov	r0, r6
  401000:	f000 fb8a 	bl	401718 <__sinit>
  401004:	e7be      	b.n	400f84 <setvbuf+0x18>
  401006:	2000      	movs	r0, #0
  401008:	f104 0343 	add.w	r3, r4, #67	; 0x43
  40100c:	f041 0102 	orr.w	r1, r1, #2
  401010:	2500      	movs	r5, #0
  401012:	2201      	movs	r2, #1
  401014:	81a1      	strh	r1, [r4, #12]
  401016:	60a5      	str	r5, [r4, #8]
  401018:	6023      	str	r3, [r4, #0]
  40101a:	6123      	str	r3, [r4, #16]
  40101c:	6162      	str	r2, [r4, #20]
  40101e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401022:	2f00      	cmp	r7, #0
  401024:	bf08      	it	eq
  401026:	f44f 6780 	moveq.w	r7, #1024	; 0x400
  40102a:	4638      	mov	r0, r7
  40102c:	f000 fee0 	bl	401df0 <malloc>
  401030:	4605      	mov	r5, r0
  401032:	b128      	cbz	r0, 401040 <setvbuf+0xd4>
  401034:	89a1      	ldrh	r1, [r4, #12]
  401036:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  40103a:	b289      	uxth	r1, r1
  40103c:	81a1      	strh	r1, [r4, #12]
  40103e:	e7b9      	b.n	400fb4 <setvbuf+0x48>
  401040:	f44f 6080 	mov.w	r0, #1024	; 0x400
  401044:	f000 fed4 	bl	401df0 <malloc>
  401048:	4605      	mov	r5, r0
  40104a:	b918      	cbnz	r0, 401054 <setvbuf+0xe8>
  40104c:	89a1      	ldrh	r1, [r4, #12]
  40104e:	f04f 30ff 	mov.w	r0, #4294967295
  401052:	e7d9      	b.n	401008 <setvbuf+0x9c>
  401054:	f44f 6780 	mov.w	r7, #1024	; 0x400
  401058:	e7ec      	b.n	401034 <setvbuf+0xc8>
  40105a:	bf00      	nop
  40105c:	20000430 	.word	0x20000430
  401060:	0040161d 	.word	0x0040161d
	...
  401080:	eba2 0003 	sub.w	r0, r2, r3
  401084:	4770      	bx	lr
  401086:	bf00      	nop

00401088 <strcmp>:
  401088:	7802      	ldrb	r2, [r0, #0]
  40108a:	780b      	ldrb	r3, [r1, #0]
  40108c:	2a01      	cmp	r2, #1
  40108e:	bf28      	it	cs
  401090:	429a      	cmpcs	r2, r3
  401092:	d1f5      	bne.n	401080 <setvbuf+0x114>
  401094:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  401098:	ea40 0401 	orr.w	r4, r0, r1
  40109c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  4010a0:	f06f 0c00 	mvn.w	ip, #0
  4010a4:	ea4f 7244 	mov.w	r2, r4, lsl #29
  4010a8:	b312      	cbz	r2, 4010f0 <strcmp+0x68>
  4010aa:	ea80 0401 	eor.w	r4, r0, r1
  4010ae:	f014 0f07 	tst.w	r4, #7
  4010b2:	d16a      	bne.n	40118a <strcmp+0x102>
  4010b4:	f000 0407 	and.w	r4, r0, #7
  4010b8:	f020 0007 	bic.w	r0, r0, #7
  4010bc:	f004 0503 	and.w	r5, r4, #3
  4010c0:	f021 0107 	bic.w	r1, r1, #7
  4010c4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4010c8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  4010cc:	f014 0f04 	tst.w	r4, #4
  4010d0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  4010d4:	fa0c f405 	lsl.w	r4, ip, r5
  4010d8:	ea62 0204 	orn	r2, r2, r4
  4010dc:	ea66 0604 	orn	r6, r6, r4
  4010e0:	d00a      	beq.n	4010f8 <strcmp+0x70>
  4010e2:	ea63 0304 	orn	r3, r3, r4
  4010e6:	4662      	mov	r2, ip
  4010e8:	ea67 0704 	orn	r7, r7, r4
  4010ec:	4666      	mov	r6, ip
  4010ee:	e003      	b.n	4010f8 <strcmp+0x70>
  4010f0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  4010f4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  4010f8:	fa82 f54c 	uadd8	r5, r2, ip
  4010fc:	ea82 0406 	eor.w	r4, r2, r6
  401100:	faa4 f48c 	sel	r4, r4, ip
  401104:	bb6c      	cbnz	r4, 401162 <strcmp+0xda>
  401106:	fa83 f54c 	uadd8	r5, r3, ip
  40110a:	ea83 0507 	eor.w	r5, r3, r7
  40110e:	faa5 f58c 	sel	r5, r5, ip
  401112:	b995      	cbnz	r5, 40113a <strcmp+0xb2>
  401114:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  401118:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  40111c:	fa82 f54c 	uadd8	r5, r2, ip
  401120:	ea82 0406 	eor.w	r4, r2, r6
  401124:	faa4 f48c 	sel	r4, r4, ip
  401128:	fa83 f54c 	uadd8	r5, r3, ip
  40112c:	ea83 0507 	eor.w	r5, r3, r7
  401130:	faa5 f58c 	sel	r5, r5, ip
  401134:	4325      	orrs	r5, r4
  401136:	d0db      	beq.n	4010f0 <strcmp+0x68>
  401138:	b99c      	cbnz	r4, 401162 <strcmp+0xda>
  40113a:	ba2d      	rev	r5, r5
  40113c:	fab5 f485 	clz	r4, r5
  401140:	f024 0407 	bic.w	r4, r4, #7
  401144:	fa27 f104 	lsr.w	r1, r7, r4
  401148:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40114c:	fa23 f304 	lsr.w	r3, r3, r4
  401150:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  401154:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  401158:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40115c:	eba0 0001 	sub.w	r0, r0, r1
  401160:	4770      	bx	lr
  401162:	ba24      	rev	r4, r4
  401164:	fab4 f484 	clz	r4, r4
  401168:	f024 0407 	bic.w	r4, r4, #7
  40116c:	fa26 f104 	lsr.w	r1, r6, r4
  401170:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  401174:	fa22 f204 	lsr.w	r2, r2, r4
  401178:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40117c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  401180:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  401184:	eba0 0001 	sub.w	r0, r0, r1
  401188:	4770      	bx	lr
  40118a:	f014 0f03 	tst.w	r4, #3
  40118e:	d13c      	bne.n	40120a <strcmp+0x182>
  401190:	f010 0403 	ands.w	r4, r0, #3
  401194:	d128      	bne.n	4011e8 <strcmp+0x160>
  401196:	f850 2b08 	ldr.w	r2, [r0], #8
  40119a:	f851 3b08 	ldr.w	r3, [r1], #8
  40119e:	fa82 f54c 	uadd8	r5, r2, ip
  4011a2:	ea82 0503 	eor.w	r5, r2, r3
  4011a6:	faa5 f58c 	sel	r5, r5, ip
  4011aa:	b95d      	cbnz	r5, 4011c4 <strcmp+0x13c>
  4011ac:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4011b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
  4011b4:	fa82 f54c 	uadd8	r5, r2, ip
  4011b8:	ea82 0503 	eor.w	r5, r2, r3
  4011bc:	faa5 f58c 	sel	r5, r5, ip
  4011c0:	2d00      	cmp	r5, #0
  4011c2:	d0e8      	beq.n	401196 <strcmp+0x10e>
  4011c4:	ba2d      	rev	r5, r5
  4011c6:	fab5 f485 	clz	r4, r5
  4011ca:	f024 0407 	bic.w	r4, r4, #7
  4011ce:	fa23 f104 	lsr.w	r1, r3, r4
  4011d2:	fa22 f204 	lsr.w	r2, r2, r4
  4011d6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  4011da:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4011de:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4011e2:	eba0 0001 	sub.w	r0, r0, r1
  4011e6:	4770      	bx	lr
  4011e8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  4011ec:	f020 0003 	bic.w	r0, r0, #3
  4011f0:	f850 2b08 	ldr.w	r2, [r0], #8
  4011f4:	f021 0103 	bic.w	r1, r1, #3
  4011f8:	f851 3b08 	ldr.w	r3, [r1], #8
  4011fc:	fa0c f404 	lsl.w	r4, ip, r4
  401200:	ea62 0204 	orn	r2, r2, r4
  401204:	ea63 0304 	orn	r3, r3, r4
  401208:	e7c9      	b.n	40119e <strcmp+0x116>
  40120a:	f010 0403 	ands.w	r4, r0, #3
  40120e:	d01a      	beq.n	401246 <strcmp+0x1be>
  401210:	eba1 0104 	sub.w	r1, r1, r4
  401214:	f020 0003 	bic.w	r0, r0, #3
  401218:	07e4      	lsls	r4, r4, #31
  40121a:	f850 2b04 	ldr.w	r2, [r0], #4
  40121e:	d006      	beq.n	40122e <strcmp+0x1a6>
  401220:	d20f      	bcs.n	401242 <strcmp+0x1ba>
  401222:	788b      	ldrb	r3, [r1, #2]
  401224:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  401228:	1ae4      	subs	r4, r4, r3
  40122a:	d106      	bne.n	40123a <strcmp+0x1b2>
  40122c:	b12b      	cbz	r3, 40123a <strcmp+0x1b2>
  40122e:	78cb      	ldrb	r3, [r1, #3]
  401230:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  401234:	1ae4      	subs	r4, r4, r3
  401236:	d100      	bne.n	40123a <strcmp+0x1b2>
  401238:	b91b      	cbnz	r3, 401242 <strcmp+0x1ba>
  40123a:	4620      	mov	r0, r4
  40123c:	f85d 4b10 	ldr.w	r4, [sp], #16
  401240:	4770      	bx	lr
  401242:	f101 0104 	add.w	r1, r1, #4
  401246:	f850 2b04 	ldr.w	r2, [r0], #4
  40124a:	07cc      	lsls	r4, r1, #31
  40124c:	f021 0103 	bic.w	r1, r1, #3
  401250:	f851 3b04 	ldr.w	r3, [r1], #4
  401254:	d848      	bhi.n	4012e8 <strcmp+0x260>
  401256:	d224      	bcs.n	4012a2 <strcmp+0x21a>
  401258:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  40125c:	fa82 f54c 	uadd8	r5, r2, ip
  401260:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  401264:	faa5 f58c 	sel	r5, r5, ip
  401268:	d10a      	bne.n	401280 <strcmp+0x1f8>
  40126a:	b965      	cbnz	r5, 401286 <strcmp+0x1fe>
  40126c:	f851 3b04 	ldr.w	r3, [r1], #4
  401270:	ea84 0402 	eor.w	r4, r4, r2
  401274:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  401278:	d10e      	bne.n	401298 <strcmp+0x210>
  40127a:	f850 2b04 	ldr.w	r2, [r0], #4
  40127e:	e7eb      	b.n	401258 <strcmp+0x1d0>
  401280:	ea4f 2313 	mov.w	r3, r3, lsr #8
  401284:	e055      	b.n	401332 <strcmp+0x2aa>
  401286:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  40128a:	d14d      	bne.n	401328 <strcmp+0x2a0>
  40128c:	7808      	ldrb	r0, [r1, #0]
  40128e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  401292:	f1c0 0000 	rsb	r0, r0, #0
  401296:	4770      	bx	lr
  401298:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40129c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  4012a0:	e047      	b.n	401332 <strcmp+0x2aa>
  4012a2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  4012a6:	fa82 f54c 	uadd8	r5, r2, ip
  4012aa:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  4012ae:	faa5 f58c 	sel	r5, r5, ip
  4012b2:	d10a      	bne.n	4012ca <strcmp+0x242>
  4012b4:	b965      	cbnz	r5, 4012d0 <strcmp+0x248>
  4012b6:	f851 3b04 	ldr.w	r3, [r1], #4
  4012ba:	ea84 0402 	eor.w	r4, r4, r2
  4012be:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  4012c2:	d10c      	bne.n	4012de <strcmp+0x256>
  4012c4:	f850 2b04 	ldr.w	r2, [r0], #4
  4012c8:	e7eb      	b.n	4012a2 <strcmp+0x21a>
  4012ca:	ea4f 4313 	mov.w	r3, r3, lsr #16
  4012ce:	e030      	b.n	401332 <strcmp+0x2aa>
  4012d0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  4012d4:	d128      	bne.n	401328 <strcmp+0x2a0>
  4012d6:	880b      	ldrh	r3, [r1, #0]
  4012d8:	ea4f 4212 	mov.w	r2, r2, lsr #16
  4012dc:	e029      	b.n	401332 <strcmp+0x2aa>
  4012de:	ea4f 4212 	mov.w	r2, r2, lsr #16
  4012e2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  4012e6:	e024      	b.n	401332 <strcmp+0x2aa>
  4012e8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  4012ec:	fa82 f54c 	uadd8	r5, r2, ip
  4012f0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  4012f4:	faa5 f58c 	sel	r5, r5, ip
  4012f8:	d10a      	bne.n	401310 <strcmp+0x288>
  4012fa:	b965      	cbnz	r5, 401316 <strcmp+0x28e>
  4012fc:	f851 3b04 	ldr.w	r3, [r1], #4
  401300:	ea84 0402 	eor.w	r4, r4, r2
  401304:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  401308:	d109      	bne.n	40131e <strcmp+0x296>
  40130a:	f850 2b04 	ldr.w	r2, [r0], #4
  40130e:	e7eb      	b.n	4012e8 <strcmp+0x260>
  401310:	ea4f 6313 	mov.w	r3, r3, lsr #24
  401314:	e00d      	b.n	401332 <strcmp+0x2aa>
  401316:	f015 0fff 	tst.w	r5, #255	; 0xff
  40131a:	d105      	bne.n	401328 <strcmp+0x2a0>
  40131c:	680b      	ldr	r3, [r1, #0]
  40131e:	ea4f 2212 	mov.w	r2, r2, lsr #8
  401322:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401326:	e004      	b.n	401332 <strcmp+0x2aa>
  401328:	f04f 0000 	mov.w	r0, #0
  40132c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  401330:	4770      	bx	lr
  401332:	ba12      	rev	r2, r2
  401334:	ba1b      	rev	r3, r3
  401336:	fa82 f44c 	uadd8	r4, r2, ip
  40133a:	ea82 0403 	eor.w	r4, r2, r3
  40133e:	faa4 f58c 	sel	r5, r4, ip
  401342:	fab5 f485 	clz	r4, r5
  401346:	fa02 f204 	lsl.w	r2, r2, r4
  40134a:	fa03 f304 	lsl.w	r3, r3, r4
  40134e:	ea4f 6012 	mov.w	r0, r2, lsr #24
  401352:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  401356:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  40135a:	4770      	bx	lr

0040135c <strlen>:
  40135c:	f020 0103 	bic.w	r1, r0, #3
  401360:	f010 0003 	ands.w	r0, r0, #3
  401364:	f1c0 0000 	rsb	r0, r0, #0
  401368:	f851 3b04 	ldr.w	r3, [r1], #4
  40136c:	f100 0c04 	add.w	ip, r0, #4
  401370:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  401374:	f06f 0200 	mvn.w	r2, #0
  401378:	bf1c      	itt	ne
  40137a:	fa22 f20c 	lsrne.w	r2, r2, ip
  40137e:	4313      	orrne	r3, r2
  401380:	f04f 0c01 	mov.w	ip, #1
  401384:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  401388:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  40138c:	eba3 020c 	sub.w	r2, r3, ip
  401390:	ea22 0203 	bic.w	r2, r2, r3
  401394:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  401398:	bf04      	itt	eq
  40139a:	f851 3b04 	ldreq.w	r3, [r1], #4
  40139e:	3004      	addeq	r0, #4
  4013a0:	d0f4      	beq.n	40138c <strlen+0x30>
  4013a2:	f1c2 0100 	rsb	r1, r2, #0
  4013a6:	ea02 0201 	and.w	r2, r2, r1
  4013aa:	fab2 f282 	clz	r2, r2
  4013ae:	f1c2 021f 	rsb	r2, r2, #31
  4013b2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4013b6:	4770      	bx	lr

004013b8 <__swsetup_r>:
  4013b8:	b538      	push	{r3, r4, r5, lr}
  4013ba:	4b2f      	ldr	r3, [pc, #188]	; (401478 <__swsetup_r+0xc0>)
  4013bc:	681b      	ldr	r3, [r3, #0]
  4013be:	4605      	mov	r5, r0
  4013c0:	460c      	mov	r4, r1
  4013c2:	b113      	cbz	r3, 4013ca <__swsetup_r+0x12>
  4013c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4013c6:	2a00      	cmp	r2, #0
  4013c8:	d036      	beq.n	401438 <__swsetup_r+0x80>
  4013ca:	89a2      	ldrh	r2, [r4, #12]
  4013cc:	b293      	uxth	r3, r2
  4013ce:	0718      	lsls	r0, r3, #28
  4013d0:	d50c      	bpl.n	4013ec <__swsetup_r+0x34>
  4013d2:	6920      	ldr	r0, [r4, #16]
  4013d4:	b1a8      	cbz	r0, 401402 <__swsetup_r+0x4a>
  4013d6:	f013 0201 	ands.w	r2, r3, #1
  4013da:	d01e      	beq.n	40141a <__swsetup_r+0x62>
  4013dc:	6963      	ldr	r3, [r4, #20]
  4013de:	2200      	movs	r2, #0
  4013e0:	425b      	negs	r3, r3
  4013e2:	61a3      	str	r3, [r4, #24]
  4013e4:	60a2      	str	r2, [r4, #8]
  4013e6:	b1f0      	cbz	r0, 401426 <__swsetup_r+0x6e>
  4013e8:	2000      	movs	r0, #0
  4013ea:	bd38      	pop	{r3, r4, r5, pc}
  4013ec:	06d9      	lsls	r1, r3, #27
  4013ee:	d53b      	bpl.n	401468 <__swsetup_r+0xb0>
  4013f0:	0758      	lsls	r0, r3, #29
  4013f2:	d425      	bmi.n	401440 <__swsetup_r+0x88>
  4013f4:	6920      	ldr	r0, [r4, #16]
  4013f6:	f042 0308 	orr.w	r3, r2, #8
  4013fa:	81a3      	strh	r3, [r4, #12]
  4013fc:	b29b      	uxth	r3, r3
  4013fe:	2800      	cmp	r0, #0
  401400:	d1e9      	bne.n	4013d6 <__swsetup_r+0x1e>
  401402:	f403 7220 	and.w	r2, r3, #640	; 0x280
  401406:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40140a:	d0e4      	beq.n	4013d6 <__swsetup_r+0x1e>
  40140c:	4628      	mov	r0, r5
  40140e:	4621      	mov	r1, r4
  401410:	f000 fc7e 	bl	401d10 <__smakebuf_r>
  401414:	89a3      	ldrh	r3, [r4, #12]
  401416:	6920      	ldr	r0, [r4, #16]
  401418:	e7dd      	b.n	4013d6 <__swsetup_r+0x1e>
  40141a:	0799      	lsls	r1, r3, #30
  40141c:	bf58      	it	pl
  40141e:	6962      	ldrpl	r2, [r4, #20]
  401420:	60a2      	str	r2, [r4, #8]
  401422:	2800      	cmp	r0, #0
  401424:	d1e0      	bne.n	4013e8 <__swsetup_r+0x30>
  401426:	89a3      	ldrh	r3, [r4, #12]
  401428:	061a      	lsls	r2, r3, #24
  40142a:	d5de      	bpl.n	4013ea <__swsetup_r+0x32>
  40142c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401430:	81a3      	strh	r3, [r4, #12]
  401432:	f04f 30ff 	mov.w	r0, #4294967295
  401436:	bd38      	pop	{r3, r4, r5, pc}
  401438:	4618      	mov	r0, r3
  40143a:	f000 f96d 	bl	401718 <__sinit>
  40143e:	e7c4      	b.n	4013ca <__swsetup_r+0x12>
  401440:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401442:	b149      	cbz	r1, 401458 <__swsetup_r+0xa0>
  401444:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401448:	4299      	cmp	r1, r3
  40144a:	d003      	beq.n	401454 <__swsetup_r+0x9c>
  40144c:	4628      	mov	r0, r5
  40144e:	f000 f9d1 	bl	4017f4 <_free_r>
  401452:	89a2      	ldrh	r2, [r4, #12]
  401454:	2300      	movs	r3, #0
  401456:	6323      	str	r3, [r4, #48]	; 0x30
  401458:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40145c:	2300      	movs	r3, #0
  40145e:	6920      	ldr	r0, [r4, #16]
  401460:	6063      	str	r3, [r4, #4]
  401462:	b292      	uxth	r2, r2
  401464:	6020      	str	r0, [r4, #0]
  401466:	e7c6      	b.n	4013f6 <__swsetup_r+0x3e>
  401468:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40146c:	2309      	movs	r3, #9
  40146e:	602b      	str	r3, [r5, #0]
  401470:	f04f 30ff 	mov.w	r0, #4294967295
  401474:	81a2      	strh	r2, [r4, #12]
  401476:	bd38      	pop	{r3, r4, r5, pc}
  401478:	20000430 	.word	0x20000430

0040147c <register_fini>:
  40147c:	4b02      	ldr	r3, [pc, #8]	; (401488 <register_fini+0xc>)
  40147e:	b113      	cbz	r3, 401486 <register_fini+0xa>
  401480:	4802      	ldr	r0, [pc, #8]	; (40148c <register_fini+0x10>)
  401482:	f000 b805 	b.w	401490 <atexit>
  401486:	4770      	bx	lr
  401488:	00000000 	.word	0x00000000
  40148c:	0040172d 	.word	0x0040172d

00401490 <atexit>:
  401490:	4601      	mov	r1, r0
  401492:	2000      	movs	r0, #0
  401494:	4602      	mov	r2, r0
  401496:	4603      	mov	r3, r0
  401498:	f001 baee 	b.w	402a78 <__register_exitproc>

0040149c <__sflush_r>:
  40149c:	898b      	ldrh	r3, [r1, #12]
  40149e:	b29a      	uxth	r2, r3
  4014a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4014a4:	460d      	mov	r5, r1
  4014a6:	0711      	lsls	r1, r2, #28
  4014a8:	4680      	mov	r8, r0
  4014aa:	d43c      	bmi.n	401526 <__sflush_r+0x8a>
  4014ac:	686a      	ldr	r2, [r5, #4]
  4014ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4014b2:	2a00      	cmp	r2, #0
  4014b4:	81ab      	strh	r3, [r5, #12]
  4014b6:	dd65      	ble.n	401584 <__sflush_r+0xe8>
  4014b8:	6aae      	ldr	r6, [r5, #40]	; 0x28
  4014ba:	2e00      	cmp	r6, #0
  4014bc:	d04b      	beq.n	401556 <__sflush_r+0xba>
  4014be:	b29b      	uxth	r3, r3
  4014c0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  4014c4:	2100      	movs	r1, #0
  4014c6:	b292      	uxth	r2, r2
  4014c8:	f8d8 4000 	ldr.w	r4, [r8]
  4014cc:	f8c8 1000 	str.w	r1, [r8]
  4014d0:	2a00      	cmp	r2, #0
  4014d2:	d05b      	beq.n	40158c <__sflush_r+0xf0>
  4014d4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4014d6:	075f      	lsls	r7, r3, #29
  4014d8:	d505      	bpl.n	4014e6 <__sflush_r+0x4a>
  4014da:	6869      	ldr	r1, [r5, #4]
  4014dc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4014de:	1a52      	subs	r2, r2, r1
  4014e0:	b10b      	cbz	r3, 4014e6 <__sflush_r+0x4a>
  4014e2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4014e4:	1ad2      	subs	r2, r2, r3
  4014e6:	4640      	mov	r0, r8
  4014e8:	69e9      	ldr	r1, [r5, #28]
  4014ea:	2300      	movs	r3, #0
  4014ec:	47b0      	blx	r6
  4014ee:	1c46      	adds	r6, r0, #1
  4014f0:	d056      	beq.n	4015a0 <__sflush_r+0x104>
  4014f2:	89ab      	ldrh	r3, [r5, #12]
  4014f4:	692a      	ldr	r2, [r5, #16]
  4014f6:	602a      	str	r2, [r5, #0]
  4014f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4014fc:	b29b      	uxth	r3, r3
  4014fe:	2200      	movs	r2, #0
  401500:	606a      	str	r2, [r5, #4]
  401502:	04da      	lsls	r2, r3, #19
  401504:	81ab      	strh	r3, [r5, #12]
  401506:	d43b      	bmi.n	401580 <__sflush_r+0xe4>
  401508:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40150a:	f8c8 4000 	str.w	r4, [r8]
  40150e:	b311      	cbz	r1, 401556 <__sflush_r+0xba>
  401510:	f105 0340 	add.w	r3, r5, #64	; 0x40
  401514:	4299      	cmp	r1, r3
  401516:	d002      	beq.n	40151e <__sflush_r+0x82>
  401518:	4640      	mov	r0, r8
  40151a:	f000 f96b 	bl	4017f4 <_free_r>
  40151e:	2000      	movs	r0, #0
  401520:	6328      	str	r0, [r5, #48]	; 0x30
  401522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401526:	692e      	ldr	r6, [r5, #16]
  401528:	b1ae      	cbz	r6, 401556 <__sflush_r+0xba>
  40152a:	682c      	ldr	r4, [r5, #0]
  40152c:	602e      	str	r6, [r5, #0]
  40152e:	0791      	lsls	r1, r2, #30
  401530:	bf0c      	ite	eq
  401532:	696b      	ldreq	r3, [r5, #20]
  401534:	2300      	movne	r3, #0
  401536:	1ba4      	subs	r4, r4, r6
  401538:	60ab      	str	r3, [r5, #8]
  40153a:	e00a      	b.n	401552 <__sflush_r+0xb6>
  40153c:	4632      	mov	r2, r6
  40153e:	4623      	mov	r3, r4
  401540:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  401542:	69e9      	ldr	r1, [r5, #28]
  401544:	4640      	mov	r0, r8
  401546:	47b8      	blx	r7
  401548:	2800      	cmp	r0, #0
  40154a:	eba4 0400 	sub.w	r4, r4, r0
  40154e:	4406      	add	r6, r0
  401550:	dd04      	ble.n	40155c <__sflush_r+0xc0>
  401552:	2c00      	cmp	r4, #0
  401554:	dcf2      	bgt.n	40153c <__sflush_r+0xa0>
  401556:	2000      	movs	r0, #0
  401558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40155c:	89ab      	ldrh	r3, [r5, #12]
  40155e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401562:	81ab      	strh	r3, [r5, #12]
  401564:	f04f 30ff 	mov.w	r0, #4294967295
  401568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40156c:	89ab      	ldrh	r3, [r5, #12]
  40156e:	692a      	ldr	r2, [r5, #16]
  401570:	6069      	str	r1, [r5, #4]
  401572:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  401576:	b29b      	uxth	r3, r3
  401578:	81ab      	strh	r3, [r5, #12]
  40157a:	04db      	lsls	r3, r3, #19
  40157c:	602a      	str	r2, [r5, #0]
  40157e:	d5c3      	bpl.n	401508 <__sflush_r+0x6c>
  401580:	6528      	str	r0, [r5, #80]	; 0x50
  401582:	e7c1      	b.n	401508 <__sflush_r+0x6c>
  401584:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  401586:	2a00      	cmp	r2, #0
  401588:	dc96      	bgt.n	4014b8 <__sflush_r+0x1c>
  40158a:	e7e4      	b.n	401556 <__sflush_r+0xba>
  40158c:	2301      	movs	r3, #1
  40158e:	4640      	mov	r0, r8
  401590:	69e9      	ldr	r1, [r5, #28]
  401592:	47b0      	blx	r6
  401594:	1c43      	adds	r3, r0, #1
  401596:	4602      	mov	r2, r0
  401598:	d019      	beq.n	4015ce <__sflush_r+0x132>
  40159a:	89ab      	ldrh	r3, [r5, #12]
  40159c:	6aae      	ldr	r6, [r5, #40]	; 0x28
  40159e:	e79a      	b.n	4014d6 <__sflush_r+0x3a>
  4015a0:	f8d8 1000 	ldr.w	r1, [r8]
  4015a4:	2900      	cmp	r1, #0
  4015a6:	d0e1      	beq.n	40156c <__sflush_r+0xd0>
  4015a8:	291d      	cmp	r1, #29
  4015aa:	d007      	beq.n	4015bc <__sflush_r+0x120>
  4015ac:	2916      	cmp	r1, #22
  4015ae:	d005      	beq.n	4015bc <__sflush_r+0x120>
  4015b0:	89ab      	ldrh	r3, [r5, #12]
  4015b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4015b6:	81ab      	strh	r3, [r5, #12]
  4015b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4015bc:	89ab      	ldrh	r3, [r5, #12]
  4015be:	692a      	ldr	r2, [r5, #16]
  4015c0:	602a      	str	r2, [r5, #0]
  4015c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4015c6:	2200      	movs	r2, #0
  4015c8:	81ab      	strh	r3, [r5, #12]
  4015ca:	606a      	str	r2, [r5, #4]
  4015cc:	e79c      	b.n	401508 <__sflush_r+0x6c>
  4015ce:	f8d8 3000 	ldr.w	r3, [r8]
  4015d2:	2b00      	cmp	r3, #0
  4015d4:	d0e1      	beq.n	40159a <__sflush_r+0xfe>
  4015d6:	2b1d      	cmp	r3, #29
  4015d8:	d007      	beq.n	4015ea <__sflush_r+0x14e>
  4015da:	2b16      	cmp	r3, #22
  4015dc:	d005      	beq.n	4015ea <__sflush_r+0x14e>
  4015de:	89ab      	ldrh	r3, [r5, #12]
  4015e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4015e4:	81ab      	strh	r3, [r5, #12]
  4015e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4015ea:	f8c8 4000 	str.w	r4, [r8]
  4015ee:	e7b2      	b.n	401556 <__sflush_r+0xba>

004015f0 <_fflush_r>:
  4015f0:	b510      	push	{r4, lr}
  4015f2:	4604      	mov	r4, r0
  4015f4:	b082      	sub	sp, #8
  4015f6:	b108      	cbz	r0, 4015fc <_fflush_r+0xc>
  4015f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4015fa:	b153      	cbz	r3, 401612 <_fflush_r+0x22>
  4015fc:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  401600:	b908      	cbnz	r0, 401606 <_fflush_r+0x16>
  401602:	b002      	add	sp, #8
  401604:	bd10      	pop	{r4, pc}
  401606:	4620      	mov	r0, r4
  401608:	b002      	add	sp, #8
  40160a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40160e:	f7ff bf45 	b.w	40149c <__sflush_r>
  401612:	9101      	str	r1, [sp, #4]
  401614:	f000 f880 	bl	401718 <__sinit>
  401618:	9901      	ldr	r1, [sp, #4]
  40161a:	e7ef      	b.n	4015fc <_fflush_r+0xc>

0040161c <_cleanup_r>:
  40161c:	4901      	ldr	r1, [pc, #4]	; (401624 <_cleanup_r+0x8>)
  40161e:	f000 bb4d 	b.w	401cbc <_fwalk_reent>
  401622:	bf00      	nop
  401624:	00402b41 	.word	0x00402b41

00401628 <__sinit.part.1>:
  401628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40162c:	4b35      	ldr	r3, [pc, #212]	; (401704 <__sinit.part.1+0xdc>)
  40162e:	6845      	ldr	r5, [r0, #4]
  401630:	63c3      	str	r3, [r0, #60]	; 0x3c
  401632:	2400      	movs	r4, #0
  401634:	4607      	mov	r7, r0
  401636:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  40163a:	2304      	movs	r3, #4
  40163c:	2103      	movs	r1, #3
  40163e:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  401642:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  401646:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  40164a:	b083      	sub	sp, #12
  40164c:	602c      	str	r4, [r5, #0]
  40164e:	606c      	str	r4, [r5, #4]
  401650:	60ac      	str	r4, [r5, #8]
  401652:	666c      	str	r4, [r5, #100]	; 0x64
  401654:	81ec      	strh	r4, [r5, #14]
  401656:	612c      	str	r4, [r5, #16]
  401658:	616c      	str	r4, [r5, #20]
  40165a:	61ac      	str	r4, [r5, #24]
  40165c:	81ab      	strh	r3, [r5, #12]
  40165e:	4621      	mov	r1, r4
  401660:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  401664:	2208      	movs	r2, #8
  401666:	f7ff fbf5 	bl	400e54 <memset>
  40166a:	68be      	ldr	r6, [r7, #8]
  40166c:	f8df b098 	ldr.w	fp, [pc, #152]	; 401708 <__sinit.part.1+0xe0>
  401670:	f8df a098 	ldr.w	sl, [pc, #152]	; 40170c <__sinit.part.1+0xe4>
  401674:	f8df 9098 	ldr.w	r9, [pc, #152]	; 401710 <__sinit.part.1+0xe8>
  401678:	f8df 8098 	ldr.w	r8, [pc, #152]	; 401714 <__sinit.part.1+0xec>
  40167c:	f8c5 b020 	str.w	fp, [r5, #32]
  401680:	2301      	movs	r3, #1
  401682:	2209      	movs	r2, #9
  401684:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  401688:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40168c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  401690:	61ed      	str	r5, [r5, #28]
  401692:	4621      	mov	r1, r4
  401694:	81f3      	strh	r3, [r6, #14]
  401696:	81b2      	strh	r2, [r6, #12]
  401698:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  40169c:	6034      	str	r4, [r6, #0]
  40169e:	6074      	str	r4, [r6, #4]
  4016a0:	60b4      	str	r4, [r6, #8]
  4016a2:	6674      	str	r4, [r6, #100]	; 0x64
  4016a4:	6134      	str	r4, [r6, #16]
  4016a6:	6174      	str	r4, [r6, #20]
  4016a8:	61b4      	str	r4, [r6, #24]
  4016aa:	2208      	movs	r2, #8
  4016ac:	9301      	str	r3, [sp, #4]
  4016ae:	f7ff fbd1 	bl	400e54 <memset>
  4016b2:	68fd      	ldr	r5, [r7, #12]
  4016b4:	61f6      	str	r6, [r6, #28]
  4016b6:	2012      	movs	r0, #18
  4016b8:	2202      	movs	r2, #2
  4016ba:	f8c6 b020 	str.w	fp, [r6, #32]
  4016be:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  4016c2:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  4016c6:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  4016ca:	4621      	mov	r1, r4
  4016cc:	81a8      	strh	r0, [r5, #12]
  4016ce:	81ea      	strh	r2, [r5, #14]
  4016d0:	602c      	str	r4, [r5, #0]
  4016d2:	606c      	str	r4, [r5, #4]
  4016d4:	60ac      	str	r4, [r5, #8]
  4016d6:	666c      	str	r4, [r5, #100]	; 0x64
  4016d8:	612c      	str	r4, [r5, #16]
  4016da:	616c      	str	r4, [r5, #20]
  4016dc:	61ac      	str	r4, [r5, #24]
  4016de:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4016e2:	2208      	movs	r2, #8
  4016e4:	f7ff fbb6 	bl	400e54 <memset>
  4016e8:	9b01      	ldr	r3, [sp, #4]
  4016ea:	61ed      	str	r5, [r5, #28]
  4016ec:	f8c5 b020 	str.w	fp, [r5, #32]
  4016f0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4016f4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4016f8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4016fc:	63bb      	str	r3, [r7, #56]	; 0x38
  4016fe:	b003      	add	sp, #12
  401700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401704:	0040161d 	.word	0x0040161d
  401708:	004029cd 	.word	0x004029cd
  40170c:	004029f1 	.word	0x004029f1
  401710:	00402a29 	.word	0x00402a29
  401714:	00402a49 	.word	0x00402a49

00401718 <__sinit>:
  401718:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40171a:	b103      	cbz	r3, 40171e <__sinit+0x6>
  40171c:	4770      	bx	lr
  40171e:	f7ff bf83 	b.w	401628 <__sinit.part.1>
  401722:	bf00      	nop

00401724 <__sfp_lock_acquire>:
  401724:	4770      	bx	lr
  401726:	bf00      	nop

00401728 <__sfp_lock_release>:
  401728:	4770      	bx	lr
  40172a:	bf00      	nop

0040172c <__libc_fini_array>:
  40172c:	b538      	push	{r3, r4, r5, lr}
  40172e:	4b08      	ldr	r3, [pc, #32]	; (401750 <__libc_fini_array+0x24>)
  401730:	4d08      	ldr	r5, [pc, #32]	; (401754 <__libc_fini_array+0x28>)
  401732:	1aed      	subs	r5, r5, r3
  401734:	10ac      	asrs	r4, r5, #2
  401736:	bf18      	it	ne
  401738:	18ed      	addne	r5, r5, r3
  40173a:	d005      	beq.n	401748 <__libc_fini_array+0x1c>
  40173c:	3c01      	subs	r4, #1
  40173e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  401742:	4798      	blx	r3
  401744:	2c00      	cmp	r4, #0
  401746:	d1f9      	bne.n	40173c <__libc_fini_array+0x10>
  401748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40174c:	f001 bb22 	b.w	402d94 <_fini>
  401750:	00402da0 	.word	0x00402da0
  401754:	00402da4 	.word	0x00402da4

00401758 <_malloc_trim_r>:
  401758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40175a:	4f23      	ldr	r7, [pc, #140]	; (4017e8 <_malloc_trim_r+0x90>)
  40175c:	460c      	mov	r4, r1
  40175e:	4606      	mov	r6, r0
  401760:	f000 ff28 	bl	4025b4 <__malloc_lock>
  401764:	68bb      	ldr	r3, [r7, #8]
  401766:	685d      	ldr	r5, [r3, #4]
  401768:	f025 0503 	bic.w	r5, r5, #3
  40176c:	1b29      	subs	r1, r5, r4
  40176e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  401772:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  401776:	f021 010f 	bic.w	r1, r1, #15
  40177a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40177e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  401782:	db07      	blt.n	401794 <_malloc_trim_r+0x3c>
  401784:	4630      	mov	r0, r6
  401786:	2100      	movs	r1, #0
  401788:	f001 f90e 	bl	4029a8 <_sbrk_r>
  40178c:	68bb      	ldr	r3, [r7, #8]
  40178e:	442b      	add	r3, r5
  401790:	4298      	cmp	r0, r3
  401792:	d004      	beq.n	40179e <_malloc_trim_r+0x46>
  401794:	4630      	mov	r0, r6
  401796:	f000 ff0f 	bl	4025b8 <__malloc_unlock>
  40179a:	2000      	movs	r0, #0
  40179c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40179e:	4630      	mov	r0, r6
  4017a0:	4261      	negs	r1, r4
  4017a2:	f001 f901 	bl	4029a8 <_sbrk_r>
  4017a6:	3001      	adds	r0, #1
  4017a8:	d00d      	beq.n	4017c6 <_malloc_trim_r+0x6e>
  4017aa:	4b10      	ldr	r3, [pc, #64]	; (4017ec <_malloc_trim_r+0x94>)
  4017ac:	68ba      	ldr	r2, [r7, #8]
  4017ae:	6819      	ldr	r1, [r3, #0]
  4017b0:	1b2d      	subs	r5, r5, r4
  4017b2:	f045 0501 	orr.w	r5, r5, #1
  4017b6:	4630      	mov	r0, r6
  4017b8:	1b09      	subs	r1, r1, r4
  4017ba:	6055      	str	r5, [r2, #4]
  4017bc:	6019      	str	r1, [r3, #0]
  4017be:	f000 fefb 	bl	4025b8 <__malloc_unlock>
  4017c2:	2001      	movs	r0, #1
  4017c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4017c6:	4630      	mov	r0, r6
  4017c8:	2100      	movs	r1, #0
  4017ca:	f001 f8ed 	bl	4029a8 <_sbrk_r>
  4017ce:	68ba      	ldr	r2, [r7, #8]
  4017d0:	1a83      	subs	r3, r0, r2
  4017d2:	2b0f      	cmp	r3, #15
  4017d4:	ddde      	ble.n	401794 <_malloc_trim_r+0x3c>
  4017d6:	4c06      	ldr	r4, [pc, #24]	; (4017f0 <_malloc_trim_r+0x98>)
  4017d8:	4904      	ldr	r1, [pc, #16]	; (4017ec <_malloc_trim_r+0x94>)
  4017da:	6824      	ldr	r4, [r4, #0]
  4017dc:	f043 0301 	orr.w	r3, r3, #1
  4017e0:	1b00      	subs	r0, r0, r4
  4017e2:	6053      	str	r3, [r2, #4]
  4017e4:	6008      	str	r0, [r1, #0]
  4017e6:	e7d5      	b.n	401794 <_malloc_trim_r+0x3c>
  4017e8:	20000434 	.word	0x20000434
  4017ec:	200008e4 	.word	0x200008e4
  4017f0:	20000840 	.word	0x20000840

004017f4 <_free_r>:
  4017f4:	2900      	cmp	r1, #0
  4017f6:	d04e      	beq.n	401896 <_free_r+0xa2>
  4017f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4017fc:	460c      	mov	r4, r1
  4017fe:	4680      	mov	r8, r0
  401800:	f000 fed8 	bl	4025b4 <__malloc_lock>
  401804:	f854 7c04 	ldr.w	r7, [r4, #-4]
  401808:	4962      	ldr	r1, [pc, #392]	; (401994 <_free_r+0x1a0>)
  40180a:	f027 0201 	bic.w	r2, r7, #1
  40180e:	f1a4 0508 	sub.w	r5, r4, #8
  401812:	18ab      	adds	r3, r5, r2
  401814:	688e      	ldr	r6, [r1, #8]
  401816:	6858      	ldr	r0, [r3, #4]
  401818:	429e      	cmp	r6, r3
  40181a:	f020 0003 	bic.w	r0, r0, #3
  40181e:	d05a      	beq.n	4018d6 <_free_r+0xe2>
  401820:	07fe      	lsls	r6, r7, #31
  401822:	6058      	str	r0, [r3, #4]
  401824:	d40b      	bmi.n	40183e <_free_r+0x4a>
  401826:	f854 7c08 	ldr.w	r7, [r4, #-8]
  40182a:	1bed      	subs	r5, r5, r7
  40182c:	f101 0e08 	add.w	lr, r1, #8
  401830:	68ac      	ldr	r4, [r5, #8]
  401832:	4574      	cmp	r4, lr
  401834:	443a      	add	r2, r7
  401836:	d067      	beq.n	401908 <_free_r+0x114>
  401838:	68ef      	ldr	r7, [r5, #12]
  40183a:	60e7      	str	r7, [r4, #12]
  40183c:	60bc      	str	r4, [r7, #8]
  40183e:	181c      	adds	r4, r3, r0
  401840:	6864      	ldr	r4, [r4, #4]
  401842:	07e4      	lsls	r4, r4, #31
  401844:	d40c      	bmi.n	401860 <_free_r+0x6c>
  401846:	4f54      	ldr	r7, [pc, #336]	; (401998 <_free_r+0x1a4>)
  401848:	689c      	ldr	r4, [r3, #8]
  40184a:	42bc      	cmp	r4, r7
  40184c:	4402      	add	r2, r0
  40184e:	d07c      	beq.n	40194a <_free_r+0x156>
  401850:	68d8      	ldr	r0, [r3, #12]
  401852:	60e0      	str	r0, [r4, #12]
  401854:	f042 0301 	orr.w	r3, r2, #1
  401858:	6084      	str	r4, [r0, #8]
  40185a:	606b      	str	r3, [r5, #4]
  40185c:	50aa      	str	r2, [r5, r2]
  40185e:	e003      	b.n	401868 <_free_r+0x74>
  401860:	f042 0301 	orr.w	r3, r2, #1
  401864:	606b      	str	r3, [r5, #4]
  401866:	50aa      	str	r2, [r5, r2]
  401868:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40186c:	d214      	bcs.n	401898 <_free_r+0xa4>
  40186e:	08d2      	lsrs	r2, r2, #3
  401870:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  401874:	6848      	ldr	r0, [r1, #4]
  401876:	689f      	ldr	r7, [r3, #8]
  401878:	60af      	str	r7, [r5, #8]
  40187a:	1092      	asrs	r2, r2, #2
  40187c:	2401      	movs	r4, #1
  40187e:	fa04 f202 	lsl.w	r2, r4, r2
  401882:	4310      	orrs	r0, r2
  401884:	60eb      	str	r3, [r5, #12]
  401886:	6048      	str	r0, [r1, #4]
  401888:	609d      	str	r5, [r3, #8]
  40188a:	60fd      	str	r5, [r7, #12]
  40188c:	4640      	mov	r0, r8
  40188e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401892:	f000 be91 	b.w	4025b8 <__malloc_unlock>
  401896:	4770      	bx	lr
  401898:	0a53      	lsrs	r3, r2, #9
  40189a:	2b04      	cmp	r3, #4
  40189c:	d847      	bhi.n	40192e <_free_r+0x13a>
  40189e:	0993      	lsrs	r3, r2, #6
  4018a0:	f103 0438 	add.w	r4, r3, #56	; 0x38
  4018a4:	0060      	lsls	r0, r4, #1
  4018a6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  4018aa:	493a      	ldr	r1, [pc, #232]	; (401994 <_free_r+0x1a0>)
  4018ac:	6883      	ldr	r3, [r0, #8]
  4018ae:	4283      	cmp	r3, r0
  4018b0:	d043      	beq.n	40193a <_free_r+0x146>
  4018b2:	6859      	ldr	r1, [r3, #4]
  4018b4:	f021 0103 	bic.w	r1, r1, #3
  4018b8:	4291      	cmp	r1, r2
  4018ba:	d902      	bls.n	4018c2 <_free_r+0xce>
  4018bc:	689b      	ldr	r3, [r3, #8]
  4018be:	4298      	cmp	r0, r3
  4018c0:	d1f7      	bne.n	4018b2 <_free_r+0xbe>
  4018c2:	68da      	ldr	r2, [r3, #12]
  4018c4:	60ea      	str	r2, [r5, #12]
  4018c6:	60ab      	str	r3, [r5, #8]
  4018c8:	4640      	mov	r0, r8
  4018ca:	6095      	str	r5, [r2, #8]
  4018cc:	60dd      	str	r5, [r3, #12]
  4018ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4018d2:	f000 be71 	b.w	4025b8 <__malloc_unlock>
  4018d6:	07ff      	lsls	r7, r7, #31
  4018d8:	4402      	add	r2, r0
  4018da:	d407      	bmi.n	4018ec <_free_r+0xf8>
  4018dc:	f854 3c08 	ldr.w	r3, [r4, #-8]
  4018e0:	1aed      	subs	r5, r5, r3
  4018e2:	441a      	add	r2, r3
  4018e4:	68a8      	ldr	r0, [r5, #8]
  4018e6:	68eb      	ldr	r3, [r5, #12]
  4018e8:	60c3      	str	r3, [r0, #12]
  4018ea:	6098      	str	r0, [r3, #8]
  4018ec:	4b2b      	ldr	r3, [pc, #172]	; (40199c <_free_r+0x1a8>)
  4018ee:	681b      	ldr	r3, [r3, #0]
  4018f0:	f042 0001 	orr.w	r0, r2, #1
  4018f4:	429a      	cmp	r2, r3
  4018f6:	6068      	str	r0, [r5, #4]
  4018f8:	608d      	str	r5, [r1, #8]
  4018fa:	d3c7      	bcc.n	40188c <_free_r+0x98>
  4018fc:	4b28      	ldr	r3, [pc, #160]	; (4019a0 <_free_r+0x1ac>)
  4018fe:	4640      	mov	r0, r8
  401900:	6819      	ldr	r1, [r3, #0]
  401902:	f7ff ff29 	bl	401758 <_malloc_trim_r>
  401906:	e7c1      	b.n	40188c <_free_r+0x98>
  401908:	1819      	adds	r1, r3, r0
  40190a:	6849      	ldr	r1, [r1, #4]
  40190c:	07c9      	lsls	r1, r1, #31
  40190e:	d409      	bmi.n	401924 <_free_r+0x130>
  401910:	68d9      	ldr	r1, [r3, #12]
  401912:	689b      	ldr	r3, [r3, #8]
  401914:	4402      	add	r2, r0
  401916:	f042 0001 	orr.w	r0, r2, #1
  40191a:	60d9      	str	r1, [r3, #12]
  40191c:	608b      	str	r3, [r1, #8]
  40191e:	6068      	str	r0, [r5, #4]
  401920:	50aa      	str	r2, [r5, r2]
  401922:	e7b3      	b.n	40188c <_free_r+0x98>
  401924:	f042 0301 	orr.w	r3, r2, #1
  401928:	606b      	str	r3, [r5, #4]
  40192a:	50aa      	str	r2, [r5, r2]
  40192c:	e7ae      	b.n	40188c <_free_r+0x98>
  40192e:	2b14      	cmp	r3, #20
  401930:	d814      	bhi.n	40195c <_free_r+0x168>
  401932:	f103 045b 	add.w	r4, r3, #91	; 0x5b
  401936:	0060      	lsls	r0, r4, #1
  401938:	e7b5      	b.n	4018a6 <_free_r+0xb2>
  40193a:	684a      	ldr	r2, [r1, #4]
  40193c:	10a4      	asrs	r4, r4, #2
  40193e:	2001      	movs	r0, #1
  401940:	40a0      	lsls	r0, r4
  401942:	4302      	orrs	r2, r0
  401944:	604a      	str	r2, [r1, #4]
  401946:	461a      	mov	r2, r3
  401948:	e7bc      	b.n	4018c4 <_free_r+0xd0>
  40194a:	f042 0301 	orr.w	r3, r2, #1
  40194e:	614d      	str	r5, [r1, #20]
  401950:	610d      	str	r5, [r1, #16]
  401952:	60ec      	str	r4, [r5, #12]
  401954:	60ac      	str	r4, [r5, #8]
  401956:	606b      	str	r3, [r5, #4]
  401958:	50aa      	str	r2, [r5, r2]
  40195a:	e797      	b.n	40188c <_free_r+0x98>
  40195c:	2b54      	cmp	r3, #84	; 0x54
  40195e:	d804      	bhi.n	40196a <_free_r+0x176>
  401960:	0b13      	lsrs	r3, r2, #12
  401962:	f103 046e 	add.w	r4, r3, #110	; 0x6e
  401966:	0060      	lsls	r0, r4, #1
  401968:	e79d      	b.n	4018a6 <_free_r+0xb2>
  40196a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40196e:	d804      	bhi.n	40197a <_free_r+0x186>
  401970:	0bd3      	lsrs	r3, r2, #15
  401972:	f103 0477 	add.w	r4, r3, #119	; 0x77
  401976:	0060      	lsls	r0, r4, #1
  401978:	e795      	b.n	4018a6 <_free_r+0xb2>
  40197a:	f240 5054 	movw	r0, #1364	; 0x554
  40197e:	4283      	cmp	r3, r0
  401980:	d804      	bhi.n	40198c <_free_r+0x198>
  401982:	0c93      	lsrs	r3, r2, #18
  401984:	f103 047c 	add.w	r4, r3, #124	; 0x7c
  401988:	0060      	lsls	r0, r4, #1
  40198a:	e78c      	b.n	4018a6 <_free_r+0xb2>
  40198c:	20fc      	movs	r0, #252	; 0xfc
  40198e:	247e      	movs	r4, #126	; 0x7e
  401990:	e789      	b.n	4018a6 <_free_r+0xb2>
  401992:	bf00      	nop
  401994:	20000434 	.word	0x20000434
  401998:	2000043c 	.word	0x2000043c
  40199c:	2000083c 	.word	0x2000083c
  4019a0:	200008e0 	.word	0x200008e0

004019a4 <__sfvwrite_r>:
  4019a4:	6893      	ldr	r3, [r2, #8]
  4019a6:	2b00      	cmp	r3, #0
  4019a8:	d07a      	beq.n	401aa0 <__sfvwrite_r+0xfc>
  4019aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4019ae:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  4019b2:	f01e 0f08 	tst.w	lr, #8
  4019b6:	b083      	sub	sp, #12
  4019b8:	460c      	mov	r4, r1
  4019ba:	4681      	mov	r9, r0
  4019bc:	4616      	mov	r6, r2
  4019be:	d026      	beq.n	401a0e <__sfvwrite_r+0x6a>
  4019c0:	690b      	ldr	r3, [r1, #16]
  4019c2:	b323      	cbz	r3, 401a0e <__sfvwrite_r+0x6a>
  4019c4:	f00e 0802 	and.w	r8, lr, #2
  4019c8:	fa1f f088 	uxth.w	r0, r8
  4019cc:	6835      	ldr	r5, [r6, #0]
  4019ce:	b370      	cbz	r0, 401a2e <__sfvwrite_r+0x8a>
  4019d0:	f04f 0a00 	mov.w	sl, #0
  4019d4:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 401cb8 <__sfvwrite_r+0x314>
  4019d8:	46d0      	mov	r8, sl
  4019da:	45d8      	cmp	r8, fp
  4019dc:	4643      	mov	r3, r8
  4019de:	4652      	mov	r2, sl
  4019e0:	bf28      	it	cs
  4019e2:	465b      	movcs	r3, fp
  4019e4:	4648      	mov	r0, r9
  4019e6:	f1b8 0f00 	cmp.w	r8, #0
  4019ea:	d053      	beq.n	401a94 <__sfvwrite_r+0xf0>
  4019ec:	69e1      	ldr	r1, [r4, #28]
  4019ee:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4019f0:	47b8      	blx	r7
  4019f2:	2800      	cmp	r0, #0
  4019f4:	dd73      	ble.n	401ade <__sfvwrite_r+0x13a>
  4019f6:	68b3      	ldr	r3, [r6, #8]
  4019f8:	1a1b      	subs	r3, r3, r0
  4019fa:	4482      	add	sl, r0
  4019fc:	ebc0 0808 	rsb	r8, r0, r8
  401a00:	60b3      	str	r3, [r6, #8]
  401a02:	2b00      	cmp	r3, #0
  401a04:	d1e9      	bne.n	4019da <__sfvwrite_r+0x36>
  401a06:	2000      	movs	r0, #0
  401a08:	b003      	add	sp, #12
  401a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401a0e:	4648      	mov	r0, r9
  401a10:	4621      	mov	r1, r4
  401a12:	f7ff fcd1 	bl	4013b8 <__swsetup_r>
  401a16:	2800      	cmp	r0, #0
  401a18:	f040 8145 	bne.w	401ca6 <__sfvwrite_r+0x302>
  401a1c:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  401a20:	6835      	ldr	r5, [r6, #0]
  401a22:	f00e 0802 	and.w	r8, lr, #2
  401a26:	fa1f f088 	uxth.w	r0, r8
  401a2a:	2800      	cmp	r0, #0
  401a2c:	d1d0      	bne.n	4019d0 <__sfvwrite_r+0x2c>
  401a2e:	f01e 0b01 	ands.w	fp, lr, #1
  401a32:	d15d      	bne.n	401af0 <__sfvwrite_r+0x14c>
  401a34:	46d8      	mov	r8, fp
  401a36:	f1b8 0f00 	cmp.w	r8, #0
  401a3a:	d025      	beq.n	401a88 <__sfvwrite_r+0xe4>
  401a3c:	f41e 7f00 	tst.w	lr, #512	; 0x200
  401a40:	68a7      	ldr	r7, [r4, #8]
  401a42:	d02f      	beq.n	401aa4 <__sfvwrite_r+0x100>
  401a44:	45b8      	cmp	r8, r7
  401a46:	46ba      	mov	sl, r7
  401a48:	f0c0 80a9 	bcc.w	401b9e <__sfvwrite_r+0x1fa>
  401a4c:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  401a50:	f040 80b6 	bne.w	401bc0 <__sfvwrite_r+0x21c>
  401a54:	6820      	ldr	r0, [r4, #0]
  401a56:	4652      	mov	r2, sl
  401a58:	4659      	mov	r1, fp
  401a5a:	f000 fd47 	bl	4024ec <memmove>
  401a5e:	68a0      	ldr	r0, [r4, #8]
  401a60:	6822      	ldr	r2, [r4, #0]
  401a62:	1bc0      	subs	r0, r0, r7
  401a64:	eb02 030a 	add.w	r3, r2, sl
  401a68:	60a0      	str	r0, [r4, #8]
  401a6a:	6023      	str	r3, [r4, #0]
  401a6c:	4640      	mov	r0, r8
  401a6e:	68b3      	ldr	r3, [r6, #8]
  401a70:	1a1b      	subs	r3, r3, r0
  401a72:	4483      	add	fp, r0
  401a74:	ebc0 0808 	rsb	r8, r0, r8
  401a78:	60b3      	str	r3, [r6, #8]
  401a7a:	2b00      	cmp	r3, #0
  401a7c:	d0c3      	beq.n	401a06 <__sfvwrite_r+0x62>
  401a7e:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  401a82:	f1b8 0f00 	cmp.w	r8, #0
  401a86:	d1d9      	bne.n	401a3c <__sfvwrite_r+0x98>
  401a88:	f8d5 b000 	ldr.w	fp, [r5]
  401a8c:	f8d5 8004 	ldr.w	r8, [r5, #4]
  401a90:	3508      	adds	r5, #8
  401a92:	e7d0      	b.n	401a36 <__sfvwrite_r+0x92>
  401a94:	f8d5 a000 	ldr.w	sl, [r5]
  401a98:	f8d5 8004 	ldr.w	r8, [r5, #4]
  401a9c:	3508      	adds	r5, #8
  401a9e:	e79c      	b.n	4019da <__sfvwrite_r+0x36>
  401aa0:	2000      	movs	r0, #0
  401aa2:	4770      	bx	lr
  401aa4:	6820      	ldr	r0, [r4, #0]
  401aa6:	6923      	ldr	r3, [r4, #16]
  401aa8:	4298      	cmp	r0, r3
  401aaa:	d803      	bhi.n	401ab4 <__sfvwrite_r+0x110>
  401aac:	6962      	ldr	r2, [r4, #20]
  401aae:	4590      	cmp	r8, r2
  401ab0:	f080 80b9 	bcs.w	401c26 <__sfvwrite_r+0x282>
  401ab4:	4547      	cmp	r7, r8
  401ab6:	bf28      	it	cs
  401ab8:	4647      	movcs	r7, r8
  401aba:	463a      	mov	r2, r7
  401abc:	4659      	mov	r1, fp
  401abe:	f000 fd15 	bl	4024ec <memmove>
  401ac2:	68a3      	ldr	r3, [r4, #8]
  401ac4:	6822      	ldr	r2, [r4, #0]
  401ac6:	1bdb      	subs	r3, r3, r7
  401ac8:	443a      	add	r2, r7
  401aca:	60a3      	str	r3, [r4, #8]
  401acc:	6022      	str	r2, [r4, #0]
  401ace:	2b00      	cmp	r3, #0
  401ad0:	d14a      	bne.n	401b68 <__sfvwrite_r+0x1c4>
  401ad2:	4648      	mov	r0, r9
  401ad4:	4621      	mov	r1, r4
  401ad6:	f7ff fd8b 	bl	4015f0 <_fflush_r>
  401ada:	2800      	cmp	r0, #0
  401adc:	d044      	beq.n	401b68 <__sfvwrite_r+0x1c4>
  401ade:	89a3      	ldrh	r3, [r4, #12]
  401ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401ae4:	f04f 30ff 	mov.w	r0, #4294967295
  401ae8:	81a3      	strh	r3, [r4, #12]
  401aea:	b003      	add	sp, #12
  401aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401af0:	4680      	mov	r8, r0
  401af2:	9000      	str	r0, [sp, #0]
  401af4:	4683      	mov	fp, r0
  401af6:	4682      	mov	sl, r0
  401af8:	f1ba 0f00 	cmp.w	sl, #0
  401afc:	d02c      	beq.n	401b58 <__sfvwrite_r+0x1b4>
  401afe:	9b00      	ldr	r3, [sp, #0]
  401b00:	2b00      	cmp	r3, #0
  401b02:	d050      	beq.n	401ba6 <__sfvwrite_r+0x202>
  401b04:	6820      	ldr	r0, [r4, #0]
  401b06:	6921      	ldr	r1, [r4, #16]
  401b08:	f8d4 e008 	ldr.w	lr, [r4, #8]
  401b0c:	6962      	ldr	r2, [r4, #20]
  401b0e:	45d0      	cmp	r8, sl
  401b10:	4643      	mov	r3, r8
  401b12:	bf28      	it	cs
  401b14:	4653      	movcs	r3, sl
  401b16:	4288      	cmp	r0, r1
  401b18:	461f      	mov	r7, r3
  401b1a:	d904      	bls.n	401b26 <__sfvwrite_r+0x182>
  401b1c:	eb0e 0c02 	add.w	ip, lr, r2
  401b20:	4563      	cmp	r3, ip
  401b22:	f300 8092 	bgt.w	401c4a <__sfvwrite_r+0x2a6>
  401b26:	4293      	cmp	r3, r2
  401b28:	db20      	blt.n	401b6c <__sfvwrite_r+0x1c8>
  401b2a:	4613      	mov	r3, r2
  401b2c:	6a67      	ldr	r7, [r4, #36]	; 0x24
  401b2e:	69e1      	ldr	r1, [r4, #28]
  401b30:	4648      	mov	r0, r9
  401b32:	465a      	mov	r2, fp
  401b34:	47b8      	blx	r7
  401b36:	1e07      	subs	r7, r0, #0
  401b38:	ddd1      	ble.n	401ade <__sfvwrite_r+0x13a>
  401b3a:	ebb8 0807 	subs.w	r8, r8, r7
  401b3e:	d025      	beq.n	401b8c <__sfvwrite_r+0x1e8>
  401b40:	68b3      	ldr	r3, [r6, #8]
  401b42:	1bdb      	subs	r3, r3, r7
  401b44:	44bb      	add	fp, r7
  401b46:	ebc7 0a0a 	rsb	sl, r7, sl
  401b4a:	60b3      	str	r3, [r6, #8]
  401b4c:	2b00      	cmp	r3, #0
  401b4e:	f43f af5a 	beq.w	401a06 <__sfvwrite_r+0x62>
  401b52:	f1ba 0f00 	cmp.w	sl, #0
  401b56:	d1d2      	bne.n	401afe <__sfvwrite_r+0x15a>
  401b58:	2300      	movs	r3, #0
  401b5a:	f8d5 b000 	ldr.w	fp, [r5]
  401b5e:	f8d5 a004 	ldr.w	sl, [r5, #4]
  401b62:	9300      	str	r3, [sp, #0]
  401b64:	3508      	adds	r5, #8
  401b66:	e7c7      	b.n	401af8 <__sfvwrite_r+0x154>
  401b68:	4638      	mov	r0, r7
  401b6a:	e780      	b.n	401a6e <__sfvwrite_r+0xca>
  401b6c:	461a      	mov	r2, r3
  401b6e:	4659      	mov	r1, fp
  401b70:	9301      	str	r3, [sp, #4]
  401b72:	f000 fcbb 	bl	4024ec <memmove>
  401b76:	68a2      	ldr	r2, [r4, #8]
  401b78:	6821      	ldr	r1, [r4, #0]
  401b7a:	9b01      	ldr	r3, [sp, #4]
  401b7c:	ebb8 0807 	subs.w	r8, r8, r7
  401b80:	eba2 0203 	sub.w	r2, r2, r3
  401b84:	440b      	add	r3, r1
  401b86:	60a2      	str	r2, [r4, #8]
  401b88:	6023      	str	r3, [r4, #0]
  401b8a:	d1d9      	bne.n	401b40 <__sfvwrite_r+0x19c>
  401b8c:	4648      	mov	r0, r9
  401b8e:	4621      	mov	r1, r4
  401b90:	f7ff fd2e 	bl	4015f0 <_fflush_r>
  401b94:	2800      	cmp	r0, #0
  401b96:	d1a2      	bne.n	401ade <__sfvwrite_r+0x13a>
  401b98:	f8cd 8000 	str.w	r8, [sp]
  401b9c:	e7d0      	b.n	401b40 <__sfvwrite_r+0x19c>
  401b9e:	6820      	ldr	r0, [r4, #0]
  401ba0:	4647      	mov	r7, r8
  401ba2:	46c2      	mov	sl, r8
  401ba4:	e757      	b.n	401a56 <__sfvwrite_r+0xb2>
  401ba6:	4658      	mov	r0, fp
  401ba8:	210a      	movs	r1, #10
  401baa:	4652      	mov	r2, sl
  401bac:	f000 fbba 	bl	402324 <memchr>
  401bb0:	2800      	cmp	r0, #0
  401bb2:	d073      	beq.n	401c9c <__sfvwrite_r+0x2f8>
  401bb4:	3001      	adds	r0, #1
  401bb6:	2301      	movs	r3, #1
  401bb8:	ebcb 0800 	rsb	r8, fp, r0
  401bbc:	9300      	str	r3, [sp, #0]
  401bbe:	e7a1      	b.n	401b04 <__sfvwrite_r+0x160>
  401bc0:	6967      	ldr	r7, [r4, #20]
  401bc2:	6921      	ldr	r1, [r4, #16]
  401bc4:	6823      	ldr	r3, [r4, #0]
  401bc6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  401bca:	1a5b      	subs	r3, r3, r1
  401bcc:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  401bd0:	1c58      	adds	r0, r3, #1
  401bd2:	107f      	asrs	r7, r7, #1
  401bd4:	4440      	add	r0, r8
  401bd6:	4287      	cmp	r7, r0
  401bd8:	463a      	mov	r2, r7
  401bda:	bf3c      	itt	cc
  401bdc:	4607      	movcc	r7, r0
  401bde:	463a      	movcc	r2, r7
  401be0:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  401be4:	9300      	str	r3, [sp, #0]
  401be6:	d046      	beq.n	401c76 <__sfvwrite_r+0x2d2>
  401be8:	4611      	mov	r1, r2
  401bea:	4648      	mov	r0, r9
  401bec:	f000 f908 	bl	401e00 <_malloc_r>
  401bf0:	9b00      	ldr	r3, [sp, #0]
  401bf2:	4682      	mov	sl, r0
  401bf4:	2800      	cmp	r0, #0
  401bf6:	d059      	beq.n	401cac <__sfvwrite_r+0x308>
  401bf8:	461a      	mov	r2, r3
  401bfa:	6921      	ldr	r1, [r4, #16]
  401bfc:	9300      	str	r3, [sp, #0]
  401bfe:	f000 fbdb 	bl	4023b8 <memcpy>
  401c02:	89a2      	ldrh	r2, [r4, #12]
  401c04:	9b00      	ldr	r3, [sp, #0]
  401c06:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  401c0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  401c0e:	81a2      	strh	r2, [r4, #12]
  401c10:	eb0a 0003 	add.w	r0, sl, r3
  401c14:	1afb      	subs	r3, r7, r3
  401c16:	f8c4 a010 	str.w	sl, [r4, #16]
  401c1a:	6167      	str	r7, [r4, #20]
  401c1c:	6020      	str	r0, [r4, #0]
  401c1e:	60a3      	str	r3, [r4, #8]
  401c20:	4647      	mov	r7, r8
  401c22:	46c2      	mov	sl, r8
  401c24:	e717      	b.n	401a56 <__sfvwrite_r+0xb2>
  401c26:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  401c2a:	4543      	cmp	r3, r8
  401c2c:	bf28      	it	cs
  401c2e:	4643      	movcs	r3, r8
  401c30:	6a67      	ldr	r7, [r4, #36]	; 0x24
  401c32:	fb93 f3f2 	sdiv	r3, r3, r2
  401c36:	4648      	mov	r0, r9
  401c38:	fb03 f302 	mul.w	r3, r3, r2
  401c3c:	69e1      	ldr	r1, [r4, #28]
  401c3e:	465a      	mov	r2, fp
  401c40:	47b8      	blx	r7
  401c42:	2800      	cmp	r0, #0
  401c44:	f73f af13 	bgt.w	401a6e <__sfvwrite_r+0xca>
  401c48:	e749      	b.n	401ade <__sfvwrite_r+0x13a>
  401c4a:	4662      	mov	r2, ip
  401c4c:	4659      	mov	r1, fp
  401c4e:	f8cd c004 	str.w	ip, [sp, #4]
  401c52:	f000 fc4b 	bl	4024ec <memmove>
  401c56:	6823      	ldr	r3, [r4, #0]
  401c58:	f8dd c004 	ldr.w	ip, [sp, #4]
  401c5c:	4463      	add	r3, ip
  401c5e:	6023      	str	r3, [r4, #0]
  401c60:	4648      	mov	r0, r9
  401c62:	4621      	mov	r1, r4
  401c64:	f7ff fcc4 	bl	4015f0 <_fflush_r>
  401c68:	f8dd c004 	ldr.w	ip, [sp, #4]
  401c6c:	2800      	cmp	r0, #0
  401c6e:	f47f af36 	bne.w	401ade <__sfvwrite_r+0x13a>
  401c72:	4667      	mov	r7, ip
  401c74:	e761      	b.n	401b3a <__sfvwrite_r+0x196>
  401c76:	4648      	mov	r0, r9
  401c78:	f000 fca0 	bl	4025bc <_realloc_r>
  401c7c:	9b00      	ldr	r3, [sp, #0]
  401c7e:	4682      	mov	sl, r0
  401c80:	2800      	cmp	r0, #0
  401c82:	d1c5      	bne.n	401c10 <__sfvwrite_r+0x26c>
  401c84:	4648      	mov	r0, r9
  401c86:	6921      	ldr	r1, [r4, #16]
  401c88:	f7ff fdb4 	bl	4017f4 <_free_r>
  401c8c:	89a3      	ldrh	r3, [r4, #12]
  401c8e:	220c      	movs	r2, #12
  401c90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  401c94:	b29b      	uxth	r3, r3
  401c96:	f8c9 2000 	str.w	r2, [r9]
  401c9a:	e721      	b.n	401ae0 <__sfvwrite_r+0x13c>
  401c9c:	2301      	movs	r3, #1
  401c9e:	f10a 0801 	add.w	r8, sl, #1
  401ca2:	9300      	str	r3, [sp, #0]
  401ca4:	e72e      	b.n	401b04 <__sfvwrite_r+0x160>
  401ca6:	f04f 30ff 	mov.w	r0, #4294967295
  401caa:	e6ad      	b.n	401a08 <__sfvwrite_r+0x64>
  401cac:	230c      	movs	r3, #12
  401cae:	f8c9 3000 	str.w	r3, [r9]
  401cb2:	89a3      	ldrh	r3, [r4, #12]
  401cb4:	e714      	b.n	401ae0 <__sfvwrite_r+0x13c>
  401cb6:	bf00      	nop
  401cb8:	7ffffc00 	.word	0x7ffffc00

00401cbc <_fwalk_reent>:
  401cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401cc0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  401cc4:	d01f      	beq.n	401d06 <_fwalk_reent+0x4a>
  401cc6:	4688      	mov	r8, r1
  401cc8:	4606      	mov	r6, r0
  401cca:	f04f 0900 	mov.w	r9, #0
  401cce:	687d      	ldr	r5, [r7, #4]
  401cd0:	68bc      	ldr	r4, [r7, #8]
  401cd2:	3d01      	subs	r5, #1
  401cd4:	d411      	bmi.n	401cfa <_fwalk_reent+0x3e>
  401cd6:	89a3      	ldrh	r3, [r4, #12]
  401cd8:	2b01      	cmp	r3, #1
  401cda:	f105 35ff 	add.w	r5, r5, #4294967295
  401cde:	d908      	bls.n	401cf2 <_fwalk_reent+0x36>
  401ce0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  401ce4:	3301      	adds	r3, #1
  401ce6:	4621      	mov	r1, r4
  401ce8:	4630      	mov	r0, r6
  401cea:	d002      	beq.n	401cf2 <_fwalk_reent+0x36>
  401cec:	47c0      	blx	r8
  401cee:	ea49 0900 	orr.w	r9, r9, r0
  401cf2:	1c6b      	adds	r3, r5, #1
  401cf4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  401cf8:	d1ed      	bne.n	401cd6 <_fwalk_reent+0x1a>
  401cfa:	683f      	ldr	r7, [r7, #0]
  401cfc:	2f00      	cmp	r7, #0
  401cfe:	d1e6      	bne.n	401cce <_fwalk_reent+0x12>
  401d00:	4648      	mov	r0, r9
  401d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401d06:	46b9      	mov	r9, r7
  401d08:	4648      	mov	r0, r9
  401d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401d0e:	bf00      	nop

00401d10 <__smakebuf_r>:
  401d10:	898b      	ldrh	r3, [r1, #12]
  401d12:	b29a      	uxth	r2, r3
  401d14:	f012 0f02 	tst.w	r2, #2
  401d18:	d13c      	bne.n	401d94 <__smakebuf_r+0x84>
  401d1a:	b5f0      	push	{r4, r5, r6, r7, lr}
  401d1c:	460c      	mov	r4, r1
  401d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401d22:	2900      	cmp	r1, #0
  401d24:	b091      	sub	sp, #68	; 0x44
  401d26:	4605      	mov	r5, r0
  401d28:	db19      	blt.n	401d5e <__smakebuf_r+0x4e>
  401d2a:	aa01      	add	r2, sp, #4
  401d2c:	f000 ff4a 	bl	402bc4 <_fstat_r>
  401d30:	2800      	cmp	r0, #0
  401d32:	db12      	blt.n	401d5a <__smakebuf_r+0x4a>
  401d34:	9b02      	ldr	r3, [sp, #8]
  401d36:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  401d3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  401d3e:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  401d42:	fab7 f787 	clz	r7, r7
  401d46:	ea4f 1757 	mov.w	r7, r7, lsr #5
  401d4a:	d02a      	beq.n	401da2 <__smakebuf_r+0x92>
  401d4c:	89a3      	ldrh	r3, [r4, #12]
  401d4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  401d52:	81a3      	strh	r3, [r4, #12]
  401d54:	f44f 6680 	mov.w	r6, #1024	; 0x400
  401d58:	e00b      	b.n	401d72 <__smakebuf_r+0x62>
  401d5a:	89a3      	ldrh	r3, [r4, #12]
  401d5c:	b29a      	uxth	r2, r3
  401d5e:	f012 0f80 	tst.w	r2, #128	; 0x80
  401d62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  401d66:	81a3      	strh	r3, [r4, #12]
  401d68:	bf0c      	ite	eq
  401d6a:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  401d6e:	2640      	movne	r6, #64	; 0x40
  401d70:	2700      	movs	r7, #0
  401d72:	4628      	mov	r0, r5
  401d74:	4631      	mov	r1, r6
  401d76:	f000 f843 	bl	401e00 <_malloc_r>
  401d7a:	89a3      	ldrh	r3, [r4, #12]
  401d7c:	b340      	cbz	r0, 401dd0 <__smakebuf_r+0xc0>
  401d7e:	4a1a      	ldr	r2, [pc, #104]	; (401de8 <__smakebuf_r+0xd8>)
  401d80:	63ea      	str	r2, [r5, #60]	; 0x3c
  401d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401d86:	81a3      	strh	r3, [r4, #12]
  401d88:	6020      	str	r0, [r4, #0]
  401d8a:	6120      	str	r0, [r4, #16]
  401d8c:	6166      	str	r6, [r4, #20]
  401d8e:	b99f      	cbnz	r7, 401db8 <__smakebuf_r+0xa8>
  401d90:	b011      	add	sp, #68	; 0x44
  401d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401d94:	f101 0343 	add.w	r3, r1, #67	; 0x43
  401d98:	2201      	movs	r2, #1
  401d9a:	600b      	str	r3, [r1, #0]
  401d9c:	610b      	str	r3, [r1, #16]
  401d9e:	614a      	str	r2, [r1, #20]
  401da0:	4770      	bx	lr
  401da2:	4b12      	ldr	r3, [pc, #72]	; (401dec <__smakebuf_r+0xdc>)
  401da4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  401da6:	429a      	cmp	r2, r3
  401da8:	d1d0      	bne.n	401d4c <__smakebuf_r+0x3c>
  401daa:	89a3      	ldrh	r3, [r4, #12]
  401dac:	f44f 6680 	mov.w	r6, #1024	; 0x400
  401db0:	4333      	orrs	r3, r6
  401db2:	81a3      	strh	r3, [r4, #12]
  401db4:	64e6      	str	r6, [r4, #76]	; 0x4c
  401db6:	e7dc      	b.n	401d72 <__smakebuf_r+0x62>
  401db8:	4628      	mov	r0, r5
  401dba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  401dbe:	f000 ff15 	bl	402bec <_isatty_r>
  401dc2:	2800      	cmp	r0, #0
  401dc4:	d0e4      	beq.n	401d90 <__smakebuf_r+0x80>
  401dc6:	89a3      	ldrh	r3, [r4, #12]
  401dc8:	f043 0301 	orr.w	r3, r3, #1
  401dcc:	81a3      	strh	r3, [r4, #12]
  401dce:	e7df      	b.n	401d90 <__smakebuf_r+0x80>
  401dd0:	059a      	lsls	r2, r3, #22
  401dd2:	d4dd      	bmi.n	401d90 <__smakebuf_r+0x80>
  401dd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401dd8:	f043 0302 	orr.w	r3, r3, #2
  401ddc:	2101      	movs	r1, #1
  401dde:	81a3      	strh	r3, [r4, #12]
  401de0:	6022      	str	r2, [r4, #0]
  401de2:	6122      	str	r2, [r4, #16]
  401de4:	6161      	str	r1, [r4, #20]
  401de6:	e7d3      	b.n	401d90 <__smakebuf_r+0x80>
  401de8:	0040161d 	.word	0x0040161d
  401dec:	00402a29 	.word	0x00402a29

00401df0 <malloc>:
  401df0:	4b02      	ldr	r3, [pc, #8]	; (401dfc <malloc+0xc>)
  401df2:	4601      	mov	r1, r0
  401df4:	6818      	ldr	r0, [r3, #0]
  401df6:	f000 b803 	b.w	401e00 <_malloc_r>
  401dfa:	bf00      	nop
  401dfc:	20000430 	.word	0x20000430

00401e00 <_malloc_r>:
  401e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401e04:	f101 050b 	add.w	r5, r1, #11
  401e08:	2d16      	cmp	r5, #22
  401e0a:	b083      	sub	sp, #12
  401e0c:	4606      	mov	r6, r0
  401e0e:	d927      	bls.n	401e60 <_malloc_r+0x60>
  401e10:	f035 0507 	bics.w	r5, r5, #7
  401e14:	f100 80b6 	bmi.w	401f84 <_malloc_r+0x184>
  401e18:	42a9      	cmp	r1, r5
  401e1a:	f200 80b3 	bhi.w	401f84 <_malloc_r+0x184>
  401e1e:	f000 fbc9 	bl	4025b4 <__malloc_lock>
  401e22:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  401e26:	d222      	bcs.n	401e6e <_malloc_r+0x6e>
  401e28:	4fc2      	ldr	r7, [pc, #776]	; (402134 <_malloc_r+0x334>)
  401e2a:	08e8      	lsrs	r0, r5, #3
  401e2c:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
  401e30:	68dc      	ldr	r4, [r3, #12]
  401e32:	429c      	cmp	r4, r3
  401e34:	f000 81c8 	beq.w	4021c8 <_malloc_r+0x3c8>
  401e38:	6863      	ldr	r3, [r4, #4]
  401e3a:	68e1      	ldr	r1, [r4, #12]
  401e3c:	68a5      	ldr	r5, [r4, #8]
  401e3e:	f023 0303 	bic.w	r3, r3, #3
  401e42:	4423      	add	r3, r4
  401e44:	4630      	mov	r0, r6
  401e46:	685a      	ldr	r2, [r3, #4]
  401e48:	60e9      	str	r1, [r5, #12]
  401e4a:	f042 0201 	orr.w	r2, r2, #1
  401e4e:	608d      	str	r5, [r1, #8]
  401e50:	605a      	str	r2, [r3, #4]
  401e52:	f000 fbb1 	bl	4025b8 <__malloc_unlock>
  401e56:	3408      	adds	r4, #8
  401e58:	4620      	mov	r0, r4
  401e5a:	b003      	add	sp, #12
  401e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e60:	2910      	cmp	r1, #16
  401e62:	f200 808f 	bhi.w	401f84 <_malloc_r+0x184>
  401e66:	f000 fba5 	bl	4025b4 <__malloc_lock>
  401e6a:	2510      	movs	r5, #16
  401e6c:	e7dc      	b.n	401e28 <_malloc_r+0x28>
  401e6e:	0a68      	lsrs	r0, r5, #9
  401e70:	f000 808f 	beq.w	401f92 <_malloc_r+0x192>
  401e74:	2804      	cmp	r0, #4
  401e76:	f200 8154 	bhi.w	402122 <_malloc_r+0x322>
  401e7a:	09a8      	lsrs	r0, r5, #6
  401e7c:	3038      	adds	r0, #56	; 0x38
  401e7e:	0041      	lsls	r1, r0, #1
  401e80:	4fac      	ldr	r7, [pc, #688]	; (402134 <_malloc_r+0x334>)
  401e82:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  401e86:	68cc      	ldr	r4, [r1, #12]
  401e88:	42a1      	cmp	r1, r4
  401e8a:	d106      	bne.n	401e9a <_malloc_r+0x9a>
  401e8c:	e00c      	b.n	401ea8 <_malloc_r+0xa8>
  401e8e:	2a00      	cmp	r2, #0
  401e90:	f280 8082 	bge.w	401f98 <_malloc_r+0x198>
  401e94:	68e4      	ldr	r4, [r4, #12]
  401e96:	42a1      	cmp	r1, r4
  401e98:	d006      	beq.n	401ea8 <_malloc_r+0xa8>
  401e9a:	6863      	ldr	r3, [r4, #4]
  401e9c:	f023 0303 	bic.w	r3, r3, #3
  401ea0:	1b5a      	subs	r2, r3, r5
  401ea2:	2a0f      	cmp	r2, #15
  401ea4:	ddf3      	ble.n	401e8e <_malloc_r+0x8e>
  401ea6:	3801      	subs	r0, #1
  401ea8:	3001      	adds	r0, #1
  401eaa:	49a2      	ldr	r1, [pc, #648]	; (402134 <_malloc_r+0x334>)
  401eac:	693c      	ldr	r4, [r7, #16]
  401eae:	f101 0e08 	add.w	lr, r1, #8
  401eb2:	4574      	cmp	r4, lr
  401eb4:	f000 817d 	beq.w	4021b2 <_malloc_r+0x3b2>
  401eb8:	6863      	ldr	r3, [r4, #4]
  401eba:	f023 0303 	bic.w	r3, r3, #3
  401ebe:	1b5a      	subs	r2, r3, r5
  401ec0:	2a0f      	cmp	r2, #15
  401ec2:	f300 8163 	bgt.w	40218c <_malloc_r+0x38c>
  401ec6:	2a00      	cmp	r2, #0
  401ec8:	f8c1 e014 	str.w	lr, [r1, #20]
  401ecc:	f8c1 e010 	str.w	lr, [r1, #16]
  401ed0:	da73      	bge.n	401fba <_malloc_r+0x1ba>
  401ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401ed6:	f080 8139 	bcs.w	40214c <_malloc_r+0x34c>
  401eda:	08db      	lsrs	r3, r3, #3
  401edc:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  401ee0:	ea4f 0ca3 	mov.w	ip, r3, asr #2
  401ee4:	684a      	ldr	r2, [r1, #4]
  401ee6:	f8d8 9008 	ldr.w	r9, [r8, #8]
  401eea:	f8c4 9008 	str.w	r9, [r4, #8]
  401eee:	2301      	movs	r3, #1
  401ef0:	fa03 f30c 	lsl.w	r3, r3, ip
  401ef4:	4313      	orrs	r3, r2
  401ef6:	f8c4 800c 	str.w	r8, [r4, #12]
  401efa:	604b      	str	r3, [r1, #4]
  401efc:	f8c8 4008 	str.w	r4, [r8, #8]
  401f00:	f8c9 400c 	str.w	r4, [r9, #12]
  401f04:	1082      	asrs	r2, r0, #2
  401f06:	2401      	movs	r4, #1
  401f08:	4094      	lsls	r4, r2
  401f0a:	429c      	cmp	r4, r3
  401f0c:	d862      	bhi.n	401fd4 <_malloc_r+0x1d4>
  401f0e:	4223      	tst	r3, r4
  401f10:	d106      	bne.n	401f20 <_malloc_r+0x120>
  401f12:	f020 0003 	bic.w	r0, r0, #3
  401f16:	0064      	lsls	r4, r4, #1
  401f18:	4223      	tst	r3, r4
  401f1a:	f100 0004 	add.w	r0, r0, #4
  401f1e:	d0fa      	beq.n	401f16 <_malloc_r+0x116>
  401f20:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
  401f24:	46c4      	mov	ip, r8
  401f26:	4681      	mov	r9, r0
  401f28:	f8dc 300c 	ldr.w	r3, [ip, #12]
  401f2c:	459c      	cmp	ip, r3
  401f2e:	d107      	bne.n	401f40 <_malloc_r+0x140>
  401f30:	e141      	b.n	4021b6 <_malloc_r+0x3b6>
  401f32:	2900      	cmp	r1, #0
  401f34:	f280 8151 	bge.w	4021da <_malloc_r+0x3da>
  401f38:	68db      	ldr	r3, [r3, #12]
  401f3a:	459c      	cmp	ip, r3
  401f3c:	f000 813b 	beq.w	4021b6 <_malloc_r+0x3b6>
  401f40:	685a      	ldr	r2, [r3, #4]
  401f42:	f022 0203 	bic.w	r2, r2, #3
  401f46:	1b51      	subs	r1, r2, r5
  401f48:	290f      	cmp	r1, #15
  401f4a:	ddf2      	ble.n	401f32 <_malloc_r+0x132>
  401f4c:	461c      	mov	r4, r3
  401f4e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  401f52:	f854 8f08 	ldr.w	r8, [r4, #8]!
  401f56:	195a      	adds	r2, r3, r5
  401f58:	f045 0901 	orr.w	r9, r5, #1
  401f5c:	f041 0501 	orr.w	r5, r1, #1
  401f60:	f8c3 9004 	str.w	r9, [r3, #4]
  401f64:	4630      	mov	r0, r6
  401f66:	f8c8 c00c 	str.w	ip, [r8, #12]
  401f6a:	f8cc 8008 	str.w	r8, [ip, #8]
  401f6e:	617a      	str	r2, [r7, #20]
  401f70:	613a      	str	r2, [r7, #16]
  401f72:	f8c2 e00c 	str.w	lr, [r2, #12]
  401f76:	f8c2 e008 	str.w	lr, [r2, #8]
  401f7a:	6055      	str	r5, [r2, #4]
  401f7c:	5051      	str	r1, [r2, r1]
  401f7e:	f000 fb1b 	bl	4025b8 <__malloc_unlock>
  401f82:	e769      	b.n	401e58 <_malloc_r+0x58>
  401f84:	2400      	movs	r4, #0
  401f86:	230c      	movs	r3, #12
  401f88:	4620      	mov	r0, r4
  401f8a:	6033      	str	r3, [r6, #0]
  401f8c:	b003      	add	sp, #12
  401f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f92:	217e      	movs	r1, #126	; 0x7e
  401f94:	203f      	movs	r0, #63	; 0x3f
  401f96:	e773      	b.n	401e80 <_malloc_r+0x80>
  401f98:	4423      	add	r3, r4
  401f9a:	68e1      	ldr	r1, [r4, #12]
  401f9c:	685a      	ldr	r2, [r3, #4]
  401f9e:	68a5      	ldr	r5, [r4, #8]
  401fa0:	f042 0201 	orr.w	r2, r2, #1
  401fa4:	60e9      	str	r1, [r5, #12]
  401fa6:	4630      	mov	r0, r6
  401fa8:	608d      	str	r5, [r1, #8]
  401faa:	605a      	str	r2, [r3, #4]
  401fac:	f000 fb04 	bl	4025b8 <__malloc_unlock>
  401fb0:	3408      	adds	r4, #8
  401fb2:	4620      	mov	r0, r4
  401fb4:	b003      	add	sp, #12
  401fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401fba:	4423      	add	r3, r4
  401fbc:	4630      	mov	r0, r6
  401fbe:	685a      	ldr	r2, [r3, #4]
  401fc0:	f042 0201 	orr.w	r2, r2, #1
  401fc4:	605a      	str	r2, [r3, #4]
  401fc6:	f000 faf7 	bl	4025b8 <__malloc_unlock>
  401fca:	3408      	adds	r4, #8
  401fcc:	4620      	mov	r0, r4
  401fce:	b003      	add	sp, #12
  401fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401fd4:	68bc      	ldr	r4, [r7, #8]
  401fd6:	6863      	ldr	r3, [r4, #4]
  401fd8:	f023 0803 	bic.w	r8, r3, #3
  401fdc:	4545      	cmp	r5, r8
  401fde:	d804      	bhi.n	401fea <_malloc_r+0x1ea>
  401fe0:	ebc5 0308 	rsb	r3, r5, r8
  401fe4:	2b0f      	cmp	r3, #15
  401fe6:	f300 808c 	bgt.w	402102 <_malloc_r+0x302>
  401fea:	4b53      	ldr	r3, [pc, #332]	; (402138 <_malloc_r+0x338>)
  401fec:	f8df a158 	ldr.w	sl, [pc, #344]	; 402148 <_malloc_r+0x348>
  401ff0:	681a      	ldr	r2, [r3, #0]
  401ff2:	f8da 3000 	ldr.w	r3, [sl]
  401ff6:	3301      	adds	r3, #1
  401ff8:	442a      	add	r2, r5
  401ffa:	eb04 0b08 	add.w	fp, r4, r8
  401ffe:	f000 8150 	beq.w	4022a2 <_malloc_r+0x4a2>
  402002:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  402006:	320f      	adds	r2, #15
  402008:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  40200c:	f022 020f 	bic.w	r2, r2, #15
  402010:	4611      	mov	r1, r2
  402012:	4630      	mov	r0, r6
  402014:	9201      	str	r2, [sp, #4]
  402016:	f000 fcc7 	bl	4029a8 <_sbrk_r>
  40201a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40201e:	4681      	mov	r9, r0
  402020:	9a01      	ldr	r2, [sp, #4]
  402022:	f000 8147 	beq.w	4022b4 <_malloc_r+0x4b4>
  402026:	4583      	cmp	fp, r0
  402028:	f200 80ee 	bhi.w	402208 <_malloc_r+0x408>
  40202c:	4b43      	ldr	r3, [pc, #268]	; (40213c <_malloc_r+0x33c>)
  40202e:	6819      	ldr	r1, [r3, #0]
  402030:	45cb      	cmp	fp, r9
  402032:	4411      	add	r1, r2
  402034:	6019      	str	r1, [r3, #0]
  402036:	f000 8142 	beq.w	4022be <_malloc_r+0x4be>
  40203a:	f8da 0000 	ldr.w	r0, [sl]
  40203e:	f8df e108 	ldr.w	lr, [pc, #264]	; 402148 <_malloc_r+0x348>
  402042:	3001      	adds	r0, #1
  402044:	bf1b      	ittet	ne
  402046:	ebcb 0b09 	rsbne	fp, fp, r9
  40204a:	4459      	addne	r1, fp
  40204c:	f8ce 9000 	streq.w	r9, [lr]
  402050:	6019      	strne	r1, [r3, #0]
  402052:	f019 0107 	ands.w	r1, r9, #7
  402056:	f000 8107 	beq.w	402268 <_malloc_r+0x468>
  40205a:	f1c1 0008 	rsb	r0, r1, #8
  40205e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402062:	4481      	add	r9, r0
  402064:	3108      	adds	r1, #8
  402066:	444a      	add	r2, r9
  402068:	f3c2 020b 	ubfx	r2, r2, #0, #12
  40206c:	ebc2 0a01 	rsb	sl, r2, r1
  402070:	4651      	mov	r1, sl
  402072:	4630      	mov	r0, r6
  402074:	9301      	str	r3, [sp, #4]
  402076:	f000 fc97 	bl	4029a8 <_sbrk_r>
  40207a:	1c43      	adds	r3, r0, #1
  40207c:	9b01      	ldr	r3, [sp, #4]
  40207e:	f000 812c 	beq.w	4022da <_malloc_r+0x4da>
  402082:	ebc9 0200 	rsb	r2, r9, r0
  402086:	4452      	add	r2, sl
  402088:	f042 0201 	orr.w	r2, r2, #1
  40208c:	6819      	ldr	r1, [r3, #0]
  40208e:	f8c7 9008 	str.w	r9, [r7, #8]
  402092:	4451      	add	r1, sl
  402094:	42bc      	cmp	r4, r7
  402096:	f8c9 2004 	str.w	r2, [r9, #4]
  40209a:	6019      	str	r1, [r3, #0]
  40209c:	f8df a09c 	ldr.w	sl, [pc, #156]	; 40213c <_malloc_r+0x33c>
  4020a0:	d016      	beq.n	4020d0 <_malloc_r+0x2d0>
  4020a2:	f1b8 0f0f 	cmp.w	r8, #15
  4020a6:	f240 80ee 	bls.w	402286 <_malloc_r+0x486>
  4020aa:	6862      	ldr	r2, [r4, #4]
  4020ac:	f1a8 030c 	sub.w	r3, r8, #12
  4020b0:	f023 0307 	bic.w	r3, r3, #7
  4020b4:	18e0      	adds	r0, r4, r3
  4020b6:	f002 0201 	and.w	r2, r2, #1
  4020ba:	f04f 0e05 	mov.w	lr, #5
  4020be:	431a      	orrs	r2, r3
  4020c0:	2b0f      	cmp	r3, #15
  4020c2:	6062      	str	r2, [r4, #4]
  4020c4:	f8c0 e004 	str.w	lr, [r0, #4]
  4020c8:	f8c0 e008 	str.w	lr, [r0, #8]
  4020cc:	f200 8109 	bhi.w	4022e2 <_malloc_r+0x4e2>
  4020d0:	4b1b      	ldr	r3, [pc, #108]	; (402140 <_malloc_r+0x340>)
  4020d2:	68bc      	ldr	r4, [r7, #8]
  4020d4:	681a      	ldr	r2, [r3, #0]
  4020d6:	4291      	cmp	r1, r2
  4020d8:	bf88      	it	hi
  4020da:	6019      	strhi	r1, [r3, #0]
  4020dc:	4b19      	ldr	r3, [pc, #100]	; (402144 <_malloc_r+0x344>)
  4020de:	681a      	ldr	r2, [r3, #0]
  4020e0:	4291      	cmp	r1, r2
  4020e2:	6862      	ldr	r2, [r4, #4]
  4020e4:	bf88      	it	hi
  4020e6:	6019      	strhi	r1, [r3, #0]
  4020e8:	f022 0203 	bic.w	r2, r2, #3
  4020ec:	4295      	cmp	r5, r2
  4020ee:	eba2 0305 	sub.w	r3, r2, r5
  4020f2:	d801      	bhi.n	4020f8 <_malloc_r+0x2f8>
  4020f4:	2b0f      	cmp	r3, #15
  4020f6:	dc04      	bgt.n	402102 <_malloc_r+0x302>
  4020f8:	4630      	mov	r0, r6
  4020fa:	f000 fa5d 	bl	4025b8 <__malloc_unlock>
  4020fe:	2400      	movs	r4, #0
  402100:	e6aa      	b.n	401e58 <_malloc_r+0x58>
  402102:	1962      	adds	r2, r4, r5
  402104:	f043 0301 	orr.w	r3, r3, #1
  402108:	f045 0501 	orr.w	r5, r5, #1
  40210c:	6065      	str	r5, [r4, #4]
  40210e:	4630      	mov	r0, r6
  402110:	60ba      	str	r2, [r7, #8]
  402112:	6053      	str	r3, [r2, #4]
  402114:	f000 fa50 	bl	4025b8 <__malloc_unlock>
  402118:	3408      	adds	r4, #8
  40211a:	4620      	mov	r0, r4
  40211c:	b003      	add	sp, #12
  40211e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402122:	2814      	cmp	r0, #20
  402124:	d968      	bls.n	4021f8 <_malloc_r+0x3f8>
  402126:	2854      	cmp	r0, #84	; 0x54
  402128:	f200 8097 	bhi.w	40225a <_malloc_r+0x45a>
  40212c:	0b28      	lsrs	r0, r5, #12
  40212e:	306e      	adds	r0, #110	; 0x6e
  402130:	0041      	lsls	r1, r0, #1
  402132:	e6a5      	b.n	401e80 <_malloc_r+0x80>
  402134:	20000434 	.word	0x20000434
  402138:	200008e0 	.word	0x200008e0
  40213c:	200008e4 	.word	0x200008e4
  402140:	200008dc 	.word	0x200008dc
  402144:	200008d8 	.word	0x200008d8
  402148:	20000840 	.word	0x20000840
  40214c:	0a5a      	lsrs	r2, r3, #9
  40214e:	2a04      	cmp	r2, #4
  402150:	d955      	bls.n	4021fe <_malloc_r+0x3fe>
  402152:	2a14      	cmp	r2, #20
  402154:	f200 80a7 	bhi.w	4022a6 <_malloc_r+0x4a6>
  402158:	325b      	adds	r2, #91	; 0x5b
  40215a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  40215e:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
  402162:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 402320 <_malloc_r+0x520>
  402166:	f8dc 1008 	ldr.w	r1, [ip, #8]
  40216a:	4561      	cmp	r1, ip
  40216c:	d07f      	beq.n	40226e <_malloc_r+0x46e>
  40216e:	684a      	ldr	r2, [r1, #4]
  402170:	f022 0203 	bic.w	r2, r2, #3
  402174:	4293      	cmp	r3, r2
  402176:	d202      	bcs.n	40217e <_malloc_r+0x37e>
  402178:	6889      	ldr	r1, [r1, #8]
  40217a:	458c      	cmp	ip, r1
  40217c:	d1f7      	bne.n	40216e <_malloc_r+0x36e>
  40217e:	68ca      	ldr	r2, [r1, #12]
  402180:	687b      	ldr	r3, [r7, #4]
  402182:	60e2      	str	r2, [r4, #12]
  402184:	60a1      	str	r1, [r4, #8]
  402186:	6094      	str	r4, [r2, #8]
  402188:	60cc      	str	r4, [r1, #12]
  40218a:	e6bb      	b.n	401f04 <_malloc_r+0x104>
  40218c:	1963      	adds	r3, r4, r5
  40218e:	f042 0701 	orr.w	r7, r2, #1
  402192:	f045 0501 	orr.w	r5, r5, #1
  402196:	6065      	str	r5, [r4, #4]
  402198:	4630      	mov	r0, r6
  40219a:	614b      	str	r3, [r1, #20]
  40219c:	610b      	str	r3, [r1, #16]
  40219e:	f8c3 e00c 	str.w	lr, [r3, #12]
  4021a2:	f8c3 e008 	str.w	lr, [r3, #8]
  4021a6:	605f      	str	r7, [r3, #4]
  4021a8:	509a      	str	r2, [r3, r2]
  4021aa:	3408      	adds	r4, #8
  4021ac:	f000 fa04 	bl	4025b8 <__malloc_unlock>
  4021b0:	e652      	b.n	401e58 <_malloc_r+0x58>
  4021b2:	684b      	ldr	r3, [r1, #4]
  4021b4:	e6a6      	b.n	401f04 <_malloc_r+0x104>
  4021b6:	f109 0901 	add.w	r9, r9, #1
  4021ba:	f019 0f03 	tst.w	r9, #3
  4021be:	f10c 0c08 	add.w	ip, ip, #8
  4021c2:	f47f aeb1 	bne.w	401f28 <_malloc_r+0x128>
  4021c6:	e02c      	b.n	402222 <_malloc_r+0x422>
  4021c8:	f104 0308 	add.w	r3, r4, #8
  4021cc:	6964      	ldr	r4, [r4, #20]
  4021ce:	42a3      	cmp	r3, r4
  4021d0:	bf08      	it	eq
  4021d2:	3002      	addeq	r0, #2
  4021d4:	f43f ae69 	beq.w	401eaa <_malloc_r+0xaa>
  4021d8:	e62e      	b.n	401e38 <_malloc_r+0x38>
  4021da:	441a      	add	r2, r3
  4021dc:	461c      	mov	r4, r3
  4021de:	6851      	ldr	r1, [r2, #4]
  4021e0:	68db      	ldr	r3, [r3, #12]
  4021e2:	f854 5f08 	ldr.w	r5, [r4, #8]!
  4021e6:	f041 0101 	orr.w	r1, r1, #1
  4021ea:	6051      	str	r1, [r2, #4]
  4021ec:	4630      	mov	r0, r6
  4021ee:	60eb      	str	r3, [r5, #12]
  4021f0:	609d      	str	r5, [r3, #8]
  4021f2:	f000 f9e1 	bl	4025b8 <__malloc_unlock>
  4021f6:	e62f      	b.n	401e58 <_malloc_r+0x58>
  4021f8:	305b      	adds	r0, #91	; 0x5b
  4021fa:	0041      	lsls	r1, r0, #1
  4021fc:	e640      	b.n	401e80 <_malloc_r+0x80>
  4021fe:	099a      	lsrs	r2, r3, #6
  402200:	3238      	adds	r2, #56	; 0x38
  402202:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  402206:	e7aa      	b.n	40215e <_malloc_r+0x35e>
  402208:	42bc      	cmp	r4, r7
  40220a:	4b45      	ldr	r3, [pc, #276]	; (402320 <_malloc_r+0x520>)
  40220c:	f43f af0e 	beq.w	40202c <_malloc_r+0x22c>
  402210:	689c      	ldr	r4, [r3, #8]
  402212:	6862      	ldr	r2, [r4, #4]
  402214:	f022 0203 	bic.w	r2, r2, #3
  402218:	e768      	b.n	4020ec <_malloc_r+0x2ec>
  40221a:	f8d8 8000 	ldr.w	r8, [r8]
  40221e:	4598      	cmp	r8, r3
  402220:	d17c      	bne.n	40231c <_malloc_r+0x51c>
  402222:	f010 0f03 	tst.w	r0, #3
  402226:	f1a8 0308 	sub.w	r3, r8, #8
  40222a:	f100 30ff 	add.w	r0, r0, #4294967295
  40222e:	d1f4      	bne.n	40221a <_malloc_r+0x41a>
  402230:	687b      	ldr	r3, [r7, #4]
  402232:	ea23 0304 	bic.w	r3, r3, r4
  402236:	607b      	str	r3, [r7, #4]
  402238:	0064      	lsls	r4, r4, #1
  40223a:	429c      	cmp	r4, r3
  40223c:	f63f aeca 	bhi.w	401fd4 <_malloc_r+0x1d4>
  402240:	2c00      	cmp	r4, #0
  402242:	f43f aec7 	beq.w	401fd4 <_malloc_r+0x1d4>
  402246:	4223      	tst	r3, r4
  402248:	4648      	mov	r0, r9
  40224a:	f47f ae69 	bne.w	401f20 <_malloc_r+0x120>
  40224e:	0064      	lsls	r4, r4, #1
  402250:	4223      	tst	r3, r4
  402252:	f100 0004 	add.w	r0, r0, #4
  402256:	d0fa      	beq.n	40224e <_malloc_r+0x44e>
  402258:	e662      	b.n	401f20 <_malloc_r+0x120>
  40225a:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  40225e:	d818      	bhi.n	402292 <_malloc_r+0x492>
  402260:	0be8      	lsrs	r0, r5, #15
  402262:	3077      	adds	r0, #119	; 0x77
  402264:	0041      	lsls	r1, r0, #1
  402266:	e60b      	b.n	401e80 <_malloc_r+0x80>
  402268:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40226c:	e6fb      	b.n	402066 <_malloc_r+0x266>
  40226e:	f8d8 3004 	ldr.w	r3, [r8, #4]
  402272:	1092      	asrs	r2, r2, #2
  402274:	f04f 0c01 	mov.w	ip, #1
  402278:	fa0c f202 	lsl.w	r2, ip, r2
  40227c:	4313      	orrs	r3, r2
  40227e:	f8c8 3004 	str.w	r3, [r8, #4]
  402282:	460a      	mov	r2, r1
  402284:	e77d      	b.n	402182 <_malloc_r+0x382>
  402286:	2301      	movs	r3, #1
  402288:	f8c9 3004 	str.w	r3, [r9, #4]
  40228c:	464c      	mov	r4, r9
  40228e:	2200      	movs	r2, #0
  402290:	e72c      	b.n	4020ec <_malloc_r+0x2ec>
  402292:	f240 5354 	movw	r3, #1364	; 0x554
  402296:	4298      	cmp	r0, r3
  402298:	d81c      	bhi.n	4022d4 <_malloc_r+0x4d4>
  40229a:	0ca8      	lsrs	r0, r5, #18
  40229c:	307c      	adds	r0, #124	; 0x7c
  40229e:	0041      	lsls	r1, r0, #1
  4022a0:	e5ee      	b.n	401e80 <_malloc_r+0x80>
  4022a2:	3210      	adds	r2, #16
  4022a4:	e6b4      	b.n	402010 <_malloc_r+0x210>
  4022a6:	2a54      	cmp	r2, #84	; 0x54
  4022a8:	d823      	bhi.n	4022f2 <_malloc_r+0x4f2>
  4022aa:	0b1a      	lsrs	r2, r3, #12
  4022ac:	326e      	adds	r2, #110	; 0x6e
  4022ae:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  4022b2:	e754      	b.n	40215e <_malloc_r+0x35e>
  4022b4:	68bc      	ldr	r4, [r7, #8]
  4022b6:	6862      	ldr	r2, [r4, #4]
  4022b8:	f022 0203 	bic.w	r2, r2, #3
  4022bc:	e716      	b.n	4020ec <_malloc_r+0x2ec>
  4022be:	f3cb 000b 	ubfx	r0, fp, #0, #12
  4022c2:	2800      	cmp	r0, #0
  4022c4:	f47f aeb9 	bne.w	40203a <_malloc_r+0x23a>
  4022c8:	4442      	add	r2, r8
  4022ca:	68bb      	ldr	r3, [r7, #8]
  4022cc:	f042 0201 	orr.w	r2, r2, #1
  4022d0:	605a      	str	r2, [r3, #4]
  4022d2:	e6fd      	b.n	4020d0 <_malloc_r+0x2d0>
  4022d4:	21fc      	movs	r1, #252	; 0xfc
  4022d6:	207e      	movs	r0, #126	; 0x7e
  4022d8:	e5d2      	b.n	401e80 <_malloc_r+0x80>
  4022da:	2201      	movs	r2, #1
  4022dc:	f04f 0a00 	mov.w	sl, #0
  4022e0:	e6d4      	b.n	40208c <_malloc_r+0x28c>
  4022e2:	f104 0108 	add.w	r1, r4, #8
  4022e6:	4630      	mov	r0, r6
  4022e8:	f7ff fa84 	bl	4017f4 <_free_r>
  4022ec:	f8da 1000 	ldr.w	r1, [sl]
  4022f0:	e6ee      	b.n	4020d0 <_malloc_r+0x2d0>
  4022f2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4022f6:	d804      	bhi.n	402302 <_malloc_r+0x502>
  4022f8:	0bda      	lsrs	r2, r3, #15
  4022fa:	3277      	adds	r2, #119	; 0x77
  4022fc:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  402300:	e72d      	b.n	40215e <_malloc_r+0x35e>
  402302:	f240 5154 	movw	r1, #1364	; 0x554
  402306:	428a      	cmp	r2, r1
  402308:	d804      	bhi.n	402314 <_malloc_r+0x514>
  40230a:	0c9a      	lsrs	r2, r3, #18
  40230c:	327c      	adds	r2, #124	; 0x7c
  40230e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  402312:	e724      	b.n	40215e <_malloc_r+0x35e>
  402314:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
  402318:	227e      	movs	r2, #126	; 0x7e
  40231a:	e720      	b.n	40215e <_malloc_r+0x35e>
  40231c:	687b      	ldr	r3, [r7, #4]
  40231e:	e78b      	b.n	402238 <_malloc_r+0x438>
  402320:	20000434 	.word	0x20000434

00402324 <memchr>:
  402324:	0783      	lsls	r3, r0, #30
  402326:	b470      	push	{r4, r5, r6}
  402328:	b2c9      	uxtb	r1, r1
  40232a:	d040      	beq.n	4023ae <memchr+0x8a>
  40232c:	1e54      	subs	r4, r2, #1
  40232e:	2a00      	cmp	r2, #0
  402330:	d03f      	beq.n	4023b2 <memchr+0x8e>
  402332:	7803      	ldrb	r3, [r0, #0]
  402334:	428b      	cmp	r3, r1
  402336:	bf18      	it	ne
  402338:	1c43      	addne	r3, r0, #1
  40233a:	d106      	bne.n	40234a <memchr+0x26>
  40233c:	e01d      	b.n	40237a <memchr+0x56>
  40233e:	b1f4      	cbz	r4, 40237e <memchr+0x5a>
  402340:	7802      	ldrb	r2, [r0, #0]
  402342:	428a      	cmp	r2, r1
  402344:	f104 34ff 	add.w	r4, r4, #4294967295
  402348:	d017      	beq.n	40237a <memchr+0x56>
  40234a:	f013 0f03 	tst.w	r3, #3
  40234e:	4618      	mov	r0, r3
  402350:	f103 0301 	add.w	r3, r3, #1
  402354:	d1f3      	bne.n	40233e <memchr+0x1a>
  402356:	2c03      	cmp	r4, #3
  402358:	d814      	bhi.n	402384 <memchr+0x60>
  40235a:	b184      	cbz	r4, 40237e <memchr+0x5a>
  40235c:	7803      	ldrb	r3, [r0, #0]
  40235e:	428b      	cmp	r3, r1
  402360:	d00b      	beq.n	40237a <memchr+0x56>
  402362:	1905      	adds	r5, r0, r4
  402364:	1c43      	adds	r3, r0, #1
  402366:	e002      	b.n	40236e <memchr+0x4a>
  402368:	7802      	ldrb	r2, [r0, #0]
  40236a:	428a      	cmp	r2, r1
  40236c:	d005      	beq.n	40237a <memchr+0x56>
  40236e:	42ab      	cmp	r3, r5
  402370:	4618      	mov	r0, r3
  402372:	f103 0301 	add.w	r3, r3, #1
  402376:	d1f7      	bne.n	402368 <memchr+0x44>
  402378:	2000      	movs	r0, #0
  40237a:	bc70      	pop	{r4, r5, r6}
  40237c:	4770      	bx	lr
  40237e:	4620      	mov	r0, r4
  402380:	bc70      	pop	{r4, r5, r6}
  402382:	4770      	bx	lr
  402384:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  402388:	4602      	mov	r2, r0
  40238a:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  40238e:	4610      	mov	r0, r2
  402390:	3204      	adds	r2, #4
  402392:	6803      	ldr	r3, [r0, #0]
  402394:	4073      	eors	r3, r6
  402396:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  40239a:	ea25 0303 	bic.w	r3, r5, r3
  40239e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  4023a2:	d1da      	bne.n	40235a <memchr+0x36>
  4023a4:	3c04      	subs	r4, #4
  4023a6:	2c03      	cmp	r4, #3
  4023a8:	4610      	mov	r0, r2
  4023aa:	d8f0      	bhi.n	40238e <memchr+0x6a>
  4023ac:	e7d5      	b.n	40235a <memchr+0x36>
  4023ae:	4614      	mov	r4, r2
  4023b0:	e7d1      	b.n	402356 <memchr+0x32>
  4023b2:	4610      	mov	r0, r2
  4023b4:	e7e1      	b.n	40237a <memchr+0x56>
  4023b6:	bf00      	nop

004023b8 <memcpy>:
  4023b8:	4684      	mov	ip, r0
  4023ba:	ea41 0300 	orr.w	r3, r1, r0
  4023be:	f013 0303 	ands.w	r3, r3, #3
  4023c2:	d16d      	bne.n	4024a0 <memcpy+0xe8>
  4023c4:	3a40      	subs	r2, #64	; 0x40
  4023c6:	d341      	bcc.n	40244c <memcpy+0x94>
  4023c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4023cc:	f840 3b04 	str.w	r3, [r0], #4
  4023d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4023d4:	f840 3b04 	str.w	r3, [r0], #4
  4023d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4023dc:	f840 3b04 	str.w	r3, [r0], #4
  4023e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4023e4:	f840 3b04 	str.w	r3, [r0], #4
  4023e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4023ec:	f840 3b04 	str.w	r3, [r0], #4
  4023f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4023f4:	f840 3b04 	str.w	r3, [r0], #4
  4023f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4023fc:	f840 3b04 	str.w	r3, [r0], #4
  402400:	f851 3b04 	ldr.w	r3, [r1], #4
  402404:	f840 3b04 	str.w	r3, [r0], #4
  402408:	f851 3b04 	ldr.w	r3, [r1], #4
  40240c:	f840 3b04 	str.w	r3, [r0], #4
  402410:	f851 3b04 	ldr.w	r3, [r1], #4
  402414:	f840 3b04 	str.w	r3, [r0], #4
  402418:	f851 3b04 	ldr.w	r3, [r1], #4
  40241c:	f840 3b04 	str.w	r3, [r0], #4
  402420:	f851 3b04 	ldr.w	r3, [r1], #4
  402424:	f840 3b04 	str.w	r3, [r0], #4
  402428:	f851 3b04 	ldr.w	r3, [r1], #4
  40242c:	f840 3b04 	str.w	r3, [r0], #4
  402430:	f851 3b04 	ldr.w	r3, [r1], #4
  402434:	f840 3b04 	str.w	r3, [r0], #4
  402438:	f851 3b04 	ldr.w	r3, [r1], #4
  40243c:	f840 3b04 	str.w	r3, [r0], #4
  402440:	f851 3b04 	ldr.w	r3, [r1], #4
  402444:	f840 3b04 	str.w	r3, [r0], #4
  402448:	3a40      	subs	r2, #64	; 0x40
  40244a:	d2bd      	bcs.n	4023c8 <memcpy+0x10>
  40244c:	3230      	adds	r2, #48	; 0x30
  40244e:	d311      	bcc.n	402474 <memcpy+0xbc>
  402450:	f851 3b04 	ldr.w	r3, [r1], #4
  402454:	f840 3b04 	str.w	r3, [r0], #4
  402458:	f851 3b04 	ldr.w	r3, [r1], #4
  40245c:	f840 3b04 	str.w	r3, [r0], #4
  402460:	f851 3b04 	ldr.w	r3, [r1], #4
  402464:	f840 3b04 	str.w	r3, [r0], #4
  402468:	f851 3b04 	ldr.w	r3, [r1], #4
  40246c:	f840 3b04 	str.w	r3, [r0], #4
  402470:	3a10      	subs	r2, #16
  402472:	d2ed      	bcs.n	402450 <memcpy+0x98>
  402474:	320c      	adds	r2, #12
  402476:	d305      	bcc.n	402484 <memcpy+0xcc>
  402478:	f851 3b04 	ldr.w	r3, [r1], #4
  40247c:	f840 3b04 	str.w	r3, [r0], #4
  402480:	3a04      	subs	r2, #4
  402482:	d2f9      	bcs.n	402478 <memcpy+0xc0>
  402484:	3204      	adds	r2, #4
  402486:	d008      	beq.n	40249a <memcpy+0xe2>
  402488:	07d2      	lsls	r2, r2, #31
  40248a:	bf1c      	itt	ne
  40248c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402490:	f800 3b01 	strbne.w	r3, [r0], #1
  402494:	d301      	bcc.n	40249a <memcpy+0xe2>
  402496:	880b      	ldrh	r3, [r1, #0]
  402498:	8003      	strh	r3, [r0, #0]
  40249a:	4660      	mov	r0, ip
  40249c:	4770      	bx	lr
  40249e:	bf00      	nop
  4024a0:	2a08      	cmp	r2, #8
  4024a2:	d313      	bcc.n	4024cc <memcpy+0x114>
  4024a4:	078b      	lsls	r3, r1, #30
  4024a6:	d08d      	beq.n	4023c4 <memcpy+0xc>
  4024a8:	f010 0303 	ands.w	r3, r0, #3
  4024ac:	d08a      	beq.n	4023c4 <memcpy+0xc>
  4024ae:	f1c3 0304 	rsb	r3, r3, #4
  4024b2:	1ad2      	subs	r2, r2, r3
  4024b4:	07db      	lsls	r3, r3, #31
  4024b6:	bf1c      	itt	ne
  4024b8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4024bc:	f800 3b01 	strbne.w	r3, [r0], #1
  4024c0:	d380      	bcc.n	4023c4 <memcpy+0xc>
  4024c2:	f831 3b02 	ldrh.w	r3, [r1], #2
  4024c6:	f820 3b02 	strh.w	r3, [r0], #2
  4024ca:	e77b      	b.n	4023c4 <memcpy+0xc>
  4024cc:	3a04      	subs	r2, #4
  4024ce:	d3d9      	bcc.n	402484 <memcpy+0xcc>
  4024d0:	3a01      	subs	r2, #1
  4024d2:	f811 3b01 	ldrb.w	r3, [r1], #1
  4024d6:	f800 3b01 	strb.w	r3, [r0], #1
  4024da:	d2f9      	bcs.n	4024d0 <memcpy+0x118>
  4024dc:	780b      	ldrb	r3, [r1, #0]
  4024de:	7003      	strb	r3, [r0, #0]
  4024e0:	784b      	ldrb	r3, [r1, #1]
  4024e2:	7043      	strb	r3, [r0, #1]
  4024e4:	788b      	ldrb	r3, [r1, #2]
  4024e6:	7083      	strb	r3, [r0, #2]
  4024e8:	4660      	mov	r0, ip
  4024ea:	4770      	bx	lr

004024ec <memmove>:
  4024ec:	4288      	cmp	r0, r1
  4024ee:	b5f0      	push	{r4, r5, r6, r7, lr}
  4024f0:	d90d      	bls.n	40250e <memmove+0x22>
  4024f2:	188b      	adds	r3, r1, r2
  4024f4:	4298      	cmp	r0, r3
  4024f6:	d20a      	bcs.n	40250e <memmove+0x22>
  4024f8:	1881      	adds	r1, r0, r2
  4024fa:	2a00      	cmp	r2, #0
  4024fc:	d054      	beq.n	4025a8 <memmove+0xbc>
  4024fe:	1a9a      	subs	r2, r3, r2
  402500:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  402504:	f801 4d01 	strb.w	r4, [r1, #-1]!
  402508:	4293      	cmp	r3, r2
  40250a:	d1f9      	bne.n	402500 <memmove+0x14>
  40250c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40250e:	2a0f      	cmp	r2, #15
  402510:	d948      	bls.n	4025a4 <memmove+0xb8>
  402512:	ea40 0301 	orr.w	r3, r0, r1
  402516:	079b      	lsls	r3, r3, #30
  402518:	d147      	bne.n	4025aa <memmove+0xbe>
  40251a:	f100 0410 	add.w	r4, r0, #16
  40251e:	f101 0310 	add.w	r3, r1, #16
  402522:	4615      	mov	r5, r2
  402524:	f853 6c10 	ldr.w	r6, [r3, #-16]
  402528:	f844 6c10 	str.w	r6, [r4, #-16]
  40252c:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  402530:	f844 6c0c 	str.w	r6, [r4, #-12]
  402534:	f853 6c08 	ldr.w	r6, [r3, #-8]
  402538:	f844 6c08 	str.w	r6, [r4, #-8]
  40253c:	3d10      	subs	r5, #16
  40253e:	f853 6c04 	ldr.w	r6, [r3, #-4]
  402542:	f844 6c04 	str.w	r6, [r4, #-4]
  402546:	2d0f      	cmp	r5, #15
  402548:	f103 0310 	add.w	r3, r3, #16
  40254c:	f104 0410 	add.w	r4, r4, #16
  402550:	d8e8      	bhi.n	402524 <memmove+0x38>
  402552:	f1a2 0310 	sub.w	r3, r2, #16
  402556:	f023 030f 	bic.w	r3, r3, #15
  40255a:	f002 0e0f 	and.w	lr, r2, #15
  40255e:	3310      	adds	r3, #16
  402560:	f1be 0f03 	cmp.w	lr, #3
  402564:	4419      	add	r1, r3
  402566:	4403      	add	r3, r0
  402568:	d921      	bls.n	4025ae <memmove+0xc2>
  40256a:	1f1e      	subs	r6, r3, #4
  40256c:	460d      	mov	r5, r1
  40256e:	4674      	mov	r4, lr
  402570:	3c04      	subs	r4, #4
  402572:	f855 7b04 	ldr.w	r7, [r5], #4
  402576:	f846 7f04 	str.w	r7, [r6, #4]!
  40257a:	2c03      	cmp	r4, #3
  40257c:	d8f8      	bhi.n	402570 <memmove+0x84>
  40257e:	f1ae 0404 	sub.w	r4, lr, #4
  402582:	f024 0403 	bic.w	r4, r4, #3
  402586:	3404      	adds	r4, #4
  402588:	4423      	add	r3, r4
  40258a:	4421      	add	r1, r4
  40258c:	f002 0203 	and.w	r2, r2, #3
  402590:	b152      	cbz	r2, 4025a8 <memmove+0xbc>
  402592:	3b01      	subs	r3, #1
  402594:	440a      	add	r2, r1
  402596:	f811 4b01 	ldrb.w	r4, [r1], #1
  40259a:	f803 4f01 	strb.w	r4, [r3, #1]!
  40259e:	4291      	cmp	r1, r2
  4025a0:	d1f9      	bne.n	402596 <memmove+0xaa>
  4025a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4025a4:	4603      	mov	r3, r0
  4025a6:	e7f3      	b.n	402590 <memmove+0xa4>
  4025a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4025aa:	4603      	mov	r3, r0
  4025ac:	e7f1      	b.n	402592 <memmove+0xa6>
  4025ae:	4672      	mov	r2, lr
  4025b0:	e7ee      	b.n	402590 <memmove+0xa4>
  4025b2:	bf00      	nop

004025b4 <__malloc_lock>:
  4025b4:	4770      	bx	lr
  4025b6:	bf00      	nop

004025b8 <__malloc_unlock>:
  4025b8:	4770      	bx	lr
  4025ba:	bf00      	nop

004025bc <_realloc_r>:
  4025bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4025c0:	4617      	mov	r7, r2
  4025c2:	b083      	sub	sp, #12
  4025c4:	460e      	mov	r6, r1
  4025c6:	2900      	cmp	r1, #0
  4025c8:	f000 80e7 	beq.w	40279a <_realloc_r+0x1de>
  4025cc:	4681      	mov	r9, r0
  4025ce:	f107 050b 	add.w	r5, r7, #11
  4025d2:	f7ff ffef 	bl	4025b4 <__malloc_lock>
  4025d6:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4025da:	2d16      	cmp	r5, #22
  4025dc:	f023 0403 	bic.w	r4, r3, #3
  4025e0:	f1a6 0808 	sub.w	r8, r6, #8
  4025e4:	d84c      	bhi.n	402680 <_realloc_r+0xc4>
  4025e6:	2210      	movs	r2, #16
  4025e8:	4615      	mov	r5, r2
  4025ea:	42af      	cmp	r7, r5
  4025ec:	d84d      	bhi.n	40268a <_realloc_r+0xce>
  4025ee:	4294      	cmp	r4, r2
  4025f0:	f280 8084 	bge.w	4026fc <_realloc_r+0x140>
  4025f4:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 4029a4 <_realloc_r+0x3e8>
  4025f8:	f8db 0008 	ldr.w	r0, [fp, #8]
  4025fc:	eb08 0104 	add.w	r1, r8, r4
  402600:	4288      	cmp	r0, r1
  402602:	f000 80d6 	beq.w	4027b2 <_realloc_r+0x1f6>
  402606:	6848      	ldr	r0, [r1, #4]
  402608:	f020 0e01 	bic.w	lr, r0, #1
  40260c:	448e      	add	lr, r1
  40260e:	f8de e004 	ldr.w	lr, [lr, #4]
  402612:	f01e 0f01 	tst.w	lr, #1
  402616:	d13f      	bne.n	402698 <_realloc_r+0xdc>
  402618:	f020 0003 	bic.w	r0, r0, #3
  40261c:	4420      	add	r0, r4
  40261e:	4290      	cmp	r0, r2
  402620:	f280 80c1 	bge.w	4027a6 <_realloc_r+0x1ea>
  402624:	07db      	lsls	r3, r3, #31
  402626:	f100 808f 	bmi.w	402748 <_realloc_r+0x18c>
  40262a:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40262e:	ebc3 0a08 	rsb	sl, r3, r8
  402632:	f8da 3004 	ldr.w	r3, [sl, #4]
  402636:	f023 0303 	bic.w	r3, r3, #3
  40263a:	eb00 0e03 	add.w	lr, r0, r3
  40263e:	4596      	cmp	lr, r2
  402640:	db34      	blt.n	4026ac <_realloc_r+0xf0>
  402642:	68cb      	ldr	r3, [r1, #12]
  402644:	688a      	ldr	r2, [r1, #8]
  402646:	4657      	mov	r7, sl
  402648:	60d3      	str	r3, [r2, #12]
  40264a:	609a      	str	r2, [r3, #8]
  40264c:	f857 1f08 	ldr.w	r1, [r7, #8]!
  402650:	f8da 300c 	ldr.w	r3, [sl, #12]
  402654:	60cb      	str	r3, [r1, #12]
  402656:	1f22      	subs	r2, r4, #4
  402658:	2a24      	cmp	r2, #36	; 0x24
  40265a:	6099      	str	r1, [r3, #8]
  40265c:	f200 8136 	bhi.w	4028cc <_realloc_r+0x310>
  402660:	2a13      	cmp	r2, #19
  402662:	f240 80fd 	bls.w	402860 <_realloc_r+0x2a4>
  402666:	6833      	ldr	r3, [r6, #0]
  402668:	f8ca 3008 	str.w	r3, [sl, #8]
  40266c:	6873      	ldr	r3, [r6, #4]
  40266e:	f8ca 300c 	str.w	r3, [sl, #12]
  402672:	2a1b      	cmp	r2, #27
  402674:	f200 8140 	bhi.w	4028f8 <_realloc_r+0x33c>
  402678:	3608      	adds	r6, #8
  40267a:	f10a 0310 	add.w	r3, sl, #16
  40267e:	e0f0      	b.n	402862 <_realloc_r+0x2a6>
  402680:	f025 0507 	bic.w	r5, r5, #7
  402684:	2d00      	cmp	r5, #0
  402686:	462a      	mov	r2, r5
  402688:	daaf      	bge.n	4025ea <_realloc_r+0x2e>
  40268a:	230c      	movs	r3, #12
  40268c:	2000      	movs	r0, #0
  40268e:	f8c9 3000 	str.w	r3, [r9]
  402692:	b003      	add	sp, #12
  402694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402698:	07d9      	lsls	r1, r3, #31
  40269a:	d455      	bmi.n	402748 <_realloc_r+0x18c>
  40269c:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4026a0:	ebc3 0a08 	rsb	sl, r3, r8
  4026a4:	f8da 3004 	ldr.w	r3, [sl, #4]
  4026a8:	f023 0303 	bic.w	r3, r3, #3
  4026ac:	4423      	add	r3, r4
  4026ae:	4293      	cmp	r3, r2
  4026b0:	db4a      	blt.n	402748 <_realloc_r+0x18c>
  4026b2:	4657      	mov	r7, sl
  4026b4:	f8da 100c 	ldr.w	r1, [sl, #12]
  4026b8:	f857 0f08 	ldr.w	r0, [r7, #8]!
  4026bc:	1f22      	subs	r2, r4, #4
  4026be:	2a24      	cmp	r2, #36	; 0x24
  4026c0:	60c1      	str	r1, [r0, #12]
  4026c2:	6088      	str	r0, [r1, #8]
  4026c4:	f200 810e 	bhi.w	4028e4 <_realloc_r+0x328>
  4026c8:	2a13      	cmp	r2, #19
  4026ca:	f240 8109 	bls.w	4028e0 <_realloc_r+0x324>
  4026ce:	6831      	ldr	r1, [r6, #0]
  4026d0:	f8ca 1008 	str.w	r1, [sl, #8]
  4026d4:	6871      	ldr	r1, [r6, #4]
  4026d6:	f8ca 100c 	str.w	r1, [sl, #12]
  4026da:	2a1b      	cmp	r2, #27
  4026dc:	f200 8121 	bhi.w	402922 <_realloc_r+0x366>
  4026e0:	3608      	adds	r6, #8
  4026e2:	f10a 0210 	add.w	r2, sl, #16
  4026e6:	6831      	ldr	r1, [r6, #0]
  4026e8:	6011      	str	r1, [r2, #0]
  4026ea:	6871      	ldr	r1, [r6, #4]
  4026ec:	6051      	str	r1, [r2, #4]
  4026ee:	68b1      	ldr	r1, [r6, #8]
  4026f0:	6091      	str	r1, [r2, #8]
  4026f2:	461c      	mov	r4, r3
  4026f4:	f8da 3004 	ldr.w	r3, [sl, #4]
  4026f8:	463e      	mov	r6, r7
  4026fa:	46d0      	mov	r8, sl
  4026fc:	1b62      	subs	r2, r4, r5
  4026fe:	2a0f      	cmp	r2, #15
  402700:	f003 0301 	and.w	r3, r3, #1
  402704:	d80e      	bhi.n	402724 <_realloc_r+0x168>
  402706:	4323      	orrs	r3, r4
  402708:	4444      	add	r4, r8
  40270a:	f8c8 3004 	str.w	r3, [r8, #4]
  40270e:	6863      	ldr	r3, [r4, #4]
  402710:	f043 0301 	orr.w	r3, r3, #1
  402714:	6063      	str	r3, [r4, #4]
  402716:	4648      	mov	r0, r9
  402718:	f7ff ff4e 	bl	4025b8 <__malloc_unlock>
  40271c:	4630      	mov	r0, r6
  40271e:	b003      	add	sp, #12
  402720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402724:	eb08 0105 	add.w	r1, r8, r5
  402728:	431d      	orrs	r5, r3
  40272a:	f042 0301 	orr.w	r3, r2, #1
  40272e:	440a      	add	r2, r1
  402730:	f8c8 5004 	str.w	r5, [r8, #4]
  402734:	604b      	str	r3, [r1, #4]
  402736:	6853      	ldr	r3, [r2, #4]
  402738:	f043 0301 	orr.w	r3, r3, #1
  40273c:	3108      	adds	r1, #8
  40273e:	6053      	str	r3, [r2, #4]
  402740:	4648      	mov	r0, r9
  402742:	f7ff f857 	bl	4017f4 <_free_r>
  402746:	e7e6      	b.n	402716 <_realloc_r+0x15a>
  402748:	4639      	mov	r1, r7
  40274a:	4648      	mov	r0, r9
  40274c:	f7ff fb58 	bl	401e00 <_malloc_r>
  402750:	4607      	mov	r7, r0
  402752:	b1d8      	cbz	r0, 40278c <_realloc_r+0x1d0>
  402754:	f856 3c04 	ldr.w	r3, [r6, #-4]
  402758:	f023 0201 	bic.w	r2, r3, #1
  40275c:	4442      	add	r2, r8
  40275e:	f1a0 0108 	sub.w	r1, r0, #8
  402762:	4291      	cmp	r1, r2
  402764:	f000 80ac 	beq.w	4028c0 <_realloc_r+0x304>
  402768:	1f22      	subs	r2, r4, #4
  40276a:	2a24      	cmp	r2, #36	; 0x24
  40276c:	f200 8099 	bhi.w	4028a2 <_realloc_r+0x2e6>
  402770:	2a13      	cmp	r2, #19
  402772:	d86a      	bhi.n	40284a <_realloc_r+0x28e>
  402774:	4603      	mov	r3, r0
  402776:	4632      	mov	r2, r6
  402778:	6811      	ldr	r1, [r2, #0]
  40277a:	6019      	str	r1, [r3, #0]
  40277c:	6851      	ldr	r1, [r2, #4]
  40277e:	6059      	str	r1, [r3, #4]
  402780:	6892      	ldr	r2, [r2, #8]
  402782:	609a      	str	r2, [r3, #8]
  402784:	4631      	mov	r1, r6
  402786:	4648      	mov	r0, r9
  402788:	f7ff f834 	bl	4017f4 <_free_r>
  40278c:	4648      	mov	r0, r9
  40278e:	f7ff ff13 	bl	4025b8 <__malloc_unlock>
  402792:	4638      	mov	r0, r7
  402794:	b003      	add	sp, #12
  402796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40279a:	4611      	mov	r1, r2
  40279c:	b003      	add	sp, #12
  40279e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4027a2:	f7ff bb2d 	b.w	401e00 <_malloc_r>
  4027a6:	68ca      	ldr	r2, [r1, #12]
  4027a8:	6889      	ldr	r1, [r1, #8]
  4027aa:	4604      	mov	r4, r0
  4027ac:	60ca      	str	r2, [r1, #12]
  4027ae:	6091      	str	r1, [r2, #8]
  4027b0:	e7a4      	b.n	4026fc <_realloc_r+0x140>
  4027b2:	6841      	ldr	r1, [r0, #4]
  4027b4:	f021 0103 	bic.w	r1, r1, #3
  4027b8:	4421      	add	r1, r4
  4027ba:	f105 0010 	add.w	r0, r5, #16
  4027be:	4281      	cmp	r1, r0
  4027c0:	da5b      	bge.n	40287a <_realloc_r+0x2be>
  4027c2:	07db      	lsls	r3, r3, #31
  4027c4:	d4c0      	bmi.n	402748 <_realloc_r+0x18c>
  4027c6:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4027ca:	ebc3 0a08 	rsb	sl, r3, r8
  4027ce:	f8da 3004 	ldr.w	r3, [sl, #4]
  4027d2:	f023 0303 	bic.w	r3, r3, #3
  4027d6:	eb01 0c03 	add.w	ip, r1, r3
  4027da:	4560      	cmp	r0, ip
  4027dc:	f73f af66 	bgt.w	4026ac <_realloc_r+0xf0>
  4027e0:	4657      	mov	r7, sl
  4027e2:	f8da 300c 	ldr.w	r3, [sl, #12]
  4027e6:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4027ea:	1f22      	subs	r2, r4, #4
  4027ec:	2a24      	cmp	r2, #36	; 0x24
  4027ee:	60cb      	str	r3, [r1, #12]
  4027f0:	6099      	str	r1, [r3, #8]
  4027f2:	f200 80b8 	bhi.w	402966 <_realloc_r+0x3aa>
  4027f6:	2a13      	cmp	r2, #19
  4027f8:	f240 80a9 	bls.w	40294e <_realloc_r+0x392>
  4027fc:	6833      	ldr	r3, [r6, #0]
  4027fe:	f8ca 3008 	str.w	r3, [sl, #8]
  402802:	6873      	ldr	r3, [r6, #4]
  402804:	f8ca 300c 	str.w	r3, [sl, #12]
  402808:	2a1b      	cmp	r2, #27
  40280a:	f200 80b5 	bhi.w	402978 <_realloc_r+0x3bc>
  40280e:	3608      	adds	r6, #8
  402810:	f10a 0310 	add.w	r3, sl, #16
  402814:	6832      	ldr	r2, [r6, #0]
  402816:	601a      	str	r2, [r3, #0]
  402818:	6872      	ldr	r2, [r6, #4]
  40281a:	605a      	str	r2, [r3, #4]
  40281c:	68b2      	ldr	r2, [r6, #8]
  40281e:	609a      	str	r2, [r3, #8]
  402820:	eb0a 0205 	add.w	r2, sl, r5
  402824:	ebc5 030c 	rsb	r3, r5, ip
  402828:	f043 0301 	orr.w	r3, r3, #1
  40282c:	f8cb 2008 	str.w	r2, [fp, #8]
  402830:	6053      	str	r3, [r2, #4]
  402832:	f8da 3004 	ldr.w	r3, [sl, #4]
  402836:	f003 0301 	and.w	r3, r3, #1
  40283a:	431d      	orrs	r5, r3
  40283c:	4648      	mov	r0, r9
  40283e:	f8ca 5004 	str.w	r5, [sl, #4]
  402842:	f7ff feb9 	bl	4025b8 <__malloc_unlock>
  402846:	4638      	mov	r0, r7
  402848:	e769      	b.n	40271e <_realloc_r+0x162>
  40284a:	6833      	ldr	r3, [r6, #0]
  40284c:	6003      	str	r3, [r0, #0]
  40284e:	6873      	ldr	r3, [r6, #4]
  402850:	6043      	str	r3, [r0, #4]
  402852:	2a1b      	cmp	r2, #27
  402854:	d829      	bhi.n	4028aa <_realloc_r+0x2ee>
  402856:	f100 0308 	add.w	r3, r0, #8
  40285a:	f106 0208 	add.w	r2, r6, #8
  40285e:	e78b      	b.n	402778 <_realloc_r+0x1bc>
  402860:	463b      	mov	r3, r7
  402862:	6832      	ldr	r2, [r6, #0]
  402864:	601a      	str	r2, [r3, #0]
  402866:	6872      	ldr	r2, [r6, #4]
  402868:	605a      	str	r2, [r3, #4]
  40286a:	68b2      	ldr	r2, [r6, #8]
  40286c:	609a      	str	r2, [r3, #8]
  40286e:	463e      	mov	r6, r7
  402870:	4674      	mov	r4, lr
  402872:	f8da 3004 	ldr.w	r3, [sl, #4]
  402876:	46d0      	mov	r8, sl
  402878:	e740      	b.n	4026fc <_realloc_r+0x140>
  40287a:	eb08 0205 	add.w	r2, r8, r5
  40287e:	1b4b      	subs	r3, r1, r5
  402880:	f043 0301 	orr.w	r3, r3, #1
  402884:	f8cb 2008 	str.w	r2, [fp, #8]
  402888:	6053      	str	r3, [r2, #4]
  40288a:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40288e:	f003 0301 	and.w	r3, r3, #1
  402892:	431d      	orrs	r5, r3
  402894:	4648      	mov	r0, r9
  402896:	f846 5c04 	str.w	r5, [r6, #-4]
  40289a:	f7ff fe8d 	bl	4025b8 <__malloc_unlock>
  40289e:	4630      	mov	r0, r6
  4028a0:	e73d      	b.n	40271e <_realloc_r+0x162>
  4028a2:	4631      	mov	r1, r6
  4028a4:	f7ff fe22 	bl	4024ec <memmove>
  4028a8:	e76c      	b.n	402784 <_realloc_r+0x1c8>
  4028aa:	68b3      	ldr	r3, [r6, #8]
  4028ac:	6083      	str	r3, [r0, #8]
  4028ae:	68f3      	ldr	r3, [r6, #12]
  4028b0:	60c3      	str	r3, [r0, #12]
  4028b2:	2a24      	cmp	r2, #36	; 0x24
  4028b4:	d02c      	beq.n	402910 <_realloc_r+0x354>
  4028b6:	f100 0310 	add.w	r3, r0, #16
  4028ba:	f106 0210 	add.w	r2, r6, #16
  4028be:	e75b      	b.n	402778 <_realloc_r+0x1bc>
  4028c0:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4028c4:	f022 0203 	bic.w	r2, r2, #3
  4028c8:	4414      	add	r4, r2
  4028ca:	e717      	b.n	4026fc <_realloc_r+0x140>
  4028cc:	4631      	mov	r1, r6
  4028ce:	4638      	mov	r0, r7
  4028d0:	4674      	mov	r4, lr
  4028d2:	463e      	mov	r6, r7
  4028d4:	f7ff fe0a 	bl	4024ec <memmove>
  4028d8:	46d0      	mov	r8, sl
  4028da:	f8da 3004 	ldr.w	r3, [sl, #4]
  4028de:	e70d      	b.n	4026fc <_realloc_r+0x140>
  4028e0:	463a      	mov	r2, r7
  4028e2:	e700      	b.n	4026e6 <_realloc_r+0x12a>
  4028e4:	4631      	mov	r1, r6
  4028e6:	4638      	mov	r0, r7
  4028e8:	461c      	mov	r4, r3
  4028ea:	463e      	mov	r6, r7
  4028ec:	f7ff fdfe 	bl	4024ec <memmove>
  4028f0:	46d0      	mov	r8, sl
  4028f2:	f8da 3004 	ldr.w	r3, [sl, #4]
  4028f6:	e701      	b.n	4026fc <_realloc_r+0x140>
  4028f8:	68b3      	ldr	r3, [r6, #8]
  4028fa:	f8ca 3010 	str.w	r3, [sl, #16]
  4028fe:	68f3      	ldr	r3, [r6, #12]
  402900:	f8ca 3014 	str.w	r3, [sl, #20]
  402904:	2a24      	cmp	r2, #36	; 0x24
  402906:	d018      	beq.n	40293a <_realloc_r+0x37e>
  402908:	3610      	adds	r6, #16
  40290a:	f10a 0318 	add.w	r3, sl, #24
  40290e:	e7a8      	b.n	402862 <_realloc_r+0x2a6>
  402910:	6933      	ldr	r3, [r6, #16]
  402912:	6103      	str	r3, [r0, #16]
  402914:	6973      	ldr	r3, [r6, #20]
  402916:	6143      	str	r3, [r0, #20]
  402918:	f106 0218 	add.w	r2, r6, #24
  40291c:	f100 0318 	add.w	r3, r0, #24
  402920:	e72a      	b.n	402778 <_realloc_r+0x1bc>
  402922:	68b1      	ldr	r1, [r6, #8]
  402924:	f8ca 1010 	str.w	r1, [sl, #16]
  402928:	68f1      	ldr	r1, [r6, #12]
  40292a:	f8ca 1014 	str.w	r1, [sl, #20]
  40292e:	2a24      	cmp	r2, #36	; 0x24
  402930:	d00f      	beq.n	402952 <_realloc_r+0x396>
  402932:	3610      	adds	r6, #16
  402934:	f10a 0218 	add.w	r2, sl, #24
  402938:	e6d5      	b.n	4026e6 <_realloc_r+0x12a>
  40293a:	6933      	ldr	r3, [r6, #16]
  40293c:	f8ca 3018 	str.w	r3, [sl, #24]
  402940:	6973      	ldr	r3, [r6, #20]
  402942:	f8ca 301c 	str.w	r3, [sl, #28]
  402946:	3618      	adds	r6, #24
  402948:	f10a 0320 	add.w	r3, sl, #32
  40294c:	e789      	b.n	402862 <_realloc_r+0x2a6>
  40294e:	463b      	mov	r3, r7
  402950:	e760      	b.n	402814 <_realloc_r+0x258>
  402952:	6932      	ldr	r2, [r6, #16]
  402954:	f8ca 2018 	str.w	r2, [sl, #24]
  402958:	6972      	ldr	r2, [r6, #20]
  40295a:	f8ca 201c 	str.w	r2, [sl, #28]
  40295e:	3618      	adds	r6, #24
  402960:	f10a 0220 	add.w	r2, sl, #32
  402964:	e6bf      	b.n	4026e6 <_realloc_r+0x12a>
  402966:	4631      	mov	r1, r6
  402968:	4638      	mov	r0, r7
  40296a:	f8cd c004 	str.w	ip, [sp, #4]
  40296e:	f7ff fdbd 	bl	4024ec <memmove>
  402972:	f8dd c004 	ldr.w	ip, [sp, #4]
  402976:	e753      	b.n	402820 <_realloc_r+0x264>
  402978:	68b3      	ldr	r3, [r6, #8]
  40297a:	f8ca 3010 	str.w	r3, [sl, #16]
  40297e:	68f3      	ldr	r3, [r6, #12]
  402980:	f8ca 3014 	str.w	r3, [sl, #20]
  402984:	2a24      	cmp	r2, #36	; 0x24
  402986:	d003      	beq.n	402990 <_realloc_r+0x3d4>
  402988:	3610      	adds	r6, #16
  40298a:	f10a 0318 	add.w	r3, sl, #24
  40298e:	e741      	b.n	402814 <_realloc_r+0x258>
  402990:	6933      	ldr	r3, [r6, #16]
  402992:	f8ca 3018 	str.w	r3, [sl, #24]
  402996:	6973      	ldr	r3, [r6, #20]
  402998:	f8ca 301c 	str.w	r3, [sl, #28]
  40299c:	3618      	adds	r6, #24
  40299e:	f10a 0320 	add.w	r3, sl, #32
  4029a2:	e737      	b.n	402814 <_realloc_r+0x258>
  4029a4:	20000434 	.word	0x20000434

004029a8 <_sbrk_r>:
  4029a8:	b538      	push	{r3, r4, r5, lr}
  4029aa:	4c07      	ldr	r4, [pc, #28]	; (4029c8 <_sbrk_r+0x20>)
  4029ac:	2300      	movs	r3, #0
  4029ae:	4605      	mov	r5, r0
  4029b0:	4608      	mov	r0, r1
  4029b2:	6023      	str	r3, [r4, #0]
  4029b4:	f7fe f846 	bl	400a44 <_sbrk>
  4029b8:	1c43      	adds	r3, r0, #1
  4029ba:	d000      	beq.n	4029be <_sbrk_r+0x16>
  4029bc:	bd38      	pop	{r3, r4, r5, pc}
  4029be:	6823      	ldr	r3, [r4, #0]
  4029c0:	2b00      	cmp	r3, #0
  4029c2:	d0fb      	beq.n	4029bc <_sbrk_r+0x14>
  4029c4:	602b      	str	r3, [r5, #0]
  4029c6:	bd38      	pop	{r3, r4, r5, pc}
  4029c8:	2000091c 	.word	0x2000091c

004029cc <__sread>:
  4029cc:	b510      	push	{r4, lr}
  4029ce:	460c      	mov	r4, r1
  4029d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4029d4:	f000 f930 	bl	402c38 <_read_r>
  4029d8:	2800      	cmp	r0, #0
  4029da:	db03      	blt.n	4029e4 <__sread+0x18>
  4029dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4029de:	4403      	add	r3, r0
  4029e0:	6523      	str	r3, [r4, #80]	; 0x50
  4029e2:	bd10      	pop	{r4, pc}
  4029e4:	89a3      	ldrh	r3, [r4, #12]
  4029e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4029ea:	81a3      	strh	r3, [r4, #12]
  4029ec:	bd10      	pop	{r4, pc}
  4029ee:	bf00      	nop

004029f0 <__swrite>:
  4029f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4029f4:	4616      	mov	r6, r2
  4029f6:	898a      	ldrh	r2, [r1, #12]
  4029f8:	461d      	mov	r5, r3
  4029fa:	05d3      	lsls	r3, r2, #23
  4029fc:	460c      	mov	r4, r1
  4029fe:	4607      	mov	r7, r0
  402a00:	d506      	bpl.n	402a10 <__swrite+0x20>
  402a02:	2200      	movs	r2, #0
  402a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402a08:	2302      	movs	r3, #2
  402a0a:	f000 f901 	bl	402c10 <_lseek_r>
  402a0e:	89a2      	ldrh	r2, [r4, #12]
  402a10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402a14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  402a18:	81a2      	strh	r2, [r4, #12]
  402a1a:	4638      	mov	r0, r7
  402a1c:	4632      	mov	r2, r6
  402a1e:	462b      	mov	r3, r5
  402a20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402a24:	f000 b814 	b.w	402a50 <_write_r>

00402a28 <__sseek>:
  402a28:	b510      	push	{r4, lr}
  402a2a:	460c      	mov	r4, r1
  402a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402a30:	f000 f8ee 	bl	402c10 <_lseek_r>
  402a34:	89a3      	ldrh	r3, [r4, #12]
  402a36:	1c42      	adds	r2, r0, #1
  402a38:	bf0e      	itee	eq
  402a3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  402a3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  402a42:	6520      	strne	r0, [r4, #80]	; 0x50
  402a44:	81a3      	strh	r3, [r4, #12]
  402a46:	bd10      	pop	{r4, pc}

00402a48 <__sclose>:
  402a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402a4c:	f000 b866 	b.w	402b1c <_close_r>

00402a50 <_write_r>:
  402a50:	b570      	push	{r4, r5, r6, lr}
  402a52:	4c08      	ldr	r4, [pc, #32]	; (402a74 <_write_r+0x24>)
  402a54:	4606      	mov	r6, r0
  402a56:	2500      	movs	r5, #0
  402a58:	4608      	mov	r0, r1
  402a5a:	4611      	mov	r1, r2
  402a5c:	461a      	mov	r2, r3
  402a5e:	6025      	str	r5, [r4, #0]
  402a60:	f7fd fbb2 	bl	4001c8 <_write>
  402a64:	1c43      	adds	r3, r0, #1
  402a66:	d000      	beq.n	402a6a <_write_r+0x1a>
  402a68:	bd70      	pop	{r4, r5, r6, pc}
  402a6a:	6823      	ldr	r3, [r4, #0]
  402a6c:	2b00      	cmp	r3, #0
  402a6e:	d0fb      	beq.n	402a68 <_write_r+0x18>
  402a70:	6033      	str	r3, [r6, #0]
  402a72:	bd70      	pop	{r4, r5, r6, pc}
  402a74:	2000091c 	.word	0x2000091c

00402a78 <__register_exitproc>:
  402a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402a7c:	4c25      	ldr	r4, [pc, #148]	; (402b14 <__register_exitproc+0x9c>)
  402a7e:	6825      	ldr	r5, [r4, #0]
  402a80:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  402a84:	4606      	mov	r6, r0
  402a86:	4688      	mov	r8, r1
  402a88:	4692      	mov	sl, r2
  402a8a:	4699      	mov	r9, r3
  402a8c:	b3cc      	cbz	r4, 402b02 <__register_exitproc+0x8a>
  402a8e:	6860      	ldr	r0, [r4, #4]
  402a90:	281f      	cmp	r0, #31
  402a92:	dc18      	bgt.n	402ac6 <__register_exitproc+0x4e>
  402a94:	1c43      	adds	r3, r0, #1
  402a96:	b17e      	cbz	r6, 402ab8 <__register_exitproc+0x40>
  402a98:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  402a9c:	2101      	movs	r1, #1
  402a9e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  402aa2:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  402aa6:	fa01 f200 	lsl.w	r2, r1, r0
  402aaa:	4317      	orrs	r7, r2
  402aac:	2e02      	cmp	r6, #2
  402aae:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  402ab2:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  402ab6:	d01e      	beq.n	402af6 <__register_exitproc+0x7e>
  402ab8:	3002      	adds	r0, #2
  402aba:	6063      	str	r3, [r4, #4]
  402abc:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  402ac0:	2000      	movs	r0, #0
  402ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402ac6:	4b14      	ldr	r3, [pc, #80]	; (402b18 <__register_exitproc+0xa0>)
  402ac8:	b303      	cbz	r3, 402b0c <__register_exitproc+0x94>
  402aca:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402ace:	f7ff f98f 	bl	401df0 <malloc>
  402ad2:	4604      	mov	r4, r0
  402ad4:	b1d0      	cbz	r0, 402b0c <__register_exitproc+0x94>
  402ad6:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  402ada:	2700      	movs	r7, #0
  402adc:	e880 0088 	stmia.w	r0, {r3, r7}
  402ae0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402ae4:	4638      	mov	r0, r7
  402ae6:	2301      	movs	r3, #1
  402ae8:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  402aec:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  402af0:	2e00      	cmp	r6, #0
  402af2:	d0e1      	beq.n	402ab8 <__register_exitproc+0x40>
  402af4:	e7d0      	b.n	402a98 <__register_exitproc+0x20>
  402af6:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  402afa:	430a      	orrs	r2, r1
  402afc:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  402b00:	e7da      	b.n	402ab8 <__register_exitproc+0x40>
  402b02:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  402b06:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402b0a:	e7c0      	b.n	402a8e <__register_exitproc+0x16>
  402b0c:	f04f 30ff 	mov.w	r0, #4294967295
  402b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402b14:	00402d78 	.word	0x00402d78
  402b18:	00401df1 	.word	0x00401df1

00402b1c <_close_r>:
  402b1c:	b538      	push	{r3, r4, r5, lr}
  402b1e:	4c07      	ldr	r4, [pc, #28]	; (402b3c <_close_r+0x20>)
  402b20:	2300      	movs	r3, #0
  402b22:	4605      	mov	r5, r0
  402b24:	4608      	mov	r0, r1
  402b26:	6023      	str	r3, [r4, #0]
  402b28:	f7fd ffa6 	bl	400a78 <_close>
  402b2c:	1c43      	adds	r3, r0, #1
  402b2e:	d000      	beq.n	402b32 <_close_r+0x16>
  402b30:	bd38      	pop	{r3, r4, r5, pc}
  402b32:	6823      	ldr	r3, [r4, #0]
  402b34:	2b00      	cmp	r3, #0
  402b36:	d0fb      	beq.n	402b30 <_close_r+0x14>
  402b38:	602b      	str	r3, [r5, #0]
  402b3a:	bd38      	pop	{r3, r4, r5, pc}
  402b3c:	2000091c 	.word	0x2000091c

00402b40 <_fclose_r>:
  402b40:	2900      	cmp	r1, #0
  402b42:	d03d      	beq.n	402bc0 <_fclose_r+0x80>
  402b44:	b570      	push	{r4, r5, r6, lr}
  402b46:	4605      	mov	r5, r0
  402b48:	460c      	mov	r4, r1
  402b4a:	b108      	cbz	r0, 402b50 <_fclose_r+0x10>
  402b4c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402b4e:	b37b      	cbz	r3, 402bb0 <_fclose_r+0x70>
  402b50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402b54:	b90b      	cbnz	r3, 402b5a <_fclose_r+0x1a>
  402b56:	2000      	movs	r0, #0
  402b58:	bd70      	pop	{r4, r5, r6, pc}
  402b5a:	4628      	mov	r0, r5
  402b5c:	4621      	mov	r1, r4
  402b5e:	f7fe fc9d 	bl	40149c <__sflush_r>
  402b62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402b64:	4606      	mov	r6, r0
  402b66:	b133      	cbz	r3, 402b76 <_fclose_r+0x36>
  402b68:	4628      	mov	r0, r5
  402b6a:	69e1      	ldr	r1, [r4, #28]
  402b6c:	4798      	blx	r3
  402b6e:	2800      	cmp	r0, #0
  402b70:	bfb8      	it	lt
  402b72:	f04f 36ff 	movlt.w	r6, #4294967295
  402b76:	89a3      	ldrh	r3, [r4, #12]
  402b78:	061b      	lsls	r3, r3, #24
  402b7a:	d41c      	bmi.n	402bb6 <_fclose_r+0x76>
  402b7c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402b7e:	b141      	cbz	r1, 402b92 <_fclose_r+0x52>
  402b80:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402b84:	4299      	cmp	r1, r3
  402b86:	d002      	beq.n	402b8e <_fclose_r+0x4e>
  402b88:	4628      	mov	r0, r5
  402b8a:	f7fe fe33 	bl	4017f4 <_free_r>
  402b8e:	2300      	movs	r3, #0
  402b90:	6323      	str	r3, [r4, #48]	; 0x30
  402b92:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402b94:	b121      	cbz	r1, 402ba0 <_fclose_r+0x60>
  402b96:	4628      	mov	r0, r5
  402b98:	f7fe fe2c 	bl	4017f4 <_free_r>
  402b9c:	2300      	movs	r3, #0
  402b9e:	6463      	str	r3, [r4, #68]	; 0x44
  402ba0:	f7fe fdc0 	bl	401724 <__sfp_lock_acquire>
  402ba4:	2300      	movs	r3, #0
  402ba6:	81a3      	strh	r3, [r4, #12]
  402ba8:	f7fe fdbe 	bl	401728 <__sfp_lock_release>
  402bac:	4630      	mov	r0, r6
  402bae:	bd70      	pop	{r4, r5, r6, pc}
  402bb0:	f7fe fdb2 	bl	401718 <__sinit>
  402bb4:	e7cc      	b.n	402b50 <_fclose_r+0x10>
  402bb6:	4628      	mov	r0, r5
  402bb8:	6921      	ldr	r1, [r4, #16]
  402bba:	f7fe fe1b 	bl	4017f4 <_free_r>
  402bbe:	e7dd      	b.n	402b7c <_fclose_r+0x3c>
  402bc0:	2000      	movs	r0, #0
  402bc2:	4770      	bx	lr

00402bc4 <_fstat_r>:
  402bc4:	b538      	push	{r3, r4, r5, lr}
  402bc6:	4c08      	ldr	r4, [pc, #32]	; (402be8 <_fstat_r+0x24>)
  402bc8:	2300      	movs	r3, #0
  402bca:	4605      	mov	r5, r0
  402bcc:	4608      	mov	r0, r1
  402bce:	4611      	mov	r1, r2
  402bd0:	6023      	str	r3, [r4, #0]
  402bd2:	f7fd ff55 	bl	400a80 <_fstat>
  402bd6:	1c43      	adds	r3, r0, #1
  402bd8:	d000      	beq.n	402bdc <_fstat_r+0x18>
  402bda:	bd38      	pop	{r3, r4, r5, pc}
  402bdc:	6823      	ldr	r3, [r4, #0]
  402bde:	2b00      	cmp	r3, #0
  402be0:	d0fb      	beq.n	402bda <_fstat_r+0x16>
  402be2:	602b      	str	r3, [r5, #0]
  402be4:	bd38      	pop	{r3, r4, r5, pc}
  402be6:	bf00      	nop
  402be8:	2000091c 	.word	0x2000091c

00402bec <_isatty_r>:
  402bec:	b538      	push	{r3, r4, r5, lr}
  402bee:	4c07      	ldr	r4, [pc, #28]	; (402c0c <_isatty_r+0x20>)
  402bf0:	2300      	movs	r3, #0
  402bf2:	4605      	mov	r5, r0
  402bf4:	4608      	mov	r0, r1
  402bf6:	6023      	str	r3, [r4, #0]
  402bf8:	f7fd ff48 	bl	400a8c <_isatty>
  402bfc:	1c43      	adds	r3, r0, #1
  402bfe:	d000      	beq.n	402c02 <_isatty_r+0x16>
  402c00:	bd38      	pop	{r3, r4, r5, pc}
  402c02:	6823      	ldr	r3, [r4, #0]
  402c04:	2b00      	cmp	r3, #0
  402c06:	d0fb      	beq.n	402c00 <_isatty_r+0x14>
  402c08:	602b      	str	r3, [r5, #0]
  402c0a:	bd38      	pop	{r3, r4, r5, pc}
  402c0c:	2000091c 	.word	0x2000091c

00402c10 <_lseek_r>:
  402c10:	b570      	push	{r4, r5, r6, lr}
  402c12:	4c08      	ldr	r4, [pc, #32]	; (402c34 <_lseek_r+0x24>)
  402c14:	4606      	mov	r6, r0
  402c16:	2500      	movs	r5, #0
  402c18:	4608      	mov	r0, r1
  402c1a:	4611      	mov	r1, r2
  402c1c:	461a      	mov	r2, r3
  402c1e:	6025      	str	r5, [r4, #0]
  402c20:	f7fd ff36 	bl	400a90 <_lseek>
  402c24:	1c43      	adds	r3, r0, #1
  402c26:	d000      	beq.n	402c2a <_lseek_r+0x1a>
  402c28:	bd70      	pop	{r4, r5, r6, pc}
  402c2a:	6823      	ldr	r3, [r4, #0]
  402c2c:	2b00      	cmp	r3, #0
  402c2e:	d0fb      	beq.n	402c28 <_lseek_r+0x18>
  402c30:	6033      	str	r3, [r6, #0]
  402c32:	bd70      	pop	{r4, r5, r6, pc}
  402c34:	2000091c 	.word	0x2000091c

00402c38 <_read_r>:
  402c38:	b570      	push	{r4, r5, r6, lr}
  402c3a:	4c08      	ldr	r4, [pc, #32]	; (402c5c <_read_r+0x24>)
  402c3c:	4606      	mov	r6, r0
  402c3e:	2500      	movs	r5, #0
  402c40:	4608      	mov	r0, r1
  402c42:	4611      	mov	r1, r2
  402c44:	461a      	mov	r2, r3
  402c46:	6025      	str	r5, [r4, #0]
  402c48:	f7fd faa0 	bl	40018c <_read>
  402c4c:	1c43      	adds	r3, r0, #1
  402c4e:	d000      	beq.n	402c52 <_read_r+0x1a>
  402c50:	bd70      	pop	{r4, r5, r6, pc}
  402c52:	6823      	ldr	r3, [r4, #0]
  402c54:	2b00      	cmp	r3, #0
  402c56:	d0fb      	beq.n	402c50 <_read_r+0x18>
  402c58:	6033      	str	r3, [r6, #0]
  402c5a:	bd70      	pop	{r4, r5, r6, pc}
  402c5c:	2000091c 	.word	0x2000091c
  402c60:	2d2d2d20 	.word	0x2d2d2d20
  402c64:	2d2d2d2d 	.word	0x2d2d2d2d
  402c68:	2d2d2d2d 	.word	0x2d2d2d2d
  402c6c:	2d2d2d2d 	.word	0x2d2d2d2d
  402c70:	2d2d2d2d 	.word	0x2d2d2d2d
  402c74:	2d2d2d2d 	.word	0x2d2d2d2d
  402c78:	2d2d2d2d 	.word	0x2d2d2d2d
  402c7c:	0d0a202d 	.word	0x0d0a202d
  402c80:	6d654220 	.word	0x6d654220
  402c84:	6e697620 	.word	0x6e697620
  402c88:	74206f64 	.word	0x74206f64
  402c8c:	61727265 	.word	0x61727265
  402c90:	6f697571 	.word	0x6f697571
  402c94:	09092120 	.word	0x09092120
  402c98:	2d200d0a 	.word	0x2d200d0a
  402c9c:	2d2d2d2d 	.word	0x2d2d2d2d
  402ca0:	2d2d2d2d 	.word	0x2d2d2d2d
  402ca4:	2d2d2d2d 	.word	0x2d2d2d2d
  402ca8:	2d2d2d2d 	.word	0x2d2d2d2d
  402cac:	2d2d2d2d 	.word	0x2d2d2d2d
  402cb0:	2d2d2d2d 	.word	0x2d2d2d2d
  402cb4:	202d2d2d 	.word	0x202d2d2d
  402cb8:	00000d0a 	.word	0x00000d0a
  402cbc:	3a203120 	.word	0x3a203120
  402cc0:	69786520 	.word	0x69786520
  402cc4:	6e206562 	.word	0x6e206562
  402cc8:	6d61766f 	.word	0x6d61766f
  402ccc:	65746e65 	.word	0x65746e65
  402cd0:	73736520 	.word	0x73736520
  402cd4:	656d2065 	.word	0x656d2065
  402cd8:	0a20756e 	.word	0x0a20756e
  402cdc:	2032200d 	.word	0x2032200d
  402ce0:	7441203a 	.word	0x7441203a
  402ce4:	20617669 	.word	0x20617669
  402ce8:	454c206f 	.word	0x454c206f
  402cec:	0a202044 	.word	0x0a202044
  402cf0:	2033200d 	.word	0x2033200d
  402cf4:	6544203a 	.word	0x6544203a
  402cf8:	67696c73 	.word	0x67696c73
  402cfc:	206f2061 	.word	0x206f2061
  402d00:	2044454c 	.word	0x2044454c
  402d04:	00200d0a 	.word	0x00200d0a
  402d08:	6167694c 	.word	0x6167694c
  402d0c:	6c757a41 	.word	0x6c757a41
  402d10:	00000000 	.word	0x00000000
  402d14:	2064654c 	.word	0x2064654c
  402d18:	0a204e4f 	.word	0x0a204e4f
  402d1c:	0000000d 	.word	0x0000000d
  402d20:	6c736544 	.word	0x6c736544
  402d24:	41616769 	.word	0x41616769
  402d28:	006c757a 	.word	0x006c757a
  402d2c:	2064654c 	.word	0x2064654c
  402d30:	2046464f 	.word	0x2046464f
  402d34:	00000d0a 	.word	0x00000d0a
  402d38:	6167694c 	.word	0x6167694c
  402d3c:	64726556 	.word	0x64726556
  402d40:	00000065 	.word	0x00000065
  402d44:	6c736544 	.word	0x6c736544
  402d48:	56616769 	.word	0x56616769
  402d4c:	65647265 	.word	0x65647265
  402d50:	00000000 	.word	0x00000000
  402d54:	6167694c 	.word	0x6167694c
  402d58:	6d726556 	.word	0x6d726556
  402d5c:	6f686c65 	.word	0x6f686c65
  402d60:	00000000 	.word	0x00000000
  402d64:	6c736544 	.word	0x6c736544
  402d68:	56616769 	.word	0x56616769
  402d6c:	656d7265 	.word	0x656d7265
  402d70:	006f686c 	.word	0x006f686c
  402d74:	00000043 	.word	0x00000043

00402d78 <_global_impure_ptr>:
  402d78:	20000008 0000000a                       ... ....

00402d80 <_init>:
  402d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402d82:	bf00      	nop
  402d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402d86:	bc08      	pop	{r3}
  402d88:	469e      	mov	lr, r3
  402d8a:	4770      	bx	lr

00402d8c <__init_array_start>:
  402d8c:	0040147d 	.word	0x0040147d

00402d90 <__frame_dummy_init_array_entry>:
  402d90:	004000f1                                ..@.

00402d94 <_fini>:
  402d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402d96:	bf00      	nop
  402d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402d9a:	bc08      	pop	{r3}
  402d9c:	469e      	mov	lr, r3
  402d9e:	4770      	bx	lr

00402da0 <__fini_array_start>:
  402da0:	004000cd 	.word	0x004000cd
