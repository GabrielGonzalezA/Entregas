
13-lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ce0  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000084c  20000000  00402ce0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000520  2000084c  0040352c  0001084c  2**2
                  ALLOC
  3 .stack        00003004  20000d6c  00403a4c  0001084c  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  0001084c  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010876  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000cab9  00000000  00000000  000108d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002001  00000000  00000000  0001d38a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005e7d  00000000  00000000  0001f38b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000a60  00000000  00000000  00025208  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a18  00000000  00000000  00025c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001462d  00000000  00000000  00026680  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000bd97  00000000  00000000  0003acad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00058db0  00000000  00000000  00046a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001e00  00000000  00000000  0009f7f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003d70 	.word	0x20003d70
  400004:	004010bd 	.word	0x004010bd
  400008:	004010b9 	.word	0x004010b9
  40000c:	004010b9 	.word	0x004010b9
  400010:	004010b9 	.word	0x004010b9
  400014:	004010b9 	.word	0x004010b9
  400018:	004010b9 	.word	0x004010b9
	...
  40002c:	004010b9 	.word	0x004010b9
  400030:	004010b9 	.word	0x004010b9
  400034:	00000000 	.word	0x00000000
  400038:	004010b9 	.word	0x004010b9
  40003c:	004010b9 	.word	0x004010b9
  400040:	004010b9 	.word	0x004010b9
  400044:	004010b9 	.word	0x004010b9
  400048:	004010b9 	.word	0x004010b9
  40004c:	004010b9 	.word	0x004010b9
  400050:	004010b9 	.word	0x004010b9
  400054:	004010b9 	.word	0x004010b9
  400058:	004010b9 	.word	0x004010b9
  40005c:	004010b9 	.word	0x004010b9
  400060:	004010b9 	.word	0x004010b9
  400064:	004010b9 	.word	0x004010b9
  400068:	00000000 	.word	0x00000000
  40006c:	00400eb5 	.word	0x00400eb5
  400070:	00400ec9 	.word	0x00400ec9
  400074:	00400edd 	.word	0x00400edd
  400078:	004010b9 	.word	0x004010b9
  40007c:	004010b9 	.word	0x004010b9
	...
  400088:	004010b9 	.word	0x004010b9
  40008c:	004010b9 	.word	0x004010b9
  400090:	004010b9 	.word	0x004010b9
  400094:	004010b9 	.word	0x004010b9
  400098:	004010b9 	.word	0x004010b9
  40009c:	004010b9 	.word	0x004010b9
  4000a0:	004010b9 	.word	0x004010b9
  4000a4:	004010b9 	.word	0x004010b9
  4000a8:	004010b9 	.word	0x004010b9
  4000ac:	004010b9 	.word	0x004010b9
  4000b0:	004010b9 	.word	0x004010b9
  4000b4:	004010b9 	.word	0x004010b9
  4000b8:	004010b9 	.word	0x004010b9
  4000bc:	004010b9 	.word	0x004010b9
  4000c0:	004010b9 	.word	0x004010b9
  4000c4:	004010b9 	.word	0x004010b9
  4000c8:	004010b9 	.word	0x004010b9

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000084c 	.word	0x2000084c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00402ce0 	.word	0x00402ce0

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4808      	ldr	r0, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4908      	ldr	r1, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	00402ce0 	.word	0x00402ce0
  40011c:	20000850 	.word	0x20000850
  400120:	00402ce0 	.word	0x00402ce0
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	4b0e      	ldr	r3, [pc, #56]	; (400168 <sysclk_init+0x40>)
  40012e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	2000      	movs	r0, #0
  400132:	213e      	movs	r1, #62	; 0x3e
  400134:	4b0d      	ldr	r3, [pc, #52]	; (40016c <sysclk_init+0x44>)
  400136:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	4c0d      	ldr	r4, [pc, #52]	; (400170 <sysclk_init+0x48>)
  40013a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fc      	beq.n	40013a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	4b0c      	ldr	r3, [pc, #48]	; (400174 <sysclk_init+0x4c>)
  400142:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a0c      	ldr	r2, [pc, #48]	; (400178 <sysclk_init+0x50>)
  400146:	4b0d      	ldr	r3, [pc, #52]	; (40017c <sysclk_init+0x54>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	4c0d      	ldr	r4, [pc, #52]	; (400180 <sysclk_init+0x58>)
  40014c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fc      	beq.n	40014c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	4b0b      	ldr	r3, [pc, #44]	; (400184 <sysclk_init+0x5c>)
  400156:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	4b0b      	ldr	r3, [pc, #44]	; (400188 <sysclk_init+0x60>)
  40015a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	4b02      	ldr	r3, [pc, #8]	; (400168 <sysclk_init+0x40>)
  400160:	4798      	blx	r3
  400162:	bd10      	pop	{r4, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	00401281 	.word	0x00401281
  40016c:	00400f59 	.word	0x00400f59
  400170:	00400fad 	.word	0x00400fad
  400174:	00400fbd 	.word	0x00400fbd
  400178:	20133f01 	.word	0x20133f01
  40017c:	400e0400 	.word	0x400e0400
  400180:	00400fcd 	.word	0x00400fcd
  400184:	00400ef1 	.word	0x00400ef1
  400188:	0040116d 	.word	0x0040116d

0040018c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  40018c:	b9a8      	cbnz	r0, 4001ba <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40018e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400192:	460c      	mov	r4, r1
  400194:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400196:	2a00      	cmp	r2, #0
  400198:	dd0a      	ble.n	4001b0 <_read+0x24>
  40019a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40019c:	4e08      	ldr	r6, [pc, #32]	; (4001c0 <_read+0x34>)
  40019e:	4d09      	ldr	r5, [pc, #36]	; (4001c4 <_read+0x38>)
  4001a0:	6830      	ldr	r0, [r6, #0]
  4001a2:	4621      	mov	r1, r4
  4001a4:	682b      	ldr	r3, [r5, #0]
  4001a6:	4798      	blx	r3
		ptr++;
  4001a8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4001aa:	42bc      	cmp	r4, r7
  4001ac:	d1f8      	bne.n	4001a0 <_read+0x14>
  4001ae:	e001      	b.n	4001b4 <_read+0x28>
  4001b0:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  4001b4:	4640      	mov	r0, r8
  4001b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  4001ba:	f04f 30ff 	mov.w	r0, #4294967295
  4001be:	4770      	bx	lr
  4001c0:	20000ce0 	.word	0x20000ce0
  4001c4:	20000cd8 	.word	0x20000cd8

004001c8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001c8:	3801      	subs	r0, #1
  4001ca:	2802      	cmp	r0, #2
  4001cc:	d818      	bhi.n	400200 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001d2:	460e      	mov	r6, r1
  4001d4:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	b182      	cbz	r2, 4001fa <_write+0x32>
  4001d8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001da:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400214 <_write+0x4c>
  4001de:	4f0c      	ldr	r7, [pc, #48]	; (400210 <_write+0x48>)
  4001e0:	f8d8 0000 	ldr.w	r0, [r8]
  4001e4:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001e8:	683b      	ldr	r3, [r7, #0]
  4001ea:	4798      	blx	r3
  4001ec:	2800      	cmp	r0, #0
  4001ee:	db0a      	blt.n	400206 <_write+0x3e>
  4001f0:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001f2:	3c01      	subs	r4, #1
  4001f4:	d1f4      	bne.n	4001e0 <_write+0x18>
  4001f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001fa:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4001fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  400200:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  400204:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  400206:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40020a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40020e:	bf00      	nop
  400210:	20000cdc 	.word	0x20000cdc
  400214:	20000ce0 	.word	0x20000ce0

00400218 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  400218:	b538      	push	{r3, r4, r5, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40021a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40021e:	4b24      	ldr	r3, [pc, #144]	; (4002b0 <board_init+0x98>)
  400220:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400222:	200b      	movs	r0, #11
  400224:	4c23      	ldr	r4, [pc, #140]	; (4002b4 <board_init+0x9c>)
  400226:	47a0      	blx	r4
  400228:	200c      	movs	r0, #12
  40022a:	47a0      	blx	r4
  40022c:	200d      	movs	r0, #13
  40022e:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  400230:	2013      	movs	r0, #19
  400232:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400236:	4c20      	ldr	r4, [pc, #128]	; (4002b8 <board_init+0xa0>)
  400238:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  40023a:	2014      	movs	r0, #20
  40023c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400240:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  400242:	2023      	movs	r0, #35	; 0x23
  400244:	491d      	ldr	r1, [pc, #116]	; (4002bc <board_init+0xa4>)
  400246:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  400248:	204c      	movs	r0, #76	; 0x4c
  40024a:	491d      	ldr	r1, [pc, #116]	; (4002c0 <board_init+0xa8>)
  40024c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  40024e:	481d      	ldr	r0, [pc, #116]	; (4002c4 <board_init+0xac>)
  400250:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400254:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400258:	4b1b      	ldr	r3, [pc, #108]	; (4002c8 <board_init+0xb0>)
  40025a:	4798      	blx	r3
	gpio_set_pin_low(PIN_RE_IDX);
#endif

#if defined(CONF_BOARD_ILI9325) || defined(CONF_BOARD_ILI93XX)
	/* Configure LCD EBI pins */
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  40025c:	4d1b      	ldr	r5, [pc, #108]	; (4002cc <board_init+0xb4>)
  40025e:	2040      	movs	r0, #64	; 0x40
  400260:	4629      	mov	r1, r5
  400262:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAGS);
  400264:	2041      	movs	r0, #65	; 0x41
  400266:	4629      	mov	r1, r5
  400268:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAGS);
  40026a:	2042      	movs	r0, #66	; 0x42
  40026c:	4629      	mov	r1, r5
  40026e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAGS);
  400270:	2043      	movs	r0, #67	; 0x43
  400272:	4629      	mov	r1, r5
  400274:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAGS);
  400276:	2044      	movs	r0, #68	; 0x44
  400278:	4629      	mov	r1, r5
  40027a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
  40027c:	2045      	movs	r0, #69	; 0x45
  40027e:	4629      	mov	r1, r5
  400280:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
  400282:	2046      	movs	r0, #70	; 0x46
  400284:	4629      	mov	r1, r5
  400286:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
  400288:	2047      	movs	r0, #71	; 0x47
  40028a:	4629      	mov	r1, r5
  40028c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
  40028e:	204b      	movs	r0, #75	; 0x4b
  400290:	4629      	mov	r1, r5
  400292:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
  400294:	2048      	movs	r0, #72	; 0x48
  400296:	4629      	mov	r1, r5
  400298:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS1, PIN_EBI_NCS1_FLAGS);
  40029a:	204f      	movs	r0, #79	; 0x4f
  40029c:	4629      	mov	r1, r5
  40029e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_LCD_RS, PIN_EBI_LCD_RS_FLAGS);
  4002a0:	2053      	movs	r0, #83	; 0x53
  4002a2:	4629      	mov	r1, r5
  4002a4:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_AAT3155
	/* Configure Backlight control pin */
	gpio_configure_pin(BOARD_AAT31XX_SET_GPIO, BOARD_AAT31XX_SET_FLAGS);
  4002a6:	204d      	movs	r0, #77	; 0x4d
  4002a8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4002ac:	47a0      	blx	r4
  4002ae:	bd38      	pop	{r3, r4, r5, pc}
  4002b0:	400e1450 	.word	0x400e1450
  4002b4:	00400fdd 	.word	0x00400fdd
  4002b8:	00400c4d 	.word	0x00400c4d
  4002bc:	28000079 	.word	0x28000079
  4002c0:	28000059 	.word	0x28000059
  4002c4:	400e0e00 	.word	0x400e0e00
  4002c8:	00400d71 	.word	0x00400d71
  4002cc:	08000001 	.word	0x08000001

004002d0 <aat31xx_set_backlight>:
 * \param ul_level backlight level.
 *
 * \note pin BOARD_AAT31XX_SET_GPIO must be configured before calling aat31xx_set_backlight.
 */
void aat31xx_set_backlight(uint32_t ul_level)
{
  4002d0:	b470      	push	{r4, r5, r6}
  4002d2:	b083      	sub	sp, #12
	volatile uint32_t ul_delay;
	uint32_t i;

#ifdef CONF_BOARD_AAT3155
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
  4002d4:	f1c0 0011 	rsb	r0, r0, #17
#ifdef CONF_BOARD_AAT3193
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
#endif

	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
  4002d8:	2810      	cmp	r0, #16
  4002da:	bf28      	it	cs
  4002dc:	2010      	movcs	r0, #16
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;
  4002de:	2800      	cmp	r0, #0
  4002e0:	bf08      	it	eq
  4002e2:	2001      	moveq	r0, #1
 * \param ul_level backlight level.
 *
 * \note pin BOARD_AAT31XX_SET_GPIO must be configured before calling aat31xx_set_backlight.
 */
void aat31xx_set_backlight(uint32_t ul_level)
{
  4002e4:	2100      	movs	r1, #0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4002e6:	4e10      	ldr	r6, [pc, #64]	; (400328 <aat31xx_set_backlight+0x58>)
  4002e8:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;

	/* Set new backlight level */
	for (i = 0; i < ul_level; i++) {
		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);
		ul_delay = DELAY_PULSE;
  4002ec:	2418      	movs	r4, #24
  4002ee:	6375      	str	r5, [r6, #52]	; 0x34
  4002f0:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
  4002f2:	9b01      	ldr	r3, [sp, #4]
  4002f4:	1e5a      	subs	r2, r3, #1
  4002f6:	9201      	str	r2, [sp, #4]
  4002f8:	2b00      	cmp	r3, #0
  4002fa:	d1fa      	bne.n	4002f2 <aat31xx_set_backlight+0x22>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4002fc:	6335      	str	r5, [r6, #48]	; 0x30
		}

		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_HIGH);

		ul_delay = DELAY_PULSE;
  4002fe:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
  400300:	9b01      	ldr	r3, [sp, #4]
  400302:	1e5a      	subs	r2, r3, #1
  400304:	9201      	str	r2, [sp, #4]
  400306:	2b00      	cmp	r3, #0
  400308:	d1fa      	bne.n	400300 <aat31xx_set_backlight+0x30>
	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;

	/* Set new backlight level */
	for (i = 0; i < ul_level; i++) {
  40030a:	3101      	adds	r1, #1
  40030c:	4281      	cmp	r1, r0
  40030e:	d3ee      	bcc.n	4002ee <aat31xx_set_backlight+0x1e>
		ul_delay = DELAY_PULSE;
		while (ul_delay--) {
		}
	}

	ul_delay = DELAY_ENABLE;
  400310:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  400314:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  400316:	9b01      	ldr	r3, [sp, #4]
  400318:	1e5a      	subs	r2, r3, #1
  40031a:	9201      	str	r2, [sp, #4]
  40031c:	2b00      	cmp	r3, #0
  40031e:	d1fa      	bne.n	400316 <aat31xx_set_backlight+0x46>
	}
}
  400320:	b003      	add	sp, #12
  400322:	bc70      	pop	{r4, r5, r6}
  400324:	4770      	bx	lr
  400326:	bf00      	nop
  400328:	400e1200 	.word	0x400e1200

0040032c <aat31xx_disable_backlight>:

/**
 * \brief Switch off backlight.
 */
void aat31xx_disable_backlight(void)
{
  40032c:	b082      	sub	sp, #8
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40032e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400332:	4b06      	ldr	r3, [pc, #24]	; (40034c <aat31xx_disable_backlight+0x20>)
  400334:	635a      	str	r2, [r3, #52]	; 0x34
	volatile uint32_t ul_delay;

	ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);

	ul_delay = DELAY_DISABLE;
  400336:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  40033a:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  40033c:	9b01      	ldr	r3, [sp, #4]
  40033e:	1e5a      	subs	r2, r3, #1
  400340:	9201      	str	r2, [sp, #4]
  400342:	2b00      	cmp	r3, #0
  400344:	d1fa      	bne.n	40033c <aat31xx_disable_backlight+0x10>
	}
}
  400346:	b002      	add	sp, #8
  400348:	4770      	bx	lr
  40034a:	bf00      	nop
  40034c:	400e1200 	.word	0x400e1200

00400350 <ili93xx_write_ram_prepare>:
/**
 * \brief Prepare to write GRAM data for ili93xx.
 */
static void ili93xx_write_ram_prepare(void)
{
	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  400350:	4b0a      	ldr	r3, [pc, #40]	; (40037c <ili93xx_write_ram_prepare+0x2c>)
  400352:	781b      	ldrb	r3, [r3, #0]
  400354:	2b01      	cmp	r3, #1
  400356:	d106      	bne.n	400366 <ili93xx_write_ram_prepare+0x16>
/** Define EBI access for ILI93xx 8-bit System Interface.*/
#if defined(BOARD_ILI93XX_ADDR) && defined (BOARD_ILI93XX_RS)
static inline void LCD_IR(uint8_t lcd_index)
{
	/** ILI93XX index register address */
	*((volatile uint8_t *)(BOARD_ILI93XX_ADDR)) = lcd_index;
  400358:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  40035c:	2200      	movs	r2, #0
  40035e:	701a      	strb	r2, [r3, #0]
  400360:	2222      	movs	r2, #34	; 0x22
  400362:	701a      	strb	r2, [r3, #0]
  400364:	4770      	bx	lr
		/** Write Data to GRAM (R22h) */
		LCD_IR(0);
		LCD_IR(ILI9325_GRAM_DATA_REG);
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
  400366:	2b02      	cmp	r3, #2
  400368:	d107      	bne.n	40037a <ili93xx_write_ram_prepare+0x2a>
  40036a:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  40036e:	222c      	movs	r2, #44	; 0x2c
  400370:	701a      	strb	r2, [r3, #0]
  400372:	2200      	movs	r2, #0
  400374:	701a      	strb	r2, [r3, #0]
  400376:	223c      	movs	r2, #60	; 0x3c
  400378:	701a      	strb	r2, [r3, #0]
  40037a:	4770      	bx	lr
  40037c:	20000c28 	.word	0x20000c28

00400380 <ili93xx_write_ram>:
 *
 * \param ul_color 24-bits RGB color.
 */
static void ili93xx_write_ram(ili93xx_color_t ul_color)
{
	LCD_WD((ul_color >> 16) & 0xFF);
  400380:	f3c0 4207 	ubfx	r2, r0, #16, #8
}

static inline void LCD_WD(uint8_t lcd_data)
{
	*((volatile uint8_t *)((BOARD_ILI93XX_ADDR) | (BOARD_ILI93XX_RS))) =
  400384:	4b03      	ldr	r3, [pc, #12]	; (400394 <ili93xx_write_ram+0x14>)
  400386:	701a      	strb	r2, [r3, #0]
	LCD_WD((ul_color >> 8) & 0xFF);
  400388:	f3c0 2207 	ubfx	r2, r0, #8, #8
  40038c:	701a      	strb	r2, [r3, #0]
	LCD_WD(ul_color & 0xFF);
  40038e:	b2c0      	uxtb	r0, r0
  400390:	7018      	strb	r0, [r3, #0]
  400392:	4770      	bx	lr
  400394:	61000002 	.word	0x61000002

00400398 <ili93xx_write_ram_buffer>:
 * \param p_ul_buf data buffer.
 * \param ul_size size in pixels.
 */
static void ili93xx_write_ram_buffer(const ili93xx_color_t *p_ul_buf,
		uint32_t ul_size)
{
  400398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40039c:	4607      	mov	r7, r0
  40039e:	4688      	mov	r8, r1
	uint32_t ul_addr;
	for (ul_addr = 0; ul_addr < (ul_size - ul_size % 8); ul_addr += 8) {
  4003a0:	f031 0907 	bics.w	r9, r1, #7
  4003a4:	d018      	beq.n	4003d8 <ili93xx_write_ram_buffer+0x40>
  4003a6:	4604      	mov	r4, r0
  4003a8:	2600      	movs	r6, #0
		ili93xx_write_ram(p_ul_buf[ul_addr]);
  4003aa:	4d12      	ldr	r5, [pc, #72]	; (4003f4 <ili93xx_write_ram_buffer+0x5c>)
  4003ac:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
  4003b0:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 1]);
  4003b2:	6860      	ldr	r0, [r4, #4]
  4003b4:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 2]);
  4003b6:	68a0      	ldr	r0, [r4, #8]
  4003b8:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 3]);
  4003ba:	68e0      	ldr	r0, [r4, #12]
  4003bc:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 4]);
  4003be:	6920      	ldr	r0, [r4, #16]
  4003c0:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 5]);
  4003c2:	6960      	ldr	r0, [r4, #20]
  4003c4:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 6]);
  4003c6:	69a0      	ldr	r0, [r4, #24]
  4003c8:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 7]);
  4003ca:	69e0      	ldr	r0, [r4, #28]
  4003cc:	47a8      	blx	r5
 */
static void ili93xx_write_ram_buffer(const ili93xx_color_t *p_ul_buf,
		uint32_t ul_size)
{
	uint32_t ul_addr;
	for (ul_addr = 0; ul_addr < (ul_size - ul_size % 8); ul_addr += 8) {
  4003ce:	3608      	adds	r6, #8
  4003d0:	3420      	adds	r4, #32
  4003d2:	454e      	cmp	r6, r9
  4003d4:	d3ea      	bcc.n	4003ac <ili93xx_write_ram_buffer+0x14>
  4003d6:	e000      	b.n	4003da <ili93xx_write_ram_buffer+0x42>
  4003d8:	2600      	movs	r6, #0
		ili93xx_write_ram(p_ul_buf[ul_addr + 4]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 5]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 6]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 7]);
	}
	for (; ul_addr < ul_size; ul_addr++) {
  4003da:	45b0      	cmp	r8, r6
  4003dc:	d908      	bls.n	4003f0 <ili93xx_write_ram_buffer+0x58>
  4003de:	eb07 0486 	add.w	r4, r7, r6, lsl #2
		ili93xx_write_ram(p_ul_buf[ul_addr]);
  4003e2:	4d04      	ldr	r5, [pc, #16]	; (4003f4 <ili93xx_write_ram_buffer+0x5c>)
  4003e4:	f854 0b04 	ldr.w	r0, [r4], #4
  4003e8:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 4]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 5]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 6]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 7]);
	}
	for (; ul_addr < ul_size; ul_addr++) {
  4003ea:	3601      	adds	r6, #1
  4003ec:	45b0      	cmp	r8, r6
  4003ee:	d8f9      	bhi.n	4003e4 <ili93xx_write_ram_buffer+0x4c>
  4003f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4003f4:	00400381 	.word	0x00400381

004003f8 <ili93xx_write_register_word>:
/** Define EBI access for ILI93xx 8-bit System Interface.*/
#if defined(BOARD_ILI93XX_ADDR) && defined (BOARD_ILI93XX_RS)
static inline void LCD_IR(uint8_t lcd_index)
{
	/** ILI93XX index register address */
	*((volatile uint8_t *)(BOARD_ILI93XX_ADDR)) = lcd_index;
  4003f8:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  4003fc:	2200      	movs	r2, #0
  4003fe:	701a      	strb	r2, [r3, #0]
  400400:	7018      	strb	r0, [r3, #0]
 */
static void ili93xx_write_register_word(uint8_t uc_reg, uint16_t us_data)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	LCD_WD((us_data >> 8) & 0xFF);
  400402:	0a0a      	lsrs	r2, r1, #8
}

static inline void LCD_WD(uint8_t lcd_data)
{
	*((volatile uint8_t *)((BOARD_ILI93XX_ADDR) | (BOARD_ILI93XX_RS))) =
  400404:	3302      	adds	r3, #2
  400406:	701a      	strb	r2, [r3, #0]
	LCD_WD(us_data & 0xFF);
  400408:	b2c9      	uxtb	r1, r1
  40040a:	7019      	strb	r1, [r3, #0]
  40040c:	4770      	bx	lr
  40040e:	bf00      	nop

00400410 <ili93xx_write_register>:
 * \param uc_reg register address.
 * \param us_data data to be written.
 */
static void ili93xx_write_register(uint8_t uc_reg, uint8_t *p_data,
		uint8_t uc_datacnt)
{
  400410:	b410      	push	{r4}
/** Define EBI access for ILI93xx 8-bit System Interface.*/
#if defined(BOARD_ILI93XX_ADDR) && defined (BOARD_ILI93XX_RS)
static inline void LCD_IR(uint8_t lcd_index)
{
	/** ILI93XX index register address */
	*((volatile uint8_t *)(BOARD_ILI93XX_ADDR)) = lcd_index;
  400412:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  400416:	2400      	movs	r4, #0
  400418:	701c      	strb	r4, [r3, #0]
  40041a:	7018      	strb	r0, [r3, #0]
	LCD_IR(0);
	LCD_IR(uc_reg);
	for (uint8_t i = 0; i < uc_datacnt; i++) {
  40041c:	b14a      	cbz	r2, 400432 <ili93xx_write_register+0x22>
  40041e:	1e4b      	subs	r3, r1, #1
  400420:	1e50      	subs	r0, r2, #1
  400422:	fa51 f180 	uxtab	r1, r1, r0
}

static inline void LCD_WD(uint8_t lcd_data)
{
	*((volatile uint8_t *)((BOARD_ILI93XX_ADDR) | (BOARD_ILI93XX_RS))) =
  400426:	4804      	ldr	r0, [pc, #16]	; (400438 <ili93xx_write_register+0x28>)
		LCD_WD(p_data[i]);
  400428:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  40042c:	7002      	strb	r2, [r0, #0]
static void ili93xx_write_register(uint8_t uc_reg, uint8_t *p_data,
		uint8_t uc_datacnt)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	for (uint8_t i = 0; i < uc_datacnt; i++) {
  40042e:	428b      	cmp	r3, r1
  400430:	d1fa      	bne.n	400428 <ili93xx_write_register+0x18>
		LCD_WD(p_data[i]);
	}
}
  400432:	f85d 4b04 	ldr.w	r4, [sp], #4
  400436:	4770      	bx	lr
  400438:	61000002 	.word	0x61000002

0040043c <ili93xx_delay>:

/**
 * \brief Delay function.
 */
static void ili93xx_delay(uint32_t ul_ms)
{
  40043c:	b082      	sub	sp, #8
	volatile uint32_t i;

	for (i = 0; i < ul_ms; i++) {
  40043e:	2300      	movs	r3, #0
  400440:	9301      	str	r3, [sp, #4]
  400442:	9b01      	ldr	r3, [sp, #4]
  400444:	4298      	cmp	r0, r3
  400446:	d911      	bls.n	40046c <ili93xx_delay+0x30>
		for (i = 0; i < 100000; i++) {
  400448:	2100      	movs	r1, #0
  40044a:	4a09      	ldr	r2, [pc, #36]	; (400470 <ili93xx_delay+0x34>)
  40044c:	9101      	str	r1, [sp, #4]
  40044e:	9b01      	ldr	r3, [sp, #4]
  400450:	4293      	cmp	r3, r2
  400452:	d805      	bhi.n	400460 <ili93xx_delay+0x24>
  400454:	9b01      	ldr	r3, [sp, #4]
  400456:	3301      	adds	r3, #1
  400458:	9301      	str	r3, [sp, #4]
  40045a:	9b01      	ldr	r3, [sp, #4]
  40045c:	4293      	cmp	r3, r2
  40045e:	d9f9      	bls.n	400454 <ili93xx_delay+0x18>
 */
static void ili93xx_delay(uint32_t ul_ms)
{
	volatile uint32_t i;

	for (i = 0; i < ul_ms; i++) {
  400460:	9b01      	ldr	r3, [sp, #4]
  400462:	3301      	adds	r3, #1
  400464:	9301      	str	r3, [sp, #4]
  400466:	9b01      	ldr	r3, [sp, #4]
  400468:	4283      	cmp	r3, r0
  40046a:	d3ef      	bcc.n	40044c <ili93xx_delay+0x10>
		for (i = 0; i < 100000; i++) {
		}
	}
}
  40046c:	b002      	add	sp, #8
  40046e:	4770      	bx	lr
  400470:	0001869f 	.word	0x0001869f

00400474 <ili93xx_check_box_coordinates>:
 * \param p_ul_x2 X coordinate of lower-right corner on LCD.
 * \param p_ul_y2 Y coordinate of lower-right corner on LCD.
 */
static void ili93xx_check_box_coordinates(uint32_t *p_ul_x1, uint32_t *p_ul_y1,
		uint32_t *p_ul_x2, uint32_t *p_ul_y2)
{
  400474:	b430      	push	{r4, r5}
	uint32_t dw;

	if (*p_ul_x1 >= g_ul_lcd_x_length) {
  400476:	4c15      	ldr	r4, [pc, #84]	; (4004cc <ili93xx_check_box_coordinates+0x58>)
  400478:	6824      	ldr	r4, [r4, #0]
  40047a:	6805      	ldr	r5, [r0, #0]
  40047c:	42a5      	cmp	r5, r4
		*p_ul_x1 = g_ul_lcd_x_length - 1;
  40047e:	bf24      	itt	cs
  400480:	f104 35ff 	addcs.w	r5, r4, #4294967295
  400484:	6005      	strcs	r5, [r0, #0]
	}

	if (*p_ul_x2 >= g_ul_lcd_x_length) {
  400486:	6815      	ldr	r5, [r2, #0]
  400488:	42ac      	cmp	r4, r5
		*p_ul_x2 = g_ul_lcd_x_length - 1;
  40048a:	bf9c      	itt	ls
  40048c:	f104 34ff 	addls.w	r4, r4, #4294967295
  400490:	6014      	strls	r4, [r2, #0]
	}

	if (*p_ul_y1 >= g_ul_lcd_y_length) {
  400492:	4c0f      	ldr	r4, [pc, #60]	; (4004d0 <ili93xx_check_box_coordinates+0x5c>)
  400494:	6824      	ldr	r4, [r4, #0]
  400496:	680d      	ldr	r5, [r1, #0]
  400498:	42a5      	cmp	r5, r4
		*p_ul_y1 = g_ul_lcd_y_length - 1;
  40049a:	bf24      	itt	cs
  40049c:	f104 35ff 	addcs.w	r5, r4, #4294967295
  4004a0:	600d      	strcs	r5, [r1, #0]
	}

	if (*p_ul_y2 >= g_ul_lcd_y_length) {
  4004a2:	681d      	ldr	r5, [r3, #0]
  4004a4:	42ac      	cmp	r4, r5
		*p_ul_y2 = g_ul_lcd_y_length - 1;
  4004a6:	bf9c      	itt	ls
  4004a8:	f104 34ff 	addls.w	r4, r4, #4294967295
  4004ac:	601c      	strls	r4, [r3, #0]
	}

	if (*p_ul_x1 > *p_ul_x2) {
  4004ae:	6804      	ldr	r4, [r0, #0]
  4004b0:	6815      	ldr	r5, [r2, #0]
  4004b2:	42ac      	cmp	r4, r5
		dw = *p_ul_x1;
		*p_ul_x1 = *p_ul_x2;
  4004b4:	bf84      	itt	hi
  4004b6:	6005      	strhi	r5, [r0, #0]
		*p_ul_x2 = dw;
  4004b8:	6014      	strhi	r4, [r2, #0]
	}

	if (*p_ul_y1 > *p_ul_y2) {
  4004ba:	680a      	ldr	r2, [r1, #0]
  4004bc:	6818      	ldr	r0, [r3, #0]
  4004be:	4282      	cmp	r2, r0
		dw = *p_ul_y1;
		*p_ul_y1 = *p_ul_y2;
  4004c0:	bf84      	itt	hi
  4004c2:	6008      	strhi	r0, [r1, #0]
		*p_ul_y2 = dw;
  4004c4:	601a      	strhi	r2, [r3, #0]
	}
}
  4004c6:	bc30      	pop	{r4, r5}
  4004c8:	4770      	bx	lr
  4004ca:	bf00      	nop
  4004cc:	20000000 	.word	0x20000000
  4004d0:	20000004 	.word	0x20000004

004004d4 <ili93xx_device_type_identify>:
 *        ILI9341 device ID locates in Read ID4 (RD3h) register.
 *
 * \return 0 if secceed in identifying device; otherwise fails.
 */
uint8_t ili93xx_device_type_identify(void)
{
  4004d4:	b082      	sub	sp, #8
/** Define EBI access for ILI93xx 8-bit System Interface.*/
#if defined(BOARD_ILI93XX_ADDR) && defined (BOARD_ILI93XX_RS)
static inline void LCD_IR(uint8_t lcd_index)
{
	/** ILI93XX index register address */
	*((volatile uint8_t *)(BOARD_ILI93XX_ADDR)) = lcd_index;
  4004d6:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  4004da:	2200      	movs	r2, #0
  4004dc:	701a      	strb	r2, [r3, #0]
  4004de:	22d3      	movs	r2, #211	; 0xd3
  4004e0:	701a      	strb	r2, [r3, #0]
																lcd_data;
}

static inline uint8_t LCD_RD(void)
{
	return *((volatile uint8_t *)((BOARD_ILI93XX_ADDR) |(BOARD_ILI93XX_RS)));
  4004e2:	3302      	adds	r3, #2
  4004e4:	781a      	ldrb	r2, [r3, #0]
{
	LCD_IR(0);
	LCD_IR(uc_reg);

	for (uint8_t i = 0; i < uc_datacnt; i++) {
		p_data[i] = LCD_RD();
  4004e6:	f88d 2000 	strb.w	r2, [sp]
  4004ea:	781a      	ldrb	r2, [r3, #0]
  4004ec:	f88d 2001 	strb.w	r2, [sp, #1]
  4004f0:	781a      	ldrb	r2, [r3, #0]
  4004f2:	f88d 2002 	strb.w	r2, [sp, #2]
  4004f6:	781b      	ldrb	r3, [r3, #0]
  4004f8:	b2db      	uxtb	r3, r3
  4004fa:	f88d 3003 	strb.w	r3, [sp, #3]
	uint8_t paratable[6];
	uint16_t chipid;

	/** Read ID4 (RD4h) register to get device code for ILI9341*/
	ili93xx_read_register(ILI9341_CMD_READ_ID4, paratable, 4);
	chipid = ((uint16_t)paratable[2] << 8) + paratable[3];
  4004fe:	b2d2      	uxtb	r2, r2
  400500:	eb03 2302 	add.w	r3, r3, r2, lsl #8

	if (chipid == ILI9341_DEVICE_CODE) {
  400504:	b29b      	uxth	r3, r3
  400506:	f249 3241 	movw	r2, #37697	; 0x9341
  40050a:	4293      	cmp	r3, r2
  40050c:	d104      	bne.n	400518 <ili93xx_device_type_identify+0x44>
		g_uc_device_type = DEVICE_TYPE_ILI9341;
  40050e:	2202      	movs	r2, #2
  400510:	4b0e      	ldr	r3, [pc, #56]	; (40054c <ili93xx_device_type_identify+0x78>)
  400512:	701a      	strb	r2, [r3, #0]
		return 0;
  400514:	2000      	movs	r0, #0
  400516:	e017      	b.n	400548 <ili93xx_device_type_identify+0x74>
/** Define EBI access for ILI93xx 8-bit System Interface.*/
#if defined(BOARD_ILI93XX_ADDR) && defined (BOARD_ILI93XX_RS)
static inline void LCD_IR(uint8_t lcd_index)
{
	/** ILI93XX index register address */
	*((volatile uint8_t *)(BOARD_ILI93XX_ADDR)) = lcd_index;
  400518:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  40051c:	2200      	movs	r2, #0
  40051e:	701a      	strb	r2, [r3, #0]
  400520:	701a      	strb	r2, [r3, #0]
																lcd_data;
}

static inline uint8_t LCD_RD(void)
{
	return *((volatile uint8_t *)((BOARD_ILI93XX_ADDR) |(BOARD_ILI93XX_RS)));
  400522:	3302      	adds	r3, #2
  400524:	781a      	ldrb	r2, [r3, #0]
{
	LCD_IR(0);
	LCD_IR(uc_reg);

	for (uint8_t i = 0; i < uc_datacnt; i++) {
		p_data[i] = LCD_RD();
  400526:	f88d 2000 	strb.w	r2, [sp]
  40052a:	781b      	ldrb	r3, [r3, #0]
		return 0;
	}

	/** Driver Code Read (R00h) for ILI9325*/
	ili93xx_read_register(ILI9325_DEVICE_CODE_REG, paratable, 2);
	chipid = ((uint16_t)paratable[0] << 8) + paratable[1];
  40052c:	b2d2      	uxtb	r2, r2
  40052e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	if (chipid == ILI9325_DEVICE_CODE) {
  400532:	b29b      	uxth	r3, r3
  400534:	f249 3225 	movw	r2, #37669	; 0x9325
  400538:	4293      	cmp	r3, r2
  40053a:	d104      	bne.n	400546 <ili93xx_device_type_identify+0x72>
		g_uc_device_type = DEVICE_TYPE_ILI9325;
  40053c:	2201      	movs	r2, #1
  40053e:	4b03      	ldr	r3, [pc, #12]	; (40054c <ili93xx_device_type_identify+0x78>)
  400540:	701a      	strb	r2, [r3, #0]
		return 0;
  400542:	2000      	movs	r0, #0
  400544:	e000      	b.n	400548 <ili93xx_device_type_identify+0x74>
	}

	return 1;
  400546:	2001      	movs	r0, #1
}
  400548:	b002      	add	sp, #8
  40054a:	4770      	bx	lr
  40054c:	20000c28 	.word	0x20000c28

00400550 <ili93xx_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili93xx_display_on(void)
{
  400550:	b508      	push	{r3, lr}
	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  400552:	4b09      	ldr	r3, [pc, #36]	; (400578 <ili93xx_display_on+0x28>)
  400554:	781b      	ldrb	r3, [r3, #0]
  400556:	2b01      	cmp	r3, #1
  400558:	d105      	bne.n	400566 <ili93xx_display_on+0x16>
		ili93xx_write_register_word(ILI9325_DISP_CTRL1,
  40055a:	2007      	movs	r0, #7
  40055c:	f240 1133 	movw	r1, #307	; 0x133
  400560:	4b06      	ldr	r3, [pc, #24]	; (40057c <ili93xx_display_on+0x2c>)
  400562:	4798      	blx	r3
  400564:	bd08      	pop	{r3, pc}
				ILI9325_DISP_CTRL1_BASEE |
				ILI9325_DISP_CTRL1_GON |
				ILI9325_DISP_CTRL1_DTE |
				ILI9325_DISP_CTRL1_D(0x03));
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
  400566:	2b02      	cmp	r3, #2
  400568:	d104      	bne.n	400574 <ili93xx_display_on+0x24>
		ili93xx_write_register(ILI9341_CMD_DISPLAY_ON, NULL, 0);
  40056a:	2029      	movs	r0, #41	; 0x29
  40056c:	2100      	movs	r1, #0
  40056e:	460a      	mov	r2, r1
  400570:	4b03      	ldr	r3, [pc, #12]	; (400580 <ili93xx_display_on+0x30>)
  400572:	4798      	blx	r3
  400574:	bd08      	pop	{r3, pc}
  400576:	bf00      	nop
  400578:	20000c28 	.word	0x20000c28
  40057c:	004003f9 	.word	0x004003f9
  400580:	00400411 	.word	0x00400411

00400584 <ili93xx_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili93xx_set_foreground_color(ili93xx_color_t ul_color)
{
  400584:	4a04      	ldr	r2, [pc, #16]	; (400598 <ili93xx_set_foreground_color+0x14>)
  400586:	1f13      	subs	r3, r2, #4
  400588:	f502 726f 	add.w	r2, r2, #956	; 0x3bc
	uint32_t i;

	/** Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
		g_ul_pixel_cache[i] = ul_color;
  40058c:	f843 0f04 	str.w	r0, [r3, #4]!
void ili93xx_set_foreground_color(ili93xx_color_t ul_color)
{
	uint32_t i;

	/** Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
  400590:	4293      	cmp	r3, r2
  400592:	d1fb      	bne.n	40058c <ili93xx_set_foreground_color+0x8>
		g_ul_pixel_cache[i] = ul_color;
	}
}
  400594:	4770      	bx	lr
  400596:	bf00      	nop
  400598:	20000868 	.word	0x20000868

0040059c <ili93xx_set_window>:
 * \param ul_width The width of the window.
 * \param ul_height The height of the window.
 */
void ili93xx_set_window(uint32_t ul_x, uint32_t ul_y, uint32_t ul_width,
		uint32_t ul_height)
{
  40059c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4005a0:	b082      	sub	sp, #8
  4005a2:	460c      	mov	r4, r1
  4005a4:	4617      	mov	r7, r2
  4005a6:	461e      	mov	r6, r3
	Assert(ul_x <= (g_ul_lcd_x_length - 1));
	Assert(ul_y <= (g_ul_lcd_y_length - 1));
	Assert(ul_width <= (g_ul_lcd_x_length - ul_x));
	Assert(ul_height <= (g_ul_lcd_y_length - ul_y));
	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  4005a8:	4b22      	ldr	r3, [pc, #136]	; (400634 <ili93xx_set_window+0x98>)
  4005aa:	781b      	ldrb	r3, [r3, #0]
  4005ac:	2b01      	cmp	r3, #1
  4005ae:	d114      	bne.n	4005da <ili93xx_set_window+0x3e>
		/** Set Horizontal Address Start Position */
		ili93xx_write_register_word(ILI9325_HORIZONTAL_ADDR_START,
  4005b0:	b285      	uxth	r5, r0
  4005b2:	2050      	movs	r0, #80	; 0x50
  4005b4:	4629      	mov	r1, r5
  4005b6:	f8df 8084 	ldr.w	r8, [pc, #132]	; 40063c <ili93xx_set_window+0xa0>
  4005ba:	47c0      	blx	r8
  4005bc:	1e79      	subs	r1, r7, #1
				(uint16_t)ul_x);

		/** Set Horizontal Address End Position */
		ili93xx_write_register_word(ILI9325_HORIZONTAL_ADDR_END,
  4005be:	4429      	add	r1, r5
  4005c0:	2051      	movs	r0, #81	; 0x51
  4005c2:	b289      	uxth	r1, r1
  4005c4:	47c0      	blx	r8
				(uint16_t)(ul_x + ul_width - 1));

		/** Set Vertical Address Start Position */
		ili93xx_write_register_word(ILI9325_VERTICAL_ADDR_START,
  4005c6:	b2a4      	uxth	r4, r4
  4005c8:	2052      	movs	r0, #82	; 0x52
  4005ca:	4621      	mov	r1, r4
  4005cc:	47c0      	blx	r8
  4005ce:	1e71      	subs	r1, r6, #1
				(uint16_t)ul_y);

		/** Set Vertical Address End Position */
		ili93xx_write_register_word(ILI9325_VERTICAL_ADDR_END,
  4005d0:	4421      	add	r1, r4
  4005d2:	2053      	movs	r0, #83	; 0x53
  4005d4:	b289      	uxth	r1, r1
  4005d6:	47c0      	blx	r8
  4005d8:	e028      	b.n	40062c <ili93xx_set_window+0x90>
				(uint16_t)(ul_y + ul_height - 1));
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
  4005da:	2b02      	cmp	r3, #2
  4005dc:	d126      	bne.n	40062c <ili93xx_set_window+0x90>
		uint8_t paratable[4];

		/** Set Column Address Position */
		paratable[0] = (ul_x >> 8) & 0xFF;
  4005de:	0a03      	lsrs	r3, r0, #8
  4005e0:	f88d 3004 	strb.w	r3, [sp, #4]
		paratable[1] = ul_x & 0xFF;
  4005e4:	b2c3      	uxtb	r3, r0
  4005e6:	f88d 3005 	strb.w	r3, [sp, #5]
  4005ea:	3a01      	subs	r2, #1
		paratable[2] = ((ul_x + ul_width - 1) >> 8) & 0xFF;
  4005ec:	4410      	add	r0, r2
  4005ee:	0a00      	lsrs	r0, r0, #8
  4005f0:	f88d 0006 	strb.w	r0, [sp, #6]
  4005f4:	4617      	mov	r7, r2
		paratable[3] = (ul_x + ul_width - 1) & 0xFF;
  4005f6:	441f      	add	r7, r3
  4005f8:	f88d 7007 	strb.w	r7, [sp, #7]
		ili93xx_write_register(ILI9341_CMD_COLUMN_ADDRESS_SET,
  4005fc:	202a      	movs	r0, #42	; 0x2a
  4005fe:	a901      	add	r1, sp, #4
  400600:	2204      	movs	r2, #4
  400602:	4d0d      	ldr	r5, [pc, #52]	; (400638 <ili93xx_set_window+0x9c>)
  400604:	47a8      	blx	r5
				paratable, 4);

		/** Set Page Address Position */
		paratable[0] = (ul_y >> 8) & 0xFF;
  400606:	0a23      	lsrs	r3, r4, #8
  400608:	f88d 3004 	strb.w	r3, [sp, #4]
		paratable[1] = ul_y & 0xFF;
  40060c:	b2e3      	uxtb	r3, r4
  40060e:	f88d 3005 	strb.w	r3, [sp, #5]
  400612:	1e72      	subs	r2, r6, #1
		paratable[2] = ((ul_y + ul_height - 1) >> 8) & 0xFF;
  400614:	4414      	add	r4, r2
  400616:	0a24      	lsrs	r4, r4, #8
  400618:	f88d 4006 	strb.w	r4, [sp, #6]
  40061c:	4616      	mov	r6, r2
		paratable[3] = (ul_y + ul_height - 1) & 0xFF;
  40061e:	441e      	add	r6, r3
  400620:	f88d 6007 	strb.w	r6, [sp, #7]
		ili93xx_write_register(ILI9341_CMD_PAGE_ADDRESS_SET,
  400624:	202b      	movs	r0, #43	; 0x2b
  400626:	a901      	add	r1, sp, #4
  400628:	2204      	movs	r2, #4
  40062a:	47a8      	blx	r5
				       paratable, 4);
	}
}
  40062c:	b002      	add	sp, #8
  40062e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400632:	bf00      	nop
  400634:	20000c28 	.word	0x20000c28
  400638:	00400411 	.word	0x00400411
  40063c:	004003f9 	.word	0x004003f9

00400640 <ili93xx_set_cursor_position>:
 *
 * \param us_x X coordinate of upper-left corner on LCD.
 * \param us_y Y coordinate of upper-left corner on LCD.
 */
void ili93xx_set_cursor_position(uint16_t us_x, uint16_t us_y)
{
  400640:	b538      	push	{r3, r4, r5, lr}
	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  400642:	4b06      	ldr	r3, [pc, #24]	; (40065c <ili93xx_set_cursor_position+0x1c>)
  400644:	781b      	ldrb	r3, [r3, #0]
  400646:	2b01      	cmp	r3, #1
  400648:	d107      	bne.n	40065a <ili93xx_set_cursor_position+0x1a>
  40064a:	460c      	mov	r4, r1
  40064c:	4601      	mov	r1, r0
		/** GRAM Horizontal/Vertical Address Set (R20h, R21h) */
		ili93xx_write_register_word(ILI9325_HORIZONTAL_GRAM_ADDR_SET, us_x);
  40064e:	2020      	movs	r0, #32
  400650:	4d03      	ldr	r5, [pc, #12]	; (400660 <ili93xx_set_cursor_position+0x20>)
  400652:	47a8      	blx	r5
		ili93xx_write_register_word(ILI9325_VERTICAL_GRAM_ADDR_SET, us_y);
  400654:	2021      	movs	r0, #33	; 0x21
  400656:	4621      	mov	r1, r4
  400658:	47a8      	blx	r5
  40065a:	bd38      	pop	{r3, r4, r5, pc}
  40065c:	20000c28 	.word	0x20000c28
  400660:	004003f9 	.word	0x004003f9

00400664 <ili93xx_init>:
 * \param p_opt pointer to ILI93xx option structure.
 *
 * \return 0 if initialization succeeds, otherwise fails.
 */
uint32_t ili93xx_init(struct ili93xx_opt_t *p_opt)
{
  400664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400668:	b083      	sub	sp, #12
  40066a:	4606      	mov	r6, r0
	uint8_t paratable[6];

	/** Identify the LCD driver device*/
	if (ili93xx_device_type_identify() != 0) {
  40066c:	4bac      	ldr	r3, [pc, #688]	; (400920 <ili93xx_init+0x2bc>)
  40066e:	4798      	blx	r3
  400670:	2800      	cmp	r0, #0
  400672:	f040 814f 	bne.w	400914 <ili93xx_init+0x2b0>
		return 1;
	}

	g_ul_lcd_x_length = ILI93XX_LCD_WIDTH;
  400676:	22f0      	movs	r2, #240	; 0xf0
  400678:	4baa      	ldr	r3, [pc, #680]	; (400924 <ili93xx_init+0x2c0>)
  40067a:	601a      	str	r2, [r3, #0]
	g_ul_lcd_y_length = ILI93XX_LCD_HEIGHT;
  40067c:	f44f 72a0 	mov.w	r2, #320	; 0x140
  400680:	4ba9      	ldr	r3, [pc, #676]	; (400928 <ili93xx_init+0x2c4>)
  400682:	601a      	str	r2, [r3, #0]

	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  400684:	4ba9      	ldr	r3, [pc, #676]	; (40092c <ili93xx_init+0x2c8>)
  400686:	781b      	ldrb	r3, [r3, #0]
  400688:	2b01      	cmp	r3, #1
  40068a:	f040 80b1 	bne.w	4007f0 <ili93xx_init+0x18c>
		/** Turn off LCD */
		ili93xx_write_register_word(ILI9325_DISP_CTRL1, ILI9325_DISP_CTRL1_GON |
  40068e:	2007      	movs	r0, #7
  400690:	2133      	movs	r1, #51	; 0x33
  400692:	4ca7      	ldr	r4, [pc, #668]	; (400930 <ili93xx_init+0x2cc>)
  400694:	47a0      	blx	r4
				ILI9325_DISP_CTRL1_DTE | ILI9325_DISP_CTRL1_D(0x03));

		/** Start initial sequence */
		/** Disable sleep and standby mode*/
		ili93xx_write_register_word(ILI9325_POWER_CTRL1, 0x0000);
  400696:	2010      	movs	r0, #16
  400698:	2100      	movs	r1, #0
  40069a:	47a0      	blx	r4
		/** Start internal OSC */
		ili93xx_write_register_word(ILI9325_START_OSC_CTRL,
  40069c:	2000      	movs	r0, #0
  40069e:	2101      	movs	r1, #1
  4006a0:	47a0      	blx	r4
				ILI9325_START_OSC_CTRL_EN);
		/** Set SS bit and direction output from S720 to S1 */
		ili93xx_write_register_word(ILI9325_DRIVER_OUTPUT_CTRL1,
  4006a2:	2001      	movs	r0, #1
  4006a4:	f44f 7180 	mov.w	r1, #256	; 0x100
  4006a8:	47a0      	blx	r4
				ILI9325_DRIVER_OUTPUT_CTRL1_SS);
		/** Set 1 line inversion */
		ili93xx_write_register_word(ILI9325_LCD_DRIVING_CTRL,
  4006aa:	2002      	movs	r0, #2
  4006ac:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  4006b0:	47a0      	blx	r4
				ILI9325_LCD_DRIVING_CTRL_BIT10 | ILI9325_LCD_DRIVING_CTRL_EOR
				| ILI9325_LCD_DRIVING_CTRL_BC0);
		/** Disable resizing feature */
		ili93xx_write_register_word(ILI9325_RESIZE_CTRL, 0x0000);
  4006b2:	2004      	movs	r0, #4
  4006b4:	2100      	movs	r1, #0
  4006b6:	47a0      	blx	r4
		/** Set the back porch and front porch */
		ili93xx_write_register_word(ILI9325_DISP_CTRL2,
  4006b8:	2008      	movs	r0, #8
  4006ba:	f240 2107 	movw	r1, #519	; 0x207
  4006be:	47a0      	blx	r4
				ILI9325_DISP_CTRL2_BP(
				0x07) | ILI9325_DISP_CTRL2_FP(0x02));
		/** Set non-display area refresh cycle ISC[3:0] */
		ili93xx_write_register_word(ILI9325_DISP_CTRL3, 0x0000);
  4006c0:	2009      	movs	r0, #9
  4006c2:	2100      	movs	r1, #0
  4006c4:	47a0      	blx	r4
		/** Disable FMARK function */
		ili93xx_write_register_word(ILI9325_DISP_CTRL4, 0x0000);
  4006c6:	200a      	movs	r0, #10
  4006c8:	2100      	movs	r1, #0
  4006ca:	47a0      	blx	r4
		/** 18-bit RGB interface and writing display data by system
		 *interface */
		ili93xx_write_register_word(ILI9325_RGB_DISP_INTERFACE_CTRL1,
  4006cc:	200c      	movs	r0, #12
  4006ce:	2100      	movs	r1, #0
  4006d0:	47a0      	blx	r4
				0x0000);
		/** Set the output position of frame cycle */
		ili93xx_write_register_word(ILI9325_FRAME_MAKER_POS, 0x0000);
  4006d2:	200d      	movs	r0, #13
  4006d4:	2100      	movs	r1, #0
  4006d6:	47a0      	blx	r4
		/** RGB interface polarity */
		ili93xx_write_register_word(ILI9325_RGB_DISP_INTERFACE_CTRL2,
  4006d8:	200f      	movs	r0, #15
  4006da:	2100      	movs	r1, #0
  4006dc:	47a0      	blx	r4
				0x0000);

		/** Power on sequence */
		/** Disable sleep and standby mode */
		ili93xx_write_register_word(ILI9325_POWER_CTRL1, 0x0000);
  4006de:	2010      	movs	r0, #16
  4006e0:	2100      	movs	r1, #0
  4006e2:	47a0      	blx	r4

		/**
		 * Selects the operating frequency of the step-up circuit 1,2
		 * and Sets the ratio factor of Vci.
		 */
		ili93xx_write_register_word(ILI9325_POWER_CTRL2, 0x0000);
  4006e4:	2011      	movs	r0, #17
  4006e6:	2100      	movs	r1, #0
  4006e8:	47a0      	blx	r4
		/** Set VREG1OUT voltage */
		ili93xx_write_register_word(ILI9325_POWER_CTRL3, 0x0000);
  4006ea:	2012      	movs	r0, #18
  4006ec:	2100      	movs	r1, #0
  4006ee:	47a0      	blx	r4
		/** Set VCOM amplitude */
		ili93xx_write_register_word(ILI9325_POWER_CTRL4, 0x0000);
  4006f0:	2013      	movs	r0, #19
  4006f2:	2100      	movs	r1, #0
  4006f4:	47a0      	blx	r4
		ili93xx_delay(200);
  4006f6:	20c8      	movs	r0, #200	; 0xc8
  4006f8:	4d8e      	ldr	r5, [pc, #568]	; (400934 <ili93xx_init+0x2d0>)
  4006fa:	47a8      	blx	r5

		/**
		 * Adjusts the constant current and Sets the factor used
		 * in the step-up circuits.
		 */
		ili93xx_write_register_word(ILI9325_POWER_CTRL1,
  4006fc:	2010      	movs	r0, #16
  4006fe:	f241 2190 	movw	r1, #4752	; 0x1290
  400702:	47a0      	blx	r4

		/**
		 * Select the operating frequency of the step-up circuit 1,2 and
		 * Sets the ratio factor of Vci
		 */
		ili93xx_write_register_word(ILI9325_POWER_CTRL2,
  400704:	2011      	movs	r0, #17
  400706:	f240 2127 	movw	r1, #551	; 0x227
  40070a:	47a0      	blx	r4
				ILI9325_POWER_CTRL2_DC1(0x02) |
				ILI9325_POWER_CTRL2_DC0(0x02) | ILI9325_POWER_CTRL2_VC(0x07));
		ili93xx_delay(50);
  40070c:	2032      	movs	r0, #50	; 0x32
  40070e:	47a8      	blx	r5
		/** Internal reference voltage= Vci */
		ili93xx_write_register_word(ILI9325_POWER_CTRL3,
  400710:	2012      	movs	r0, #18
  400712:	211b      	movs	r1, #27
  400714:	47a0      	blx	r4
				ILI9325_POWER_CTRL3_PON | ILI9325_POWER_CTRL3_VRH(0x0B));
		ili93xx_delay(50);
  400716:	2032      	movs	r0, #50	; 0x32
  400718:	47a8      	blx	r5
		/** Set VDV[4:0] for VCOM amplitude */
		ili93xx_write_register_word(ILI9325_POWER_CTRL4,
  40071a:	2013      	movs	r0, #19
  40071c:	f44f 5188 	mov.w	r1, #4352	; 0x1100
  400720:	47a0      	blx	r4
				ILI9325_POWER_CTRL4_VDV(0x11));
		/** Set VCM[5:0] for VCOMH */
		ili93xx_write_register_word(ILI9325_POWER_CTRL7,
  400722:	2029      	movs	r0, #41	; 0x29
  400724:	2119      	movs	r1, #25
  400726:	47a0      	blx	r4
				ILI9325_POWER_CTRL7_VCM(0x19));
		/** Set Frame Rate */
		ili93xx_write_register_word(ILI9325_FRAME_RATE_AND_COLOR_CTRL,
  400728:	202b      	movs	r0, #43	; 0x2b
  40072a:	210d      	movs	r1, #13
  40072c:	47a0      	blx	r4
				ILI9325_FRAME_RATE_AND_COLOR_CTRL_FRS(0x0D));
		ili93xx_delay(50);
  40072e:	2032      	movs	r0, #50	; 0x32
  400730:	47a8      	blx	r5

		/** Adjust the Gamma Curve */
		ili93xx_write_register_word(ILI9325_GAMMA_CTL1, 0x0000);
  400732:	2030      	movs	r0, #48	; 0x30
  400734:	2100      	movs	r1, #0
  400736:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_GAMMA_CTL2,
  400738:	2031      	movs	r0, #49	; 0x31
  40073a:	f44f 7101 	mov.w	r1, #516	; 0x204
  40073e:	47a0      	blx	r4
				ILI9325_GAMMA_CTL2_KP3(0x02) |
				ILI9325_GAMMA_CTL2_KP2(0x04));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL3,
  400740:	2032      	movs	r0, #50	; 0x32
  400742:	f44f 7100 	mov.w	r1, #512	; 0x200
  400746:	47a0      	blx	r4
				ILI9325_GAMMA_CTL3_KP5(0x02) |
				ILI9325_GAMMA_CTL3_KP4(0x00));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL4,
  400748:	2035      	movs	r0, #53	; 0x35
  40074a:	2107      	movs	r1, #7
  40074c:	47a0      	blx	r4
				ILI9325_GAMMA_CTL4_RP1(0x00) |
				ILI9325_GAMMA_CTL4_RP0(0x07));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL5,
  40074e:	2036      	movs	r0, #54	; 0x36
  400750:	f241 4104 	movw	r1, #5124	; 0x1404
  400754:	47a0      	blx	r4
				ILI9325_GAMMA_CTL5_VRP1(0x14) |
				ILI9325_GAMMA_CTL5_VRP0(0x04));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL6,
  400756:	2037      	movs	r0, #55	; 0x37
  400758:	f240 7105 	movw	r1, #1797	; 0x705
  40075c:	47a0      	blx	r4
				ILI9325_GAMMA_CTL6_KN1(0x07) |
				ILI9325_GAMMA_CTL6_KN0(0x05));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL7,
  40075e:	2038      	movs	r0, #56	; 0x38
  400760:	f240 3105 	movw	r1, #773	; 0x305
  400764:	47a0      	blx	r4
				ILI9325_GAMMA_CTL7_KN3(0x03) |
				ILI9325_GAMMA_CTL7_KN2(0x05));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL8,
  400766:	2039      	movs	r0, #57	; 0x39
  400768:	f240 7107 	movw	r1, #1799	; 0x707
  40076c:	47a0      	blx	r4
				ILI9325_GAMMA_CTL8_KN5(0x07) |
				ILI9325_GAMMA_CTL8_KN4(0x07));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL9,
  40076e:	203c      	movs	r0, #60	; 0x3c
  400770:	f240 7101 	movw	r1, #1793	; 0x701
  400774:	47a0      	blx	r4
				ILI9325_GAMMA_CTL9_RN1(0x07) |
				ILI9325_GAMMA_CTL9_RN0(0x01));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL10,
  400776:	203d      	movs	r0, #61	; 0x3d
  400778:	210e      	movs	r1, #14
  40077a:	47a0      	blx	r4
		 * DFM Set the mode of transferring data to the internal RAM
		 * when TRI = 1.
		 * I/D[1:0] = 11 Horizontal : increment Vertical : increment,
		 * AM=0:Horizontal
		 */
		ili93xx_write_register_word(ILI9325_ENTRY_MODE,
  40077c:	2003      	movs	r0, #3
  40077e:	f24d 0110 	movw	r1, #53264	; 0xd010
  400782:	47a0      	blx	r4
				ILI9325_ENTRY_MODE_ID(0x01) | ILI9325_ENTRY_MODE_BGR);
		/**
		 * Sets the number of lines to drive the LCD at an interval of 8
		 * lines. The scan direction is from G320 to G1
		 */
		ili93xx_write_register_word(ILI9325_DRIVER_OUTPUT_CTRL2,
  400784:	2060      	movs	r0, #96	; 0x60
  400786:	f44f 4127 	mov.w	r1, #42752	; 0xa700
  40078a:	47a0      	blx	r4
				ILI9325_DRIVER_OUTPUT_CTRL2_GS |
				ILI9325_DRIVER_OUTPUT_CTRL2_NL(0x27));

		/** Vertical Scrolling */
		/** Disable scrolling and enable the grayscale inversion */
		ili93xx_write_register_word(ILI9325_BASE_IMG_DISP_CTRL,
  40078c:	2061      	movs	r0, #97	; 0x61
  40078e:	2101      	movs	r1, #1
  400790:	47a0      	blx	r4
				ILI9325_BASE_IMG_DISP_CTRL_REV);
		ili93xx_write_register_word(ILI9325_VERTICAL_SCROLL_CTRL,
  400792:	206a      	movs	r0, #106	; 0x6a
  400794:	2100      	movs	r1, #0
  400796:	47a0      	blx	r4
				0x0000);

		/** Disable Partial Display */
		ili93xx_write_register_word(ILI9325_PARTIAL_IMG1_DISP_POS,
  400798:	2080      	movs	r0, #128	; 0x80
  40079a:	2100      	movs	r1, #0
  40079c:	47a0      	blx	r4
				0x0000);
		ili93xx_write_register_word(
  40079e:	2081      	movs	r0, #129	; 0x81
  4007a0:	2100      	movs	r1, #0
  4007a2:	47a0      	blx	r4
				ILI9325_PARTIAL_IMG1_AREA_START_LINE,
				0x0000);
		ili93xx_write_register_word(ILI9325_PARTIAL_IMG1_AREA_END_LINE,
  4007a4:	2082      	movs	r0, #130	; 0x82
  4007a6:	2100      	movs	r1, #0
  4007a8:	47a0      	blx	r4
				0x0000);
		ili93xx_write_register_word(ILI9325_PARTIAL_IMG2_DISP_POS,
  4007aa:	2083      	movs	r0, #131	; 0x83
  4007ac:	2100      	movs	r1, #0
  4007ae:	47a0      	blx	r4
				0x0000);
		ili93xx_write_register_word(
  4007b0:	2084      	movs	r0, #132	; 0x84
  4007b2:	2100      	movs	r1, #0
  4007b4:	47a0      	blx	r4
				ILI9325_PARTIAL_IMG2_AREA_START_LINE,
				0x0000);
		ili93xx_write_register_word(ILI9325_PARTIAL_IMG2_AREA_END_LINE,
  4007b6:	2085      	movs	r0, #133	; 0x85
  4007b8:	2100      	movs	r1, #0
  4007ba:	47a0      	blx	r4
				0x0000);

		/** Panel Control */
		ili93xx_write_register_word(ILI9325_PANEL_INTERFACE_CTRL1,
  4007bc:	2090      	movs	r0, #144	; 0x90
  4007be:	2110      	movs	r1, #16
  4007c0:	47a0      	blx	r4
				ILI9325_PANEL_INTERFACE_CTRL1_RTNI(0x10));
		ili93xx_write_register_word(ILI9325_PANEL_INTERFACE_CTRL2,
  4007c2:	2092      	movs	r0, #146	; 0x92
  4007c4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  4007c8:	47a0      	blx	r4
				ILI9325_PANEL_INTERFACE_CTRL2_NOWI(0x06));
		ili93xx_write_register_word(ILI9325_PANEL_INTERFACE_CTRL4,
  4007ca:	2095      	movs	r0, #149	; 0x95
  4007cc:	f44f 7188 	mov.w	r1, #272	; 0x110
  4007d0:	47a0      	blx	r4
				ILI9325_PANEL_INTERFACE_CTRL4_DIVE(0x01) |
				ILI9325_PANEL_INTERFACE_CTRL4_RTNE(0x10));

		ili93xx_set_window(0, 0, p_opt->ul_width, p_opt->ul_height);
  4007d2:	2000      	movs	r0, #0
  4007d4:	4601      	mov	r1, r0
  4007d6:	6832      	ldr	r2, [r6, #0]
  4007d8:	6873      	ldr	r3, [r6, #4]
  4007da:	4c57      	ldr	r4, [pc, #348]	; (400938 <ili93xx_init+0x2d4>)
  4007dc:	47a0      	blx	r4
		ili93xx_set_foreground_color(p_opt->foreground_color);
  4007de:	68b0      	ldr	r0, [r6, #8]
  4007e0:	4b56      	ldr	r3, [pc, #344]	; (40093c <ili93xx_init+0x2d8>)
  4007e2:	4798      	blx	r3
		ili93xx_set_cursor_position(0, 0);
  4007e4:	2000      	movs	r0, #0
  4007e6:	4601      	mov	r1, r0
  4007e8:	4b55      	ldr	r3, [pc, #340]	; (400940 <ili93xx_init+0x2dc>)
  4007ea:	4798      	blx	r3
	} else {
		/** exit with return value 1 if device type is not supported.*/
		return 1;
	}

	return 0;
  4007ec:	2000      	movs	r0, #0
  4007ee:	e094      	b.n	40091a <ili93xx_init+0x2b6>
				ILI9325_PANEL_INTERFACE_CTRL4_RTNE(0x10));

		ili93xx_set_window(0, 0, p_opt->ul_width, p_opt->ul_height);
		ili93xx_set_foreground_color(p_opt->foreground_color);
		ili93xx_set_cursor_position(0, 0);
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
  4007f0:	2b02      	cmp	r3, #2
  4007f2:	f040 8091 	bne.w	400918 <ili93xx_init+0x2b4>
		/** init for ILI9341 **/
		/** power control A configuration*/
		paratable[0] = 0x39;
  4007f6:	2339      	movs	r3, #57	; 0x39
  4007f8:	f88d 3000 	strb.w	r3, [sp]
		paratable[1] = 0x2C;
  4007fc:	232c      	movs	r3, #44	; 0x2c
  4007fe:	f88d 3001 	strb.w	r3, [sp, #1]
		paratable[2] = 0x00;
  400802:	2400      	movs	r4, #0
  400804:	f88d 4002 	strb.w	r4, [sp, #2]
		paratable[3] = 0x34;
  400808:	2334      	movs	r3, #52	; 0x34
  40080a:	f88d 3003 	strb.w	r3, [sp, #3]
		paratable[4] = 0x02;
  40080e:	2702      	movs	r7, #2
  400810:	f88d 7004 	strb.w	r7, [sp, #4]
		ili93xx_write_register(ILI9341_CMD_POWER_CONTROL_A, paratable, 5);
  400814:	20cb      	movs	r0, #203	; 0xcb
  400816:	4669      	mov	r1, sp
  400818:	2205      	movs	r2, #5
  40081a:	4d4a      	ldr	r5, [pc, #296]	; (400944 <ili93xx_init+0x2e0>)
  40081c:	47a8      	blx	r5

		/** power control B configuration */
		paratable[0] = 0;
  40081e:	f88d 4000 	strb.w	r4, [sp]
		paratable[1] = 0xAA;
  400822:	23aa      	movs	r3, #170	; 0xaa
  400824:	f88d 3001 	strb.w	r3, [sp, #1]
		paratable[2] = 0xB0;
  400828:	23b0      	movs	r3, #176	; 0xb0
  40082a:	f88d 3002 	strb.w	r3, [sp, #2]
		ili93xx_write_register(ILI9341_CMD_POWER_CONTROL_B, paratable, 3);
  40082e:	20cf      	movs	r0, #207	; 0xcf
  400830:	4669      	mov	r1, sp
  400832:	2203      	movs	r2, #3
  400834:	47a8      	blx	r5

		/** Pump Ratio Control configuration */
		paratable[0] = 0x30;
  400836:	2330      	movs	r3, #48	; 0x30
  400838:	f88d 3000 	strb.w	r3, [sp]
		ili93xx_write_register(ILI9341_CMD_PUMP_RATIO_CONTROL,
  40083c:	20f7      	movs	r0, #247	; 0xf7
  40083e:	4669      	mov	r1, sp
  400840:	2201      	movs	r2, #1
  400842:	47a8      	blx	r5
				paratable, 1);

		/** Power Control 1 configuration*/
		paratable[0] = 0x25;
  400844:	2325      	movs	r3, #37	; 0x25
  400846:	f88d 3000 	strb.w	r3, [sp]
		ili93xx_write_register(ILI9341_CMD_POWER_CONTROL_1, paratable, 1);
  40084a:	20c0      	movs	r0, #192	; 0xc0
  40084c:	4669      	mov	r1, sp
  40084e:	2201      	movs	r2, #1
  400850:	47a8      	blx	r5

		/** Power Control 2 configuration*/
		paratable[0] = 0x11;
  400852:	f04f 0911 	mov.w	r9, #17
  400856:	f88d 9000 	strb.w	r9, [sp]
		ili93xx_write_register(ILI9341_CMD_POWER_CONTROL_2, paratable, 1);
  40085a:	20c1      	movs	r0, #193	; 0xc1
  40085c:	4669      	mov	r1, sp
  40085e:	2201      	movs	r2, #1
  400860:	47a8      	blx	r5

		/** VOM Control 1 configuration*/
		paratable[0] = 0x5C;
  400862:	235c      	movs	r3, #92	; 0x5c
  400864:	f88d 3000 	strb.w	r3, [sp]
		paratable[1] = 0x4C;
  400868:	234c      	movs	r3, #76	; 0x4c
  40086a:	f88d 3001 	strb.w	r3, [sp, #1]
		ili93xx_write_register(ILI9341_CMD_VCOM_CONTROL_1, paratable, 2);
  40086e:	20c5      	movs	r0, #197	; 0xc5
  400870:	4669      	mov	r1, sp
  400872:	463a      	mov	r2, r7
  400874:	47a8      	blx	r5

		/** VOM control 2 configuration*/
		paratable[0] = 0x94;
  400876:	2394      	movs	r3, #148	; 0x94
  400878:	f88d 3000 	strb.w	r3, [sp]
		ili93xx_write_register(ILI9341_CMD_VCOM_CONTROL_2, paratable, 1);
  40087c:	20c7      	movs	r0, #199	; 0xc7
  40087e:	4669      	mov	r1, sp
  400880:	2201      	movs	r2, #1
  400882:	47a8      	blx	r5

		/** Driver Timing Control A configuration*/
		paratable[0] = 0x85;
  400884:	2385      	movs	r3, #133	; 0x85
  400886:	f88d 3000 	strb.w	r3, [sp]
		paratable[1] = 0x01;
  40088a:	f04f 0801 	mov.w	r8, #1
  40088e:	f88d 8001 	strb.w	r8, [sp, #1]
		paratable[2] = 0x78;
  400892:	2378      	movs	r3, #120	; 0x78
  400894:	f88d 3002 	strb.w	r3, [sp, #2]
		ili93xx_write_register(ILI9341_CMD_DRIVER_TIMING_CTL_A, paratable, 3);
  400898:	20e8      	movs	r0, #232	; 0xe8
  40089a:	4669      	mov	r1, sp
  40089c:	2203      	movs	r2, #3
  40089e:	47a8      	blx	r5

		/** Driver Timing Control B configuration*/
		paratable[0] = 0x00;
  4008a0:	f88d 4000 	strb.w	r4, [sp]
		paratable[1] = 0x00;
  4008a4:	f88d 4001 	strb.w	r4, [sp, #1]
		ili93xx_write_register(ILI9341_CMD_DRIVER_TIMING_CTL_B, paratable, 2);
  4008a8:	20ea      	movs	r0, #234	; 0xea
  4008aa:	4669      	mov	r1, sp
  4008ac:	463a      	mov	r2, r7
  4008ae:	47a8      	blx	r5

		/** Memory Access Control configuration*/
		paratable[0] = ILI9341_CMD_MEMORY_ACCESS_CONTROL_MX |
  4008b0:	2348      	movs	r3, #72	; 0x48
  4008b2:	f88d 3000 	strb.w	r3, [sp]
				ILI9341_CMD_MEMORY_ACCESS_CONTROL_BGR;
		ili93xx_write_register(ILI9341_CMD_MEMORY_ACCESS_CONTROL,
  4008b6:	2036      	movs	r0, #54	; 0x36
  4008b8:	4669      	mov	r1, sp
  4008ba:	4642      	mov	r2, r8
  4008bc:	47a8      	blx	r5
				paratable, 1);

		/** Colmod Pixel Format Set configuation*/
		paratable[0] = 0x06;
  4008be:	2306      	movs	r3, #6
  4008c0:	f88d 3000 	strb.w	r3, [sp]
		ili93xx_write_register(ILI9341_CMD_PIXEL_FORMAT_SET, paratable, 1);
  4008c4:	203a      	movs	r0, #58	; 0x3a
  4008c6:	4669      	mov	r1, sp
  4008c8:	4642      	mov	r2, r8
  4008ca:	47a8      	blx	r5

		/** Display Function Control */
		paratable[0] = 0x02;
  4008cc:	f88d 7000 	strb.w	r7, [sp]
		paratable[1] = 0x82;
  4008d0:	2382      	movs	r3, #130	; 0x82
  4008d2:	f88d 3001 	strb.w	r3, [sp, #1]
		paratable[2] = 0x27;
  4008d6:	2327      	movs	r3, #39	; 0x27
  4008d8:	f88d 3002 	strb.w	r3, [sp, #2]
		paratable[3] = 0x00;
  4008dc:	f88d 4003 	strb.w	r4, [sp, #3]
		ili93xx_write_register(ILI9341_CMD_DISPLAY_FUNCTION_CTL, paratable, 4);
  4008e0:	20b6      	movs	r0, #182	; 0xb6
  4008e2:	4669      	mov	r1, sp
  4008e4:	2204      	movs	r2, #4
  4008e6:	47a8      	blx	r5
		
		/** set window area*/
		ili93xx_set_window(0, 0, p_opt->ul_width, p_opt->ul_height);
  4008e8:	4620      	mov	r0, r4
  4008ea:	4621      	mov	r1, r4
  4008ec:	6832      	ldr	r2, [r6, #0]
  4008ee:	6873      	ldr	r3, [r6, #4]
  4008f0:	4f11      	ldr	r7, [pc, #68]	; (400938 <ili93xx_init+0x2d4>)
  4008f2:	47b8      	blx	r7
		ili93xx_set_foreground_color(p_opt->foreground_color);
  4008f4:	68b0      	ldr	r0, [r6, #8]
  4008f6:	4b11      	ldr	r3, [pc, #68]	; (40093c <ili93xx_init+0x2d8>)
  4008f8:	4798      	blx	r3
		/** Leave sleep mode*/
		ili93xx_write_register(ILI9341_CMD_SLEEP_OUT, paratable, 0);
  4008fa:	4648      	mov	r0, r9
  4008fc:	4669      	mov	r1, sp
  4008fe:	4622      	mov	r2, r4
  400900:	47a8      	blx	r5
		ili93xx_delay(10);
  400902:	200a      	movs	r0, #10
  400904:	4b0b      	ldr	r3, [pc, #44]	; (400934 <ili93xx_init+0x2d0>)
  400906:	4798      	blx	r3
		/** Display on*/
		ili93xx_write_register(ILI9341_CMD_DISPLAY_ON, paratable, 0);
  400908:	2029      	movs	r0, #41	; 0x29
  40090a:	4669      	mov	r1, sp
  40090c:	4622      	mov	r2, r4
  40090e:	47a8      	blx	r5
	} else {
		/** exit with return value 1 if device type is not supported.*/
		return 1;
	}

	return 0;
  400910:	4620      	mov	r0, r4
  400912:	e002      	b.n	40091a <ili93xx_init+0x2b6>
{
	uint8_t paratable[6];

	/** Identify the LCD driver device*/
	if (ili93xx_device_type_identify() != 0) {
		return 1;
  400914:	2001      	movs	r0, #1
  400916:	e000      	b.n	40091a <ili93xx_init+0x2b6>
		ili93xx_delay(10);
		/** Display on*/
		ili93xx_write_register(ILI9341_CMD_DISPLAY_ON, paratable, 0);
	} else {
		/** exit with return value 1 if device type is not supported.*/
		return 1;
  400918:	2001      	movs	r0, #1
	}

	return 0;
}
  40091a:	b003      	add	sp, #12
  40091c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400920:	004004d5 	.word	0x004004d5
  400924:	20000000 	.word	0x20000000
  400928:	20000004 	.word	0x20000004
  40092c:	20000c28 	.word	0x20000c28
  400930:	004003f9 	.word	0x004003f9
  400934:	0040043d 	.word	0x0040043d
  400938:	0040059d 	.word	0x0040059d
  40093c:	00400585 	.word	0x00400585
  400940:	00400641 	.word	0x00400641
  400944:	00400411 	.word	0x00400411

00400948 <ili93xx_draw_pixel>:
 * \param ul_y Y coordinate of pixel.
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili93xx_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
  400948:	b510      	push	{r4, lr}
	if ((ul_x >= g_ul_lcd_x_length) || (ul_y >= g_ul_lcd_y_length)) {
  40094a:	4b16      	ldr	r3, [pc, #88]	; (4009a4 <ili93xx_draw_pixel+0x5c>)
  40094c:	681b      	ldr	r3, [r3, #0]
  40094e:	4283      	cmp	r3, r0
  400950:	d921      	bls.n	400996 <ili93xx_draw_pixel+0x4e>
  400952:	4b15      	ldr	r3, [pc, #84]	; (4009a8 <ili93xx_draw_pixel+0x60>)
  400954:	681b      	ldr	r3, [r3, #0]
  400956:	428b      	cmp	r3, r1
  400958:	d91f      	bls.n	40099a <ili93xx_draw_pixel+0x52>
		return 1;
	}

	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  40095a:	4b14      	ldr	r3, [pc, #80]	; (4009ac <ili93xx_draw_pixel+0x64>)
  40095c:	781b      	ldrb	r3, [r3, #0]
  40095e:	2b01      	cmp	r3, #1
  400960:	d10b      	bne.n	40097a <ili93xx_draw_pixel+0x32>
		/** Set cursor */
		ili93xx_set_cursor_position(ul_x, ul_y);
  400962:	b280      	uxth	r0, r0
  400964:	b289      	uxth	r1, r1
  400966:	4b12      	ldr	r3, [pc, #72]	; (4009b0 <ili93xx_draw_pixel+0x68>)
  400968:	4798      	blx	r3
		/** Prepare to write in GRAM */
		ili93xx_write_ram_prepare();
  40096a:	4b12      	ldr	r3, [pc, #72]	; (4009b4 <ili93xx_draw_pixel+0x6c>)
  40096c:	4798      	blx	r3
		ili93xx_write_ram(*g_ul_pixel_cache);
  40096e:	4b12      	ldr	r3, [pc, #72]	; (4009b8 <ili93xx_draw_pixel+0x70>)
  400970:	6818      	ldr	r0, [r3, #0]
  400972:	4b12      	ldr	r3, [pc, #72]	; (4009bc <ili93xx_draw_pixel+0x74>)
  400974:	4798      	blx	r3
		/** Prepare to write in GRAM */
		ili93xx_write_ram_prepare();
		ili93xx_write_ram(*g_ul_pixel_cache);
	}

	return 0;
  400976:	2000      	movs	r0, #0
  400978:	bd10      	pop	{r4, pc}
		/** Set cursor */
		ili93xx_set_cursor_position(ul_x, ul_y);
		/** Prepare to write in GRAM */
		ili93xx_write_ram_prepare();
		ili93xx_write_ram(*g_ul_pixel_cache);
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
  40097a:	2b02      	cmp	r3, #2
  40097c:	d10f      	bne.n	40099e <ili93xx_draw_pixel+0x56>
		ili93xx_set_window(ul_x, ul_y, 0, 0);
  40097e:	2200      	movs	r2, #0
  400980:	4613      	mov	r3, r2
  400982:	4c0f      	ldr	r4, [pc, #60]	; (4009c0 <ili93xx_draw_pixel+0x78>)
  400984:	47a0      	blx	r4
		/** Prepare to write in GRAM */
		ili93xx_write_ram_prepare();
  400986:	4b0b      	ldr	r3, [pc, #44]	; (4009b4 <ili93xx_draw_pixel+0x6c>)
  400988:	4798      	blx	r3
		ili93xx_write_ram(*g_ul_pixel_cache);
  40098a:	4b0b      	ldr	r3, [pc, #44]	; (4009b8 <ili93xx_draw_pixel+0x70>)
  40098c:	6818      	ldr	r0, [r3, #0]
  40098e:	4b0b      	ldr	r3, [pc, #44]	; (4009bc <ili93xx_draw_pixel+0x74>)
  400990:	4798      	blx	r3
	}

	return 0;
  400992:	2000      	movs	r0, #0
  400994:	bd10      	pop	{r4, pc}
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili93xx_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= g_ul_lcd_x_length) || (ul_y >= g_ul_lcd_y_length)) {
		return 1;
  400996:	2001      	movs	r0, #1
  400998:	bd10      	pop	{r4, pc}
  40099a:	2001      	movs	r0, #1
  40099c:	bd10      	pop	{r4, pc}
		/** Prepare to write in GRAM */
		ili93xx_write_ram_prepare();
		ili93xx_write_ram(*g_ul_pixel_cache);
	}

	return 0;
  40099e:	2000      	movs	r0, #0
}
  4009a0:	bd10      	pop	{r4, pc}
  4009a2:	bf00      	nop
  4009a4:	20000000 	.word	0x20000000
  4009a8:	20000004 	.word	0x20000004
  4009ac:	20000c28 	.word	0x20000c28
  4009b0:	00400641 	.word	0x00400641
  4009b4:	00400351 	.word	0x00400351
  4009b8:	20000868 	.word	0x20000868
  4009bc:	00400381 	.word	0x00400381
  4009c0:	0040059d 	.word	0x0040059d

004009c4 <ili93xx_draw_filled_rectangle>:
 * \param ul_x2 X coordinate of lower-right corner on LCD.
 * \param ul_y2 Y coordinate of lower-right corner on LCD.
 */
void ili93xx_draw_filled_rectangle(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
  4009c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4009c8:	b084      	sub	sp, #16
  4009ca:	9003      	str	r0, [sp, #12]
  4009cc:	9102      	str	r1, [sp, #8]
  4009ce:	9201      	str	r2, [sp, #4]
  4009d0:	9300      	str	r3, [sp, #0]
	uint32_t size, blocks;

	/** Swap coordinates if necessary */
	ili93xx_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
  4009d2:	a803      	add	r0, sp, #12
  4009d4:	a902      	add	r1, sp, #8
  4009d6:	aa01      	add	r2, sp, #4
  4009d8:	466b      	mov	r3, sp
  4009da:	4c22      	ldr	r4, [pc, #136]	; (400a64 <ili93xx_draw_filled_rectangle+0xa0>)
  4009dc:	47a0      	blx	r4

	/** Determine the refresh window area */
	ili93xx_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1,
  4009de:	9d03      	ldr	r5, [sp, #12]
			(ul_y2 - ul_y1) + 1);
  4009e0:	9c02      	ldr	r4, [sp, #8]
  4009e2:	9901      	ldr	r1, [sp, #4]
  4009e4:	1c4a      	adds	r2, r1, #1
  4009e6:	9900      	ldr	r1, [sp, #0]
  4009e8:	1c4b      	adds	r3, r1, #1

	/** Swap coordinates if necessary */
	ili93xx_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);

	/** Determine the refresh window area */
	ili93xx_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1,
  4009ea:	4628      	mov	r0, r5
  4009ec:	4621      	mov	r1, r4
  4009ee:	1b52      	subs	r2, r2, r5
  4009f0:	1b1b      	subs	r3, r3, r4
  4009f2:	4c1d      	ldr	r4, [pc, #116]	; (400a68 <ili93xx_draw_filled_rectangle+0xa4>)
  4009f4:	47a0      	blx	r4
			(ul_y2 - ul_y1) + 1);

	/** Set cursor */
	ili93xx_set_cursor_position(ul_x1, ul_y1);
  4009f6:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  4009fa:	f8bd 1008 	ldrh.w	r1, [sp, #8]
  4009fe:	4b1b      	ldr	r3, [pc, #108]	; (400a6c <ili93xx_draw_filled_rectangle+0xa8>)
  400a00:	4798      	blx	r3

	/** Prepare to write in Graphic RAM */
	ili93xx_write_ram_prepare();
  400a02:	4b1b      	ldr	r3, [pc, #108]	; (400a70 <ili93xx_draw_filled_rectangle+0xac>)
  400a04:	4798      	blx	r3

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);
  400a06:	9a02      	ldr	r2, [sp, #8]
  400a08:	9b00      	ldr	r3, [sp, #0]
  400a0a:	1a9a      	subs	r2, r3, r2
  400a0c:	9b01      	ldr	r3, [sp, #4]
  400a0e:	f103 0801 	add.w	r8, r3, #1
  400a12:	9b03      	ldr	r3, [sp, #12]
  400a14:	ebc3 0808 	rsb	r8, r3, r8
  400a18:	fb02 8808 	mla	r8, r2, r8, r8

	/** Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
  400a1c:	4c15      	ldr	r4, [pc, #84]	; (400a74 <ili93xx_draw_filled_rectangle+0xb0>)
  400a1e:	fba4 3408 	umull	r3, r4, r4, r8
	while (blocks--) {
  400a22:	09e4      	lsrs	r4, r4, #7
  400a24:	d007      	beq.n	400a36 <ili93xx_draw_filled_rectangle+0x72>
		ili93xx_write_ram_buffer(g_ul_pixel_cache,
  400a26:	4f14      	ldr	r7, [pc, #80]	; (400a78 <ili93xx_draw_filled_rectangle+0xb4>)
  400a28:	26f0      	movs	r6, #240	; 0xf0
  400a2a:	4d14      	ldr	r5, [pc, #80]	; (400a7c <ili93xx_draw_filled_rectangle+0xb8>)
  400a2c:	4638      	mov	r0, r7
  400a2e:	4631      	mov	r1, r6
  400a30:	47a8      	blx	r5

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);

	/** Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
	while (blocks--) {
  400a32:	3c01      	subs	r4, #1
  400a34:	d1fa      	bne.n	400a2c <ili93xx_draw_filled_rectangle+0x68>
		ili93xx_write_ram_buffer(g_ul_pixel_cache,
								LCD_DATA_CACHE_SIZE);
	}

	/** Send remaining pixels */
	ili93xx_write_ram_buffer(g_ul_pixel_cache,
  400a36:	490f      	ldr	r1, [pc, #60]	; (400a74 <ili93xx_draw_filled_rectangle+0xb0>)
  400a38:	fba1 3108 	umull	r3, r1, r1, r8
  400a3c:	09c9      	lsrs	r1, r1, #7
  400a3e:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
  400a42:	480d      	ldr	r0, [pc, #52]	; (400a78 <ili93xx_draw_filled_rectangle+0xb4>)
  400a44:	eba8 1101 	sub.w	r1, r8, r1, lsl #4
  400a48:	4b0c      	ldr	r3, [pc, #48]	; (400a7c <ili93xx_draw_filled_rectangle+0xb8>)
  400a4a:	4798      	blx	r3
					size % LCD_DATA_CACHE_SIZE);

	/** Reset the refresh window area */
	ili93xx_set_window(0, 0, g_ul_lcd_x_length, g_ul_lcd_y_length);
  400a4c:	2000      	movs	r0, #0
  400a4e:	4601      	mov	r1, r0
  400a50:	4b0b      	ldr	r3, [pc, #44]	; (400a80 <ili93xx_draw_filled_rectangle+0xbc>)
  400a52:	681a      	ldr	r2, [r3, #0]
  400a54:	4b0b      	ldr	r3, [pc, #44]	; (400a84 <ili93xx_draw_filled_rectangle+0xc0>)
  400a56:	681b      	ldr	r3, [r3, #0]
  400a58:	4c03      	ldr	r4, [pc, #12]	; (400a68 <ili93xx_draw_filled_rectangle+0xa4>)
  400a5a:	47a0      	blx	r4
}
  400a5c:	b004      	add	sp, #16
  400a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a62:	bf00      	nop
  400a64:	00400475 	.word	0x00400475
  400a68:	0040059d 	.word	0x0040059d
  400a6c:	00400641 	.word	0x00400641
  400a70:	00400351 	.word	0x00400351
  400a74:	88888889 	.word	0x88888889
  400a78:	20000868 	.word	0x20000868
  400a7c:	00400399 	.word	0x00400399
  400a80:	20000000 	.word	0x20000000
  400a84:	20000004 	.word	0x20000004

00400a88 <ili93xx_draw_string>:
 * \param ul_x X coordinate of string top-left corner.
 * \param ul_y Y coordinate of string top-left corner.
 * \param p_str String to display.
 */
void ili93xx_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
  400a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400a8c:	b085      	sub	sp, #20
  400a8e:	9003      	str	r0, [sp, #12]
  400a90:	9202      	str	r2, [sp, #8]
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  400a92:	7813      	ldrb	r3, [r2, #0]
  400a94:	2b00      	cmp	r3, #0
  400a96:	d046      	beq.n	400b26 <ili93xx_draw_string+0x9e>
  400a98:	468b      	mov	fp, r1
  400a9a:	9001      	str	r0, [sp, #4]
		 * Draw pixel on screen depending on the corresponding bit value
		 * from the charset
		 */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
  400a9c:	f8df 9090 	ldr.w	r9, [pc, #144]	; 400b30 <ili93xx_draw_string+0xa8>
{
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
		/** If newline, jump to the next line (font height + 2) */
		if (*p_str == '\n') {
  400aa0:	2b0a      	cmp	r3, #10
  400aa2:	d104      	bne.n	400aae <ili93xx_draw_string+0x26>
			ul_y += gfont.height + 2;
  400aa4:	f10b 0b10 	add.w	fp, fp, #16
			ul_x = xorg;
  400aa8:	9b03      	ldr	r3, [sp, #12]
  400aaa:	9301      	str	r3, [sp, #4]
  400aac:	e035      	b.n	400b1a <ili93xx_draw_string+0x92>

	/**
	 * Compute offset according of the specified ASCII character
	 *  Note: the first 32 characters of the ASCII table are not handled
	 */
	offset = ((uint32_t)uc_c - 0x20) * 20;
  400aae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400ab2:	4e1e      	ldr	r6, [pc, #120]	; (400b2c <ili93xx_draw_string+0xa4>)
  400ab4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  400ab8:	f2a3 267f 	subw	r6, r3, #639	; 0x27f
  400abc:	9a01      	ldr	r2, [sp, #4]
  400abe:	4613      	mov	r3, r2
  400ac0:	330a      	adds	r3, #10
  400ac2:	9300      	str	r3, [sp, #0]
  400ac4:	4690      	mov	r8, r2
  400ac6:	2407      	movs	r4, #7
  400ac8:	4637      	mov	r7, r6
  400aca:	eb0b 0a04 	add.w	sl, fp, r4
  400ace:	463d      	mov	r5, r7
		/**
		 * Draw pixel on screen depending on the corresponding bit value
		 * from the charset
		 */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
  400ad0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  400ad4:	4123      	asrs	r3, r4
  400ad6:	f013 0f01 	tst.w	r3, #1
  400ada:	d003      	beq.n	400ae4 <ili93xx_draw_string+0x5c>
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
  400adc:	4640      	mov	r0, r8
  400ade:	ebc4 010a 	rsb	r1, r4, sl
  400ae2:	47c8      	blx	r9
  400ae4:	3c01      	subs	r4, #1

		/**
		 * Draw pixel on screen depending on the corresponding bit value
		 * from the charset
		 */
		for (row = 0; row < 8; row++) {
  400ae6:	f1b4 3fff 	cmp.w	r4, #4294967295
  400aea:	d1f0      	bne.n	400ace <ili93xx_draw_string+0x46>
  400aec:	2407      	movs	r4, #7
  400aee:	f10b 070f 	add.w	r7, fp, #15
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
  400af2:	782b      	ldrb	r3, [r5, #0]
  400af4:	4123      	asrs	r3, r4
  400af6:	f013 0f01 	tst.w	r3, #1
  400afa:	d002      	beq.n	400b02 <ili93xx_draw_string+0x7a>
				ili93xx_draw_pixel(ul_x + col, ul_y + row + 8);
  400afc:	4640      	mov	r0, r8
  400afe:	1b39      	subs	r1, r7, r4
  400b00:	47c8      	blx	r9
  400b02:	3c01      	subs	r4, #1
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
  400b04:	2c01      	cmp	r4, #1
  400b06:	d1f4      	bne.n	400af2 <ili93xx_draw_string+0x6a>
  400b08:	3602      	adds	r6, #2
  400b0a:	f108 0801 	add.w	r8, r8, #1
	 * Compute offset according of the specified ASCII character
	 *  Note: the first 32 characters of the ASCII table are not handled
	 */
	offset = ((uint32_t)uc_c - 0x20) * 20;

	for (col = 0; col < 10; col++) {
  400b0e:	9b00      	ldr	r3, [sp, #0]
  400b10:	4598      	cmp	r8, r3
  400b12:	d1d8      	bne.n	400ac6 <ili93xx_draw_string+0x3e>
			/**
			 * Draw the character and place cursor right after (font
			 * width + 2)
			 */
			ili93xx_draw_char(ul_x, ul_y, *p_str);
			ul_x += gfont.width + 2;
  400b14:	9b01      	ldr	r3, [sp, #4]
  400b16:	330c      	adds	r3, #12
  400b18:	9301      	str	r3, [sp, #4]
 */
void ili93xx_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  400b1a:	9a02      	ldr	r2, [sp, #8]
  400b1c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  400b20:	9202      	str	r2, [sp, #8]
  400b22:	2b00      	cmp	r3, #0
  400b24:	d1bc      	bne.n	400aa0 <ili93xx_draw_string+0x18>
			ul_x += gfont.width + 2;
		}

		p_str++;
	}
}
  400b26:	b005      	add	sp, #20
  400b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400b2c:	0040251c 	.word	0x0040251c
  400b30:	00400949 	.word	0x00400949

00400b34 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
  400b34:	0109      	lsls	r1, r1, #4
  400b36:	5042      	str	r2, [r0, r1]
  400b38:	4770      	bx	lr
  400b3a:	bf00      	nop

00400b3c <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
  400b3c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  400b40:	604a      	str	r2, [r1, #4]
  400b42:	4770      	bx	lr

00400b44 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
  400b44:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  400b48:	608a      	str	r2, [r1, #8]
  400b4a:	4770      	bx	lr

00400b4c <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
  400b4c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  400b50:	60ca      	str	r2, [r1, #12]
  400b52:	4770      	bx	lr

00400b54 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400b54:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400b56:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400b5a:	d02f      	beq.n	400bbc <pio_set_peripheral+0x68>
  400b5c:	d807      	bhi.n	400b6e <pio_set_peripheral+0x1a>
  400b5e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400b62:	d014      	beq.n	400b8e <pio_set_peripheral+0x3a>
  400b64:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400b68:	d01e      	beq.n	400ba8 <pio_set_peripheral+0x54>
  400b6a:	b939      	cbnz	r1, 400b7c <pio_set_peripheral+0x28>
  400b6c:	4770      	bx	lr
  400b6e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400b72:	d037      	beq.n	400be4 <pio_set_peripheral+0x90>
  400b74:	d804      	bhi.n	400b80 <pio_set_peripheral+0x2c>
  400b76:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400b7a:	d029      	beq.n	400bd0 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400b7c:	6042      	str	r2, [r0, #4]
  400b7e:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400b80:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400b84:	d02e      	beq.n	400be4 <pio_set_peripheral+0x90>
  400b86:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400b8a:	d02b      	beq.n	400be4 <pio_set_peripheral+0x90>
  400b8c:	e7f6      	b.n	400b7c <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400b8e:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400b90:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400b92:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400b94:	43d3      	mvns	r3, r2
  400b96:	4021      	ands	r1, r4
  400b98:	4019      	ands	r1, r3
  400b9a:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400b9c:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400b9e:	6f44      	ldr	r4, [r0, #116]	; 0x74
  400ba0:	4021      	ands	r1, r4
  400ba2:	400b      	ands	r3, r1
  400ba4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400ba6:	e01a      	b.n	400bde <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400ba8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400baa:	4313      	orrs	r3, r2
  400bac:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400bae:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400bb0:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400bb2:	400b      	ands	r3, r1
  400bb4:	ea23 0302 	bic.w	r3, r3, r2
  400bb8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400bba:	e7df      	b.n	400b7c <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400bbc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400bbe:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400bc0:	400b      	ands	r3, r1
  400bc2:	ea23 0302 	bic.w	r3, r3, r2
  400bc6:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400bc8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400bca:	4313      	orrs	r3, r2
  400bcc:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400bce:	e7d5      	b.n	400b7c <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400bd0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400bd2:	4313      	orrs	r3, r2
  400bd4:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400bd6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400bd8:	4313      	orrs	r3, r2
  400bda:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400bdc:	e7ce      	b.n	400b7c <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400bde:	6042      	str	r2, [r0, #4]
}
  400be0:	f85d 4b04 	ldr.w	r4, [sp], #4
  400be4:	4770      	bx	lr
  400be6:	bf00      	nop

00400be8 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400be8:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400bea:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400bee:	bf14      	ite	ne
  400bf0:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400bf2:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400bf4:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400bf8:	bf14      	ite	ne
  400bfa:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400bfc:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400bfe:	f012 0f02 	tst.w	r2, #2
  400c02:	d002      	beq.n	400c0a <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  400c04:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400c08:	e004      	b.n	400c14 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400c0a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400c0e:	bf18      	it	ne
  400c10:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400c14:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400c16:	6001      	str	r1, [r0, #0]
  400c18:	4770      	bx	lr
  400c1a:	bf00      	nop

00400c1c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400c1c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400c1e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400c20:	9c01      	ldr	r4, [sp, #4]
  400c22:	b10c      	cbz	r4, 400c28 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  400c24:	6641      	str	r1, [r0, #100]	; 0x64
  400c26:	e000      	b.n	400c2a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400c28:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400c2a:	b10b      	cbz	r3, 400c30 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  400c2c:	6501      	str	r1, [r0, #80]	; 0x50
  400c2e:	e000      	b.n	400c32 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400c30:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400c32:	b10a      	cbz	r2, 400c38 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  400c34:	6301      	str	r1, [r0, #48]	; 0x30
  400c36:	e000      	b.n	400c3a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400c38:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400c3a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400c3c:	6001      	str	r1, [r0, #0]
}
  400c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400c42:	4770      	bx	lr

00400c44 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400c44:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400c46:	4770      	bx	lr

00400c48 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400c48:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400c4a:	4770      	bx	lr

00400c4c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400c4c:	b570      	push	{r4, r5, r6, lr}
  400c4e:	b082      	sub	sp, #8
  400c50:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400c52:	0943      	lsrs	r3, r0, #5
  400c54:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400c58:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400c5c:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400c5e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  400c62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400c66:	d047      	beq.n	400cf8 <pio_configure_pin+0xac>
  400c68:	d809      	bhi.n	400c7e <pio_configure_pin+0x32>
  400c6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400c6e:	d021      	beq.n	400cb4 <pio_configure_pin+0x68>
  400c70:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400c74:	d02f      	beq.n	400cd6 <pio_configure_pin+0x8a>
  400c76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400c7a:	d16f      	bne.n	400d5c <pio_configure_pin+0x110>
  400c7c:	e009      	b.n	400c92 <pio_configure_pin+0x46>
  400c7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400c82:	d055      	beq.n	400d30 <pio_configure_pin+0xe4>
  400c84:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400c88:	d052      	beq.n	400d30 <pio_configure_pin+0xe4>
  400c8a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400c8e:	d044      	beq.n	400d1a <pio_configure_pin+0xce>
  400c90:	e064      	b.n	400d5c <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400c92:	f000 001f 	and.w	r0, r0, #31
  400c96:	2601      	movs	r6, #1
  400c98:	4086      	lsls	r6, r0
  400c9a:	4620      	mov	r0, r4
  400c9c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ca0:	4632      	mov	r2, r6
  400ca2:	4b30      	ldr	r3, [pc, #192]	; (400d64 <pio_configure_pin+0x118>)
  400ca4:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400ca6:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400caa:	bf14      	ite	ne
  400cac:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400cae:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400cb0:	2001      	movs	r0, #1
  400cb2:	e054      	b.n	400d5e <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400cb4:	f000 001f 	and.w	r0, r0, #31
  400cb8:	2601      	movs	r6, #1
  400cba:	4086      	lsls	r6, r0
  400cbc:	4620      	mov	r0, r4
  400cbe:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400cc2:	4632      	mov	r2, r6
  400cc4:	4b27      	ldr	r3, [pc, #156]	; (400d64 <pio_configure_pin+0x118>)
  400cc6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400cc8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400ccc:	bf14      	ite	ne
  400cce:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400cd0:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400cd2:	2001      	movs	r0, #1
  400cd4:	e043      	b.n	400d5e <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400cd6:	f000 001f 	and.w	r0, r0, #31
  400cda:	2601      	movs	r6, #1
  400cdc:	4086      	lsls	r6, r0
  400cde:	4620      	mov	r0, r4
  400ce0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400ce4:	4632      	mov	r2, r6
  400ce6:	4b1f      	ldr	r3, [pc, #124]	; (400d64 <pio_configure_pin+0x118>)
  400ce8:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400cea:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400cee:	bf14      	ite	ne
  400cf0:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400cf2:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400cf4:	2001      	movs	r0, #1
  400cf6:	e032      	b.n	400d5e <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400cf8:	f000 001f 	and.w	r0, r0, #31
  400cfc:	2601      	movs	r6, #1
  400cfe:	4086      	lsls	r6, r0
  400d00:	4620      	mov	r0, r4
  400d02:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400d06:	4632      	mov	r2, r6
  400d08:	4b16      	ldr	r3, [pc, #88]	; (400d64 <pio_configure_pin+0x118>)
  400d0a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400d0c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400d10:	bf14      	ite	ne
  400d12:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400d14:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400d16:	2001      	movs	r0, #1
  400d18:	e021      	b.n	400d5e <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400d1a:	f000 031f 	and.w	r3, r0, #31
  400d1e:	2601      	movs	r6, #1
  400d20:	4620      	mov	r0, r4
  400d22:	fa06 f103 	lsl.w	r1, r6, r3
  400d26:	462a      	mov	r2, r5
  400d28:	4b0f      	ldr	r3, [pc, #60]	; (400d68 <pio_configure_pin+0x11c>)
  400d2a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400d2c:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  400d2e:	e016      	b.n	400d5e <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400d30:	f000 031f 	and.w	r3, r0, #31
  400d34:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400d36:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400d3a:	ea05 0106 	and.w	r1, r5, r6
  400d3e:	9100      	str	r1, [sp, #0]
  400d40:	4620      	mov	r0, r4
  400d42:	fa06 f103 	lsl.w	r1, r6, r3
  400d46:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400d4a:	bf14      	ite	ne
  400d4c:	2200      	movne	r2, #0
  400d4e:	2201      	moveq	r2, #1
  400d50:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400d54:	4c05      	ldr	r4, [pc, #20]	; (400d6c <pio_configure_pin+0x120>)
  400d56:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  400d58:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400d5a:	e000      	b.n	400d5e <pio_configure_pin+0x112>

	default:
		return 0;
  400d5c:	2000      	movs	r0, #0
	}

	return 1;
}
  400d5e:	b002      	add	sp, #8
  400d60:	bd70      	pop	{r4, r5, r6, pc}
  400d62:	bf00      	nop
  400d64:	00400b55 	.word	0x00400b55
  400d68:	00400be9 	.word	0x00400be9
  400d6c:	00400c1d 	.word	0x00400c1d

00400d70 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  400d70:	b570      	push	{r4, r5, r6, lr}
  400d72:	b082      	sub	sp, #8
  400d74:	4606      	mov	r6, r0
  400d76:	460d      	mov	r5, r1
  400d78:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400d7a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  400d7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400d82:	d038      	beq.n	400df6 <pio_configure_pin_group+0x86>
  400d84:	d809      	bhi.n	400d9a <pio_configure_pin_group+0x2a>
  400d86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400d8a:	d01c      	beq.n	400dc6 <pio_configure_pin_group+0x56>
  400d8c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400d90:	d025      	beq.n	400dde <pio_configure_pin_group+0x6e>
  400d92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400d96:	d150      	bne.n	400e3a <pio_configure_pin_group+0xca>
  400d98:	e009      	b.n	400dae <pio_configure_pin_group+0x3e>
  400d9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400d9e:	d03a      	beq.n	400e16 <pio_configure_pin_group+0xa6>
  400da0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400da4:	d037      	beq.n	400e16 <pio_configure_pin_group+0xa6>
  400da6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400daa:	d030      	beq.n	400e0e <pio_configure_pin_group+0x9e>
  400dac:	e045      	b.n	400e3a <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  400dae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400db2:	462a      	mov	r2, r5
  400db4:	4b22      	ldr	r3, [pc, #136]	; (400e40 <pio_configure_pin_group+0xd0>)
  400db6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400db8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400dbc:	bf14      	ite	ne
  400dbe:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400dc0:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400dc2:	2001      	movs	r0, #1
  400dc4:	e03a      	b.n	400e3c <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  400dc6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400dca:	462a      	mov	r2, r5
  400dcc:	4b1c      	ldr	r3, [pc, #112]	; (400e40 <pio_configure_pin_group+0xd0>)
  400dce:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400dd0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400dd4:	bf14      	ite	ne
  400dd6:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400dd8:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400dda:	2001      	movs	r0, #1
  400ddc:	e02e      	b.n	400e3c <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  400dde:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400de2:	462a      	mov	r2, r5
  400de4:	4b16      	ldr	r3, [pc, #88]	; (400e40 <pio_configure_pin_group+0xd0>)
  400de6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400de8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400dec:	bf14      	ite	ne
  400dee:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400df0:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400df2:	2001      	movs	r0, #1
  400df4:	e022      	b.n	400e3c <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  400df6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400dfa:	462a      	mov	r2, r5
  400dfc:	4b10      	ldr	r3, [pc, #64]	; (400e40 <pio_configure_pin_group+0xd0>)
  400dfe:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400e00:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400e04:	bf14      	ite	ne
  400e06:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400e08:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400e0a:	2001      	movs	r0, #1
  400e0c:	e016      	b.n	400e3c <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  400e0e:	4b0d      	ldr	r3, [pc, #52]	; (400e44 <pio_configure_pin_group+0xd4>)
  400e10:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400e12:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  400e14:	e012      	b.n	400e3c <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400e16:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  400e1a:	f004 0301 	and.w	r3, r4, #1
  400e1e:	9300      	str	r3, [sp, #0]
  400e20:	4630      	mov	r0, r6
  400e22:	4629      	mov	r1, r5
  400e24:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400e28:	bf14      	ite	ne
  400e2a:	2200      	movne	r2, #0
  400e2c:	2201      	moveq	r2, #1
  400e2e:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400e32:	4c05      	ldr	r4, [pc, #20]	; (400e48 <pio_configure_pin_group+0xd8>)
  400e34:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  400e36:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400e38:	e000      	b.n	400e3c <pio_configure_pin_group+0xcc>

	default:
		return 0;
  400e3a:	2000      	movs	r0, #0
	}

	return 1;
}
  400e3c:	b002      	add	sp, #8
  400e3e:	bd70      	pop	{r4, r5, r6, pc}
  400e40:	00400b55 	.word	0x00400b55
  400e44:	00400be9 	.word	0x00400be9
  400e48:	00400c1d 	.word	0x00400c1d

00400e4c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400e50:	4681      	mov	r9, r0
  400e52:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400e54:	4b12      	ldr	r3, [pc, #72]	; (400ea0 <pio_handler_process+0x54>)
  400e56:	4798      	blx	r3
  400e58:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400e5a:	4648      	mov	r0, r9
  400e5c:	4b11      	ldr	r3, [pc, #68]	; (400ea4 <pio_handler_process+0x58>)
  400e5e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400e60:	4005      	ands	r5, r0
  400e62:	d013      	beq.n	400e8c <pio_handler_process+0x40>
  400e64:	4c10      	ldr	r4, [pc, #64]	; (400ea8 <pio_handler_process+0x5c>)
  400e66:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400e6a:	6823      	ldr	r3, [r4, #0]
  400e6c:	4543      	cmp	r3, r8
  400e6e:	d108      	bne.n	400e82 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400e70:	6861      	ldr	r1, [r4, #4]
  400e72:	4229      	tst	r1, r5
  400e74:	d005      	beq.n	400e82 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400e76:	68e3      	ldr	r3, [r4, #12]
  400e78:	4640      	mov	r0, r8
  400e7a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400e7c:	6863      	ldr	r3, [r4, #4]
  400e7e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400e82:	42b4      	cmp	r4, r6
  400e84:	d002      	beq.n	400e8c <pio_handler_process+0x40>
  400e86:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400e88:	2d00      	cmp	r5, #0
  400e8a:	d1ee      	bne.n	400e6a <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400e8c:	4b07      	ldr	r3, [pc, #28]	; (400eac <pio_handler_process+0x60>)
  400e8e:	681b      	ldr	r3, [r3, #0]
  400e90:	b123      	cbz	r3, 400e9c <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400e92:	4b07      	ldr	r3, [pc, #28]	; (400eb0 <pio_handler_process+0x64>)
  400e94:	681b      	ldr	r3, [r3, #0]
  400e96:	b10b      	cbz	r3, 400e9c <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400e98:	4648      	mov	r0, r9
  400e9a:	4798      	blx	r3
  400e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400ea0:	00400c45 	.word	0x00400c45
  400ea4:	00400c49 	.word	0x00400c49
  400ea8:	20000c30 	.word	0x20000c30
  400eac:	20000ce4 	.word	0x20000ce4
  400eb0:	20000c2c 	.word	0x20000c2c

00400eb4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400eb4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400eb6:	4802      	ldr	r0, [pc, #8]	; (400ec0 <PIOA_Handler+0xc>)
  400eb8:	210b      	movs	r1, #11
  400eba:	4b02      	ldr	r3, [pc, #8]	; (400ec4 <PIOA_Handler+0x10>)
  400ebc:	4798      	blx	r3
  400ebe:	bd08      	pop	{r3, pc}
  400ec0:	400e0e00 	.word	0x400e0e00
  400ec4:	00400e4d 	.word	0x00400e4d

00400ec8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400ec8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400eca:	4802      	ldr	r0, [pc, #8]	; (400ed4 <PIOB_Handler+0xc>)
  400ecc:	210c      	movs	r1, #12
  400ece:	4b02      	ldr	r3, [pc, #8]	; (400ed8 <PIOB_Handler+0x10>)
  400ed0:	4798      	blx	r3
  400ed2:	bd08      	pop	{r3, pc}
  400ed4:	400e1000 	.word	0x400e1000
  400ed8:	00400e4d 	.word	0x00400e4d

00400edc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400edc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400ede:	4802      	ldr	r0, [pc, #8]	; (400ee8 <PIOC_Handler+0xc>)
  400ee0:	210d      	movs	r1, #13
  400ee2:	4b02      	ldr	r3, [pc, #8]	; (400eec <PIOC_Handler+0x10>)
  400ee4:	4798      	blx	r3
  400ee6:	bd08      	pop	{r3, pc}
  400ee8:	400e1200 	.word	0x400e1200
  400eec:	00400e4d 	.word	0x00400e4d

00400ef0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400ef0:	4a18      	ldr	r2, [pc, #96]	; (400f54 <pmc_switch_mck_to_pllack+0x64>)
  400ef2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400ef8:	4318      	orrs	r0, r3
  400efa:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400efc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400efe:	f013 0f08 	tst.w	r3, #8
  400f02:	d003      	beq.n	400f0c <pmc_switch_mck_to_pllack+0x1c>
  400f04:	e009      	b.n	400f1a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400f06:	3b01      	subs	r3, #1
  400f08:	d103      	bne.n	400f12 <pmc_switch_mck_to_pllack+0x22>
  400f0a:	e01e      	b.n	400f4a <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400f10:	4910      	ldr	r1, [pc, #64]	; (400f54 <pmc_switch_mck_to_pllack+0x64>)
  400f12:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400f14:	f012 0f08 	tst.w	r2, #8
  400f18:	d0f5      	beq.n	400f06 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400f1a:	4a0e      	ldr	r2, [pc, #56]	; (400f54 <pmc_switch_mck_to_pllack+0x64>)
  400f1c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f1e:	f023 0303 	bic.w	r3, r3, #3
  400f22:	f043 0302 	orr.w	r3, r3, #2
  400f26:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f28:	6e90      	ldr	r0, [r2, #104]	; 0x68
  400f2a:	f010 0008 	ands.w	r0, r0, #8
  400f2e:	d004      	beq.n	400f3a <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400f30:	2000      	movs	r0, #0
  400f32:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  400f34:	3b01      	subs	r3, #1
  400f36:	d103      	bne.n	400f40 <pmc_switch_mck_to_pllack+0x50>
  400f38:	e009      	b.n	400f4e <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400f3e:	4905      	ldr	r1, [pc, #20]	; (400f54 <pmc_switch_mck_to_pllack+0x64>)
  400f40:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400f42:	f012 0f08 	tst.w	r2, #8
  400f46:	d0f5      	beq.n	400f34 <pmc_switch_mck_to_pllack+0x44>
  400f48:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400f4a:	2001      	movs	r0, #1
  400f4c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400f4e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400f50:	4770      	bx	lr
  400f52:	bf00      	nop
  400f54:	400e0400 	.word	0x400e0400

00400f58 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400f58:	b138      	cbz	r0, 400f6a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400f5a:	4911      	ldr	r1, [pc, #68]	; (400fa0 <pmc_switch_mainck_to_xtal+0x48>)
  400f5c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400f5e:	4a11      	ldr	r2, [pc, #68]	; (400fa4 <pmc_switch_mainck_to_xtal+0x4c>)
  400f60:	401a      	ands	r2, r3
  400f62:	4b11      	ldr	r3, [pc, #68]	; (400fa8 <pmc_switch_mainck_to_xtal+0x50>)
  400f64:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400f66:	620b      	str	r3, [r1, #32]
  400f68:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400f6a:	4a0d      	ldr	r2, [pc, #52]	; (400fa0 <pmc_switch_mainck_to_xtal+0x48>)
  400f6c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400f6e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400f72:	f023 0303 	bic.w	r3, r3, #3
  400f76:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400f7a:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400f7e:	0209      	lsls	r1, r1, #8
  400f80:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400f82:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400f84:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400f86:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f88:	f013 0f01 	tst.w	r3, #1
  400f8c:	d0fb      	beq.n	400f86 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400f8e:	4a04      	ldr	r2, [pc, #16]	; (400fa0 <pmc_switch_mainck_to_xtal+0x48>)
  400f90:	6a13      	ldr	r3, [r2, #32]
  400f92:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400f9a:	6213      	str	r3, [r2, #32]
  400f9c:	4770      	bx	lr
  400f9e:	bf00      	nop
  400fa0:	400e0400 	.word	0x400e0400
  400fa4:	fec8fffc 	.word	0xfec8fffc
  400fa8:	01370002 	.word	0x01370002

00400fac <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400fac:	4b02      	ldr	r3, [pc, #8]	; (400fb8 <pmc_osc_is_ready_mainck+0xc>)
  400fae:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400fb0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400fb4:	4770      	bx	lr
  400fb6:	bf00      	nop
  400fb8:	400e0400 	.word	0x400e0400

00400fbc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400fbc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400fc0:	4b01      	ldr	r3, [pc, #4]	; (400fc8 <pmc_disable_pllack+0xc>)
  400fc2:	629a      	str	r2, [r3, #40]	; 0x28
  400fc4:	4770      	bx	lr
  400fc6:	bf00      	nop
  400fc8:	400e0400 	.word	0x400e0400

00400fcc <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400fcc:	4b02      	ldr	r3, [pc, #8]	; (400fd8 <pmc_is_locked_pllack+0xc>)
  400fce:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400fd0:	f000 0002 	and.w	r0, r0, #2
  400fd4:	4770      	bx	lr
  400fd6:	bf00      	nop
  400fd8:	400e0400 	.word	0x400e0400

00400fdc <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400fdc:	2822      	cmp	r0, #34	; 0x22
  400fde:	d81e      	bhi.n	40101e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400fe0:	281f      	cmp	r0, #31
  400fe2:	d80c      	bhi.n	400ffe <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400fe4:	4b11      	ldr	r3, [pc, #68]	; (40102c <pmc_enable_periph_clk+0x50>)
  400fe6:	699a      	ldr	r2, [r3, #24]
  400fe8:	2301      	movs	r3, #1
  400fea:	4083      	lsls	r3, r0
  400fec:	401a      	ands	r2, r3
  400fee:	4293      	cmp	r3, r2
  400ff0:	d017      	beq.n	401022 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400ff2:	2301      	movs	r3, #1
  400ff4:	4083      	lsls	r3, r0
  400ff6:	4a0d      	ldr	r2, [pc, #52]	; (40102c <pmc_enable_periph_clk+0x50>)
  400ff8:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400ffa:	2000      	movs	r0, #0
  400ffc:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400ffe:	4b0b      	ldr	r3, [pc, #44]	; (40102c <pmc_enable_periph_clk+0x50>)
  401000:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401004:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401006:	2301      	movs	r3, #1
  401008:	4083      	lsls	r3, r0
  40100a:	401a      	ands	r2, r3
  40100c:	4293      	cmp	r3, r2
  40100e:	d00a      	beq.n	401026 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401010:	2301      	movs	r3, #1
  401012:	4083      	lsls	r3, r0
  401014:	4a05      	ldr	r2, [pc, #20]	; (40102c <pmc_enable_periph_clk+0x50>)
  401016:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  40101a:	2000      	movs	r0, #0
  40101c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  40101e:	2001      	movs	r0, #1
  401020:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401022:	2000      	movs	r0, #0
  401024:	4770      	bx	lr
  401026:	2000      	movs	r0, #0
}
  401028:	4770      	bx	lr
  40102a:	bf00      	nop
  40102c:	400e0400 	.word	0x400e0400

00401030 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401030:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  401032:	23ac      	movs	r3, #172	; 0xac
  401034:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401036:	680b      	ldr	r3, [r1, #0]
  401038:	684a      	ldr	r2, [r1, #4]
  40103a:	fbb3 f3f2 	udiv	r3, r3, r2
  40103e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  401040:	1e5c      	subs	r4, r3, #1
  401042:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  401046:	4294      	cmp	r4, r2
  401048:	d80a      	bhi.n	401060 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  40104a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  40104c:	688b      	ldr	r3, [r1, #8]
  40104e:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  401050:	f240 2302 	movw	r3, #514	; 0x202
  401054:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  401058:	2350      	movs	r3, #80	; 0x50
  40105a:	6003      	str	r3, [r0, #0]

	return 0;
  40105c:	2000      	movs	r0, #0
  40105e:	e000      	b.n	401062 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  401060:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  401062:	f85d 4b04 	ldr.w	r4, [sp], #4
  401066:	4770      	bx	lr

00401068 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401068:	6943      	ldr	r3, [r0, #20]
  40106a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40106e:	bf1a      	itte	ne
  401070:	61c1      	strne	r1, [r0, #28]
	return 0;
  401072:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  401074:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  401076:	4770      	bx	lr

00401078 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401078:	6943      	ldr	r3, [r0, #20]
  40107a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40107e:	bf1d      	ittte	ne
  401080:	6983      	ldrne	r3, [r0, #24]
  401082:	700b      	strbne	r3, [r1, #0]
	return 0;
  401084:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  401086:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  401088:	4770      	bx	lr
  40108a:	bf00      	nop

0040108c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40108c:	6943      	ldr	r3, [r0, #20]
  40108e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401092:	bf1d      	ittte	ne
  401094:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  401098:	61c1      	strne	r1, [r0, #28]
	return 0;
  40109a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  40109c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  40109e:	4770      	bx	lr

004010a0 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4010a0:	6943      	ldr	r3, [r0, #20]
  4010a2:	f013 0f01 	tst.w	r3, #1
  4010a6:	d005      	beq.n	4010b4 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4010a8:	6983      	ldr	r3, [r0, #24]
  4010aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4010ae:	600b      	str	r3, [r1, #0]

	return 0;
  4010b0:	2000      	movs	r0, #0
  4010b2:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  4010b4:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  4010b6:	4770      	bx	lr

004010b8 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
  4010b8:	e7fe      	b.n	4010b8 <Dummy_Handler>
  4010ba:	bf00      	nop

004010bc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4010bc:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  4010be:	4b20      	ldr	r3, [pc, #128]	; (401140 <Reset_Handler+0x84>)
  4010c0:	4a20      	ldr	r2, [pc, #128]	; (401144 <Reset_Handler+0x88>)
  4010c2:	429a      	cmp	r2, r3
  4010c4:	d913      	bls.n	4010ee <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  4010c6:	4b20      	ldr	r3, [pc, #128]	; (401148 <Reset_Handler+0x8c>)
  4010c8:	4a1d      	ldr	r2, [pc, #116]	; (401140 <Reset_Handler+0x84>)
  4010ca:	429a      	cmp	r2, r3
  4010cc:	d21f      	bcs.n	40110e <Reset_Handler+0x52>
  4010ce:	4611      	mov	r1, r2
  4010d0:	3204      	adds	r2, #4
  4010d2:	3303      	adds	r3, #3
  4010d4:	1a9b      	subs	r3, r3, r2
  4010d6:	f023 0303 	bic.w	r3, r3, #3
  4010da:	3304      	adds	r3, #4
  4010dc:	4a19      	ldr	r2, [pc, #100]	; (401144 <Reset_Handler+0x88>)
  4010de:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  4010e0:	f852 0b04 	ldr.w	r0, [r2], #4
  4010e4:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  4010e8:	429a      	cmp	r2, r3
  4010ea:	d1f9      	bne.n	4010e0 <Reset_Handler+0x24>
  4010ec:	e00f      	b.n	40110e <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  4010ee:	4b14      	ldr	r3, [pc, #80]	; (401140 <Reset_Handler+0x84>)
  4010f0:	4a14      	ldr	r2, [pc, #80]	; (401144 <Reset_Handler+0x88>)
  4010f2:	429a      	cmp	r2, r3
  4010f4:	d20b      	bcs.n	40110e <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4010f6:	4b14      	ldr	r3, [pc, #80]	; (401148 <Reset_Handler+0x8c>)
  4010f8:	4a11      	ldr	r2, [pc, #68]	; (401140 <Reset_Handler+0x84>)
  4010fa:	1a9a      	subs	r2, r3, r2
  4010fc:	4813      	ldr	r0, [pc, #76]	; (40114c <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4010fe:	1881      	adds	r1, r0, r2
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  401100:	b12a      	cbz	r2, 40110e <Reset_Handler+0x52>
			*pDest-- = *pSrc--;
  401102:	f851 2904 	ldr.w	r2, [r1], #-4
  401106:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  40110a:	4281      	cmp	r1, r0
  40110c:	d1f9      	bne.n	401102 <Reset_Handler+0x46>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40110e:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401110:	4b0f      	ldr	r3, [pc, #60]	; (401150 <Reset_Handler+0x94>)
  401112:	4a10      	ldr	r2, [pc, #64]	; (401154 <Reset_Handler+0x98>)
  401114:	429a      	cmp	r2, r3
  401116:	d20b      	bcs.n	401130 <Reset_Handler+0x74>
  401118:	1d13      	adds	r3, r2, #4
  40111a:	4a0f      	ldr	r2, [pc, #60]	; (401158 <Reset_Handler+0x9c>)
  40111c:	1ad2      	subs	r2, r2, r3
  40111e:	f022 0203 	bic.w	r2, r2, #3
  401122:	441a      	add	r2, r3
  401124:	3b04      	subs	r3, #4
		*pDest++ = 0;
  401126:	2100      	movs	r1, #0
  401128:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40112c:	4293      	cmp	r3, r2
  40112e:	d1fb      	bne.n	401128 <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  401130:	4b0a      	ldr	r3, [pc, #40]	; (40115c <Reset_Handler+0xa0>)
  401132:	4a0b      	ldr	r2, [pc, #44]	; (401160 <Reset_Handler+0xa4>)
  401134:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  401136:	4b0b      	ldr	r3, [pc, #44]	; (401164 <Reset_Handler+0xa8>)
  401138:	4798      	blx	r3

	/* Branch to main function */
	main();
  40113a:	4b0b      	ldr	r3, [pc, #44]	; (401168 <Reset_Handler+0xac>)
  40113c:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  40113e:	e7fe      	b.n	40113e <Reset_Handler+0x82>
  401140:	20000000 	.word	0x20000000
  401144:	00402ce0 	.word	0x00402ce0
  401148:	2000084c 	.word	0x2000084c
  40114c:	00402cdc 	.word	0x00402cdc
  401150:	20000d6c 	.word	0x20000d6c
  401154:	2000084c 	.word	0x2000084c
  401158:	20000d6f 	.word	0x20000d6f
  40115c:	e000ed00 	.word	0xe000ed00
  401160:	00400000 	.word	0x00400000
  401164:	00401605 	.word	0x00401605
  401168:	0040145d 	.word	0x0040145d

0040116c <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  40116c:	4b3d      	ldr	r3, [pc, #244]	; (401264 <SystemCoreClockUpdate+0xf8>)
  40116e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401170:	f003 0303 	and.w	r3, r3, #3
  401174:	2b03      	cmp	r3, #3
  401176:	d85d      	bhi.n	401234 <SystemCoreClockUpdate+0xc8>
  401178:	e8df f003 	tbb	[pc, r3]
  40117c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401180:	4b39      	ldr	r3, [pc, #228]	; (401268 <SystemCoreClockUpdate+0xfc>)
  401182:	695b      	ldr	r3, [r3, #20]
  401184:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401188:	bf14      	ite	ne
  40118a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40118e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401192:	4b36      	ldr	r3, [pc, #216]	; (40126c <SystemCoreClockUpdate+0x100>)
  401194:	601a      	str	r2, [r3, #0]
  401196:	e04d      	b.n	401234 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401198:	4b32      	ldr	r3, [pc, #200]	; (401264 <SystemCoreClockUpdate+0xf8>)
  40119a:	6a1b      	ldr	r3, [r3, #32]
  40119c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4011a0:	d003      	beq.n	4011aa <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4011a2:	4a33      	ldr	r2, [pc, #204]	; (401270 <SystemCoreClockUpdate+0x104>)
  4011a4:	4b31      	ldr	r3, [pc, #196]	; (40126c <SystemCoreClockUpdate+0x100>)
  4011a6:	601a      	str	r2, [r3, #0]
  4011a8:	e044      	b.n	401234 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4011aa:	4a32      	ldr	r2, [pc, #200]	; (401274 <SystemCoreClockUpdate+0x108>)
  4011ac:	4b2f      	ldr	r3, [pc, #188]	; (40126c <SystemCoreClockUpdate+0x100>)
  4011ae:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4011b0:	4b2c      	ldr	r3, [pc, #176]	; (401264 <SystemCoreClockUpdate+0xf8>)
  4011b2:	6a1b      	ldr	r3, [r3, #32]
  4011b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4011b8:	2b10      	cmp	r3, #16
  4011ba:	d002      	beq.n	4011c2 <SystemCoreClockUpdate+0x56>
  4011bc:	2b20      	cmp	r3, #32
  4011be:	d004      	beq.n	4011ca <SystemCoreClockUpdate+0x5e>
  4011c0:	e038      	b.n	401234 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4011c2:	4a2d      	ldr	r2, [pc, #180]	; (401278 <SystemCoreClockUpdate+0x10c>)
  4011c4:	4b29      	ldr	r3, [pc, #164]	; (40126c <SystemCoreClockUpdate+0x100>)
  4011c6:	601a      	str	r2, [r3, #0]
			break;
  4011c8:	e034      	b.n	401234 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4011ca:	4a29      	ldr	r2, [pc, #164]	; (401270 <SystemCoreClockUpdate+0x104>)
  4011cc:	4b27      	ldr	r3, [pc, #156]	; (40126c <SystemCoreClockUpdate+0x100>)
  4011ce:	601a      	str	r2, [r3, #0]
			break;
  4011d0:	e030      	b.n	401234 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4011d2:	4b24      	ldr	r3, [pc, #144]	; (401264 <SystemCoreClockUpdate+0xf8>)
  4011d4:	6a1b      	ldr	r3, [r3, #32]
  4011d6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4011da:	d003      	beq.n	4011e4 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  4011dc:	4a24      	ldr	r2, [pc, #144]	; (401270 <SystemCoreClockUpdate+0x104>)
  4011de:	4b23      	ldr	r3, [pc, #140]	; (40126c <SystemCoreClockUpdate+0x100>)
  4011e0:	601a      	str	r2, [r3, #0]
  4011e2:	e012      	b.n	40120a <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4011e4:	4a23      	ldr	r2, [pc, #140]	; (401274 <SystemCoreClockUpdate+0x108>)
  4011e6:	4b21      	ldr	r3, [pc, #132]	; (40126c <SystemCoreClockUpdate+0x100>)
  4011e8:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4011ea:	4b1e      	ldr	r3, [pc, #120]	; (401264 <SystemCoreClockUpdate+0xf8>)
  4011ec:	6a1b      	ldr	r3, [r3, #32]
  4011ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4011f2:	2b10      	cmp	r3, #16
  4011f4:	d002      	beq.n	4011fc <SystemCoreClockUpdate+0x90>
  4011f6:	2b20      	cmp	r3, #32
  4011f8:	d004      	beq.n	401204 <SystemCoreClockUpdate+0x98>
  4011fa:	e006      	b.n	40120a <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4011fc:	4a1e      	ldr	r2, [pc, #120]	; (401278 <SystemCoreClockUpdate+0x10c>)
  4011fe:	4b1b      	ldr	r3, [pc, #108]	; (40126c <SystemCoreClockUpdate+0x100>)
  401200:	601a      	str	r2, [r3, #0]
					break;
  401202:	e002      	b.n	40120a <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401204:	4a1a      	ldr	r2, [pc, #104]	; (401270 <SystemCoreClockUpdate+0x104>)
  401206:	4b19      	ldr	r3, [pc, #100]	; (40126c <SystemCoreClockUpdate+0x100>)
  401208:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40120a:	4b16      	ldr	r3, [pc, #88]	; (401264 <SystemCoreClockUpdate+0xf8>)
  40120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40120e:	f003 0303 	and.w	r3, r3, #3
  401212:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401214:	4a13      	ldr	r2, [pc, #76]	; (401264 <SystemCoreClockUpdate+0xf8>)
  401216:	bf07      	ittee	eq
  401218:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40121a:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40121c:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40121e:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  401220:	4812      	ldr	r0, [pc, #72]	; (40126c <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  401222:	f3c3 410a 	ubfx	r1, r3, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401226:	6803      	ldr	r3, [r0, #0]
  401228:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  40122c:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40122e:	fbb3 f3f2 	udiv	r3, r3, r2
  401232:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  401234:	4b0b      	ldr	r3, [pc, #44]	; (401264 <SystemCoreClockUpdate+0xf8>)
  401236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401238:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40123c:	2b70      	cmp	r3, #112	; 0x70
  40123e:	d107      	bne.n	401250 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  401240:	4a0a      	ldr	r2, [pc, #40]	; (40126c <SystemCoreClockUpdate+0x100>)
  401242:	6813      	ldr	r3, [r2, #0]
  401244:	490d      	ldr	r1, [pc, #52]	; (40127c <SystemCoreClockUpdate+0x110>)
  401246:	fba1 1303 	umull	r1, r3, r1, r3
  40124a:	085b      	lsrs	r3, r3, #1
  40124c:	6013      	str	r3, [r2, #0]
  40124e:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401250:	4b04      	ldr	r3, [pc, #16]	; (401264 <SystemCoreClockUpdate+0xf8>)
  401252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  401254:	4905      	ldr	r1, [pc, #20]	; (40126c <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401256:	f3c2 1202 	ubfx	r2, r2, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  40125a:	680b      	ldr	r3, [r1, #0]
  40125c:	40d3      	lsrs	r3, r2
  40125e:	600b      	str	r3, [r1, #0]
  401260:	4770      	bx	lr
  401262:	bf00      	nop
  401264:	400e0400 	.word	0x400e0400
  401268:	400e1410 	.word	0x400e1410
  40126c:	20000008 	.word	0x20000008
  401270:	00b71b00 	.word	0x00b71b00
  401274:	003d0900 	.word	0x003d0900
  401278:	007a1200 	.word	0x007a1200
  40127c:	aaaaaaab 	.word	0xaaaaaaab

00401280 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401280:	4b1a      	ldr	r3, [pc, #104]	; (4012ec <system_init_flash+0x6c>)
  401282:	4298      	cmp	r0, r3
  401284:	d807      	bhi.n	401296 <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401286:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  40128a:	4a19      	ldr	r2, [pc, #100]	; (4012f0 <system_init_flash+0x70>)
  40128c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40128e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401292:	6013      	str	r3, [r2, #0]
  401294:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  401296:	4b17      	ldr	r3, [pc, #92]	; (4012f4 <system_init_flash+0x74>)
  401298:	4298      	cmp	r0, r3
  40129a:	d806      	bhi.n	4012aa <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40129c:	4b16      	ldr	r3, [pc, #88]	; (4012f8 <system_init_flash+0x78>)
  40129e:	4a14      	ldr	r2, [pc, #80]	; (4012f0 <system_init_flash+0x70>)
  4012a0:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4012a2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4012a6:	6013      	str	r3, [r2, #0]
  4012a8:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  4012aa:	4b14      	ldr	r3, [pc, #80]	; (4012fc <system_init_flash+0x7c>)
  4012ac:	4298      	cmp	r0, r3
  4012ae:	d806      	bhi.n	4012be <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4012b0:	4b13      	ldr	r3, [pc, #76]	; (401300 <system_init_flash+0x80>)
  4012b2:	4a0f      	ldr	r2, [pc, #60]	; (4012f0 <system_init_flash+0x70>)
  4012b4:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4012b6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4012ba:	6013      	str	r3, [r2, #0]
  4012bc:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4012be:	4b11      	ldr	r3, [pc, #68]	; (401304 <system_init_flash+0x84>)
  4012c0:	4298      	cmp	r0, r3
  4012c2:	d806      	bhi.n	4012d2 <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4012c4:	4b10      	ldr	r3, [pc, #64]	; (401308 <system_init_flash+0x88>)
  4012c6:	4a0a      	ldr	r2, [pc, #40]	; (4012f0 <system_init_flash+0x70>)
  4012c8:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4012ca:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4012ce:	6013      	str	r3, [r2, #0]
  4012d0:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4012d2:	4b0e      	ldr	r3, [pc, #56]	; (40130c <system_init_flash+0x8c>)
  4012d4:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4012d6:	bf94      	ite	ls
  4012d8:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4012dc:	4b0c      	ldrhi	r3, [pc, #48]	; (401310 <system_init_flash+0x90>)
  4012de:	4a04      	ldr	r2, [pc, #16]	; (4012f0 <system_init_flash+0x70>)
  4012e0:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4012e2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4012e6:	6013      	str	r3, [r2, #0]
  4012e8:	4770      	bx	lr
  4012ea:	bf00      	nop
  4012ec:	01312cff 	.word	0x01312cff
  4012f0:	400e0a00 	.word	0x400e0a00
  4012f4:	026259ff 	.word	0x026259ff
  4012f8:	04000100 	.word	0x04000100
  4012fc:	039386ff 	.word	0x039386ff
  401300:	04000200 	.word	0x04000200
  401304:	04c4b3ff 	.word	0x04c4b3ff
  401308:	04000300 	.word	0x04000300
  40130c:	05f5e0ff 	.word	0x05f5e0ff
  401310:	04000500 	.word	0x04000500

00401314 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401314:	4b09      	ldr	r3, [pc, #36]	; (40133c <_sbrk+0x28>)
  401316:	681b      	ldr	r3, [r3, #0]
  401318:	b913      	cbnz	r3, 401320 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  40131a:	4a09      	ldr	r2, [pc, #36]	; (401340 <_sbrk+0x2c>)
  40131c:	4b07      	ldr	r3, [pc, #28]	; (40133c <_sbrk+0x28>)
  40131e:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401320:	4b06      	ldr	r3, [pc, #24]	; (40133c <_sbrk+0x28>)
  401322:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401324:	181a      	adds	r2, r3, r0
  401326:	4907      	ldr	r1, [pc, #28]	; (401344 <_sbrk+0x30>)
  401328:	4291      	cmp	r1, r2
  40132a:	db04      	blt.n	401336 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  40132c:	4610      	mov	r0, r2
  40132e:	4a03      	ldr	r2, [pc, #12]	; (40133c <_sbrk+0x28>)
  401330:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401332:	4618      	mov	r0, r3
  401334:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  401336:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  40133a:	4770      	bx	lr
  40133c:	20000ca0 	.word	0x20000ca0
  401340:	20003d70 	.word	0x20003d70
  401344:	20027ffc 	.word	0x20027ffc

00401348 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401348:	f04f 30ff 	mov.w	r0, #4294967295
  40134c:	4770      	bx	lr
  40134e:	bf00      	nop

00401350 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401350:	2000      	movs	r0, #0
  401352:	4770      	bx	lr

00401354 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401354:	b5f0      	push	{r4, r5, r6, r7, lr}
  401356:	b083      	sub	sp, #12
  401358:	4605      	mov	r5, r0
  40135a:	460c      	mov	r4, r1
	uint32_t val = 0;
  40135c:	2300      	movs	r3, #0
  40135e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401360:	4b18      	ldr	r3, [pc, #96]	; (4013c4 <usart_serial_getchar+0x70>)
  401362:	4298      	cmp	r0, r3
  401364:	d107      	bne.n	401376 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  401366:	461f      	mov	r7, r3
  401368:	4e17      	ldr	r6, [pc, #92]	; (4013c8 <usart_serial_getchar+0x74>)
  40136a:	4638      	mov	r0, r7
  40136c:	4621      	mov	r1, r4
  40136e:	47b0      	blx	r6
  401370:	2800      	cmp	r0, #0
  401372:	d1fa      	bne.n	40136a <usart_serial_getchar+0x16>
  401374:	e017      	b.n	4013a6 <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401376:	4b15      	ldr	r3, [pc, #84]	; (4013cc <usart_serial_getchar+0x78>)
  401378:	4298      	cmp	r0, r3
  40137a:	d107      	bne.n	40138c <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  40137c:	461e      	mov	r6, r3
  40137e:	4d12      	ldr	r5, [pc, #72]	; (4013c8 <usart_serial_getchar+0x74>)
  401380:	4630      	mov	r0, r6
  401382:	4621      	mov	r1, r4
  401384:	47a8      	blx	r5
  401386:	2800      	cmp	r0, #0
  401388:	d1fa      	bne.n	401380 <usart_serial_getchar+0x2c>
  40138a:	e018      	b.n	4013be <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40138c:	4b10      	ldr	r3, [pc, #64]	; (4013d0 <usart_serial_getchar+0x7c>)
  40138e:	4298      	cmp	r0, r3
  401390:	d109      	bne.n	4013a6 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  401392:	461e      	mov	r6, r3
  401394:	4d0f      	ldr	r5, [pc, #60]	; (4013d4 <usart_serial_getchar+0x80>)
  401396:	4630      	mov	r0, r6
  401398:	a901      	add	r1, sp, #4
  40139a:	47a8      	blx	r5
  40139c:	2800      	cmp	r0, #0
  40139e:	d1fa      	bne.n	401396 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
  4013a0:	9b01      	ldr	r3, [sp, #4]
  4013a2:	7023      	strb	r3, [r4, #0]
  4013a4:	e00b      	b.n	4013be <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4013a6:	4b0c      	ldr	r3, [pc, #48]	; (4013d8 <usart_serial_getchar+0x84>)
  4013a8:	429d      	cmp	r5, r3
  4013aa:	d108      	bne.n	4013be <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  4013ac:	461e      	mov	r6, r3
  4013ae:	4d09      	ldr	r5, [pc, #36]	; (4013d4 <usart_serial_getchar+0x80>)
  4013b0:	4630      	mov	r0, r6
  4013b2:	a901      	add	r1, sp, #4
  4013b4:	47a8      	blx	r5
  4013b6:	2800      	cmp	r0, #0
  4013b8:	d1fa      	bne.n	4013b0 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
  4013ba:	9b01      	ldr	r3, [sp, #4]
  4013bc:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4013be:	b003      	add	sp, #12
  4013c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4013c2:	bf00      	nop
  4013c4:	400e0600 	.word	0x400e0600
  4013c8:	00401079 	.word	0x00401079
  4013cc:	400e0800 	.word	0x400e0800
  4013d0:	40024000 	.word	0x40024000
  4013d4:	004010a1 	.word	0x004010a1
  4013d8:	40028000 	.word	0x40028000

004013dc <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  4013dc:	b570      	push	{r4, r5, r6, lr}
  4013de:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4013e0:	4b18      	ldr	r3, [pc, #96]	; (401444 <usart_serial_putchar+0x68>)
  4013e2:	4298      	cmp	r0, r3
  4013e4:	d108      	bne.n	4013f8 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  4013e6:	461e      	mov	r6, r3
  4013e8:	4d17      	ldr	r5, [pc, #92]	; (401448 <usart_serial_putchar+0x6c>)
  4013ea:	4630      	mov	r0, r6
  4013ec:	4621      	mov	r1, r4
  4013ee:	47a8      	blx	r5
  4013f0:	2800      	cmp	r0, #0
  4013f2:	d1fa      	bne.n	4013ea <usart_serial_putchar+0xe>
		return 1;
  4013f4:	2001      	movs	r0, #1
  4013f6:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4013f8:	4b14      	ldr	r3, [pc, #80]	; (40144c <usart_serial_putchar+0x70>)
  4013fa:	4298      	cmp	r0, r3
  4013fc:	d108      	bne.n	401410 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  4013fe:	461e      	mov	r6, r3
  401400:	4d11      	ldr	r5, [pc, #68]	; (401448 <usart_serial_putchar+0x6c>)
  401402:	4630      	mov	r0, r6
  401404:	4621      	mov	r1, r4
  401406:	47a8      	blx	r5
  401408:	2800      	cmp	r0, #0
  40140a:	d1fa      	bne.n	401402 <usart_serial_putchar+0x26>
		return 1;
  40140c:	2001      	movs	r0, #1
  40140e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401410:	4b0f      	ldr	r3, [pc, #60]	; (401450 <usart_serial_putchar+0x74>)
  401412:	4298      	cmp	r0, r3
  401414:	d108      	bne.n	401428 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  401416:	461e      	mov	r6, r3
  401418:	4d0e      	ldr	r5, [pc, #56]	; (401454 <usart_serial_putchar+0x78>)
  40141a:	4630      	mov	r0, r6
  40141c:	4621      	mov	r1, r4
  40141e:	47a8      	blx	r5
  401420:	2800      	cmp	r0, #0
  401422:	d1fa      	bne.n	40141a <usart_serial_putchar+0x3e>
		return 1;
  401424:	2001      	movs	r0, #1
  401426:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401428:	4b0b      	ldr	r3, [pc, #44]	; (401458 <usart_serial_putchar+0x7c>)
  40142a:	4298      	cmp	r0, r3
  40142c:	d108      	bne.n	401440 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  40142e:	461e      	mov	r6, r3
  401430:	4d08      	ldr	r5, [pc, #32]	; (401454 <usart_serial_putchar+0x78>)
  401432:	4630      	mov	r0, r6
  401434:	4621      	mov	r1, r4
  401436:	47a8      	blx	r5
  401438:	2800      	cmp	r0, #0
  40143a:	d1fa      	bne.n	401432 <usart_serial_putchar+0x56>
		return 1;
  40143c:	2001      	movs	r0, #1
  40143e:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  401440:	2000      	movs	r0, #0
}
  401442:	bd70      	pop	{r4, r5, r6, pc}
  401444:	400e0600 	.word	0x400e0600
  401448:	00401069 	.word	0x00401069
  40144c:	400e0800 	.word	0x400e0800
  401450:	40024000 	.word	0x40024000
  401454:	0040108d 	.word	0x0040108d
  401458:	40028000 	.word	0x40028000

0040145c <main>:
 * \brief Application entry point for smc_lcd example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  40145c:	b580      	push	{r7, lr}
  40145e:	b084      	sub	sp, #16
	sysclk_init();
  401460:	4b46      	ldr	r3, [pc, #280]	; (40157c <main+0x120>)
  401462:	4798      	blx	r3
	board_init();
  401464:	4b46      	ldr	r3, [pc, #280]	; (401580 <main+0x124>)
  401466:	4798      	blx	r3
  401468:	2008      	movs	r0, #8
  40146a:	4c46      	ldr	r4, [pc, #280]	; (401584 <main+0x128>)
  40146c:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40146e:	4d46      	ldr	r5, [pc, #280]	; (401588 <main+0x12c>)
  401470:	4b46      	ldr	r3, [pc, #280]	; (40158c <main+0x130>)
  401472:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  401474:	4a46      	ldr	r2, [pc, #280]	; (401590 <main+0x134>)
  401476:	4b47      	ldr	r3, [pc, #284]	; (401594 <main+0x138>)
  401478:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40147a:	4a47      	ldr	r2, [pc, #284]	; (401598 <main+0x13c>)
  40147c:	4b47      	ldr	r3, [pc, #284]	; (40159c <main+0x140>)
  40147e:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  401480:	4b47      	ldr	r3, [pc, #284]	; (4015a0 <main+0x144>)
  401482:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  401484:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  401488:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  40148a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40148e:	9303      	str	r3, [sp, #12]
  401490:	2008      	movs	r0, #8
  401492:	47a0      	blx	r4
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART0);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401494:	4628      	mov	r0, r5
  401496:	a901      	add	r1, sp, #4
  401498:	4b42      	ldr	r3, [pc, #264]	; (4015a4 <main+0x148>)
  40149a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40149c:	4e42      	ldr	r6, [pc, #264]	; (4015a8 <main+0x14c>)
  40149e:	6833      	ldr	r3, [r6, #0]
  4014a0:	6898      	ldr	r0, [r3, #8]
  4014a2:	2100      	movs	r1, #0
  4014a4:	4d41      	ldr	r5, [pc, #260]	; (4015ac <main+0x150>)
  4014a6:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4014a8:	6833      	ldr	r3, [r6, #0]
  4014aa:	6858      	ldr	r0, [r3, #4]
  4014ac:	2100      	movs	r1, #0
  4014ae:	47a8      	blx	r5

	/** Initialize debug console */
	configure_console();

	/** Enable peripheral clock */
	pmc_enable_periph_clk(ID_SMC);
  4014b0:	200a      	movs	r0, #10
  4014b2:	47a0      	blx	r4

	/** Configure SMC interface for Lcd */
	smc_set_setup_timing(SMC, ILI93XX_LCD_CS, SMC_SETUP_NWE_SETUP(2)
  4014b4:	4c3e      	ldr	r4, [pc, #248]	; (4015b0 <main+0x154>)
  4014b6:	4620      	mov	r0, r4
  4014b8:	2101      	movs	r1, #1
  4014ba:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
  4014be:	4b3d      	ldr	r3, [pc, #244]	; (4015b4 <main+0x158>)
  4014c0:	4798      	blx	r3
			| SMC_SETUP_NCS_WR_SETUP(2)
			| SMC_SETUP_NRD_SETUP(2)
			| SMC_SETUP_NCS_RD_SETUP(2));
	smc_set_pulse_timing(SMC, ILI93XX_LCD_CS, SMC_PULSE_NWE_PULSE(4)
  4014c2:	4620      	mov	r0, r4
  4014c4:	2101      	movs	r1, #1
  4014c6:	4a3c      	ldr	r2, [pc, #240]	; (4015b8 <main+0x15c>)
  4014c8:	4b3c      	ldr	r3, [pc, #240]	; (4015bc <main+0x160>)
  4014ca:	4798      	blx	r3
			| SMC_PULSE_NCS_WR_PULSE(4)
			| SMC_PULSE_NRD_PULSE(10)
			| SMC_PULSE_NCS_RD_PULSE(10));
	smc_set_cycle_timing(SMC, ILI93XX_LCD_CS, SMC_CYCLE_NWE_CYCLE(10)
  4014cc:	4620      	mov	r0, r4
  4014ce:	2101      	movs	r1, #1
  4014d0:	4a3b      	ldr	r2, [pc, #236]	; (4015c0 <main+0x164>)
  4014d2:	4b3c      	ldr	r3, [pc, #240]	; (4015c4 <main+0x168>)
  4014d4:	4798      	blx	r3
#if ((!defined(SAM4S)) && (!defined(SAM4E)))
	smc_set_mode(SMC, ILI93XX_LCD_CS, SMC_MODE_READ_MODE
			| SMC_MODE_WRITE_MODE
			| SMC_MODE_DBW_8_BIT);
#else
	smc_set_mode(SMC, ILI93XX_LCD_CS, SMC_MODE_READ_MODE
  4014d6:	4620      	mov	r0, r4
  4014d8:	2101      	movs	r1, #1
  4014da:	2203      	movs	r2, #3
  4014dc:	4b3a      	ldr	r3, [pc, #232]	; (4015c8 <main+0x16c>)
  4014de:	4798      	blx	r3
			| SMC_MODE_WRITE_MODE);
#endif
	/** Initialize display parameter */
	g_ili93xx_display_opt.ul_width = ILI93XX_LCD_WIDTH;
  4014e0:	4d3a      	ldr	r5, [pc, #232]	; (4015cc <main+0x170>)
  4014e2:	26f0      	movs	r6, #240	; 0xf0
  4014e4:	602e      	str	r6, [r5, #0]
	g_ili93xx_display_opt.ul_height = ILI93XX_LCD_HEIGHT;
  4014e6:	f44f 77a0 	mov.w	r7, #320	; 0x140
  4014ea:	606f      	str	r7, [r5, #4]
	g_ili93xx_display_opt.foreground_color = COLOR_BLACK;
  4014ec:	2400      	movs	r4, #0
  4014ee:	60ac      	str	r4, [r5, #8]
	g_ili93xx_display_opt.background_color = COLOR_WHITE;
  4014f0:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
  4014f4:	f8c5 800c 	str.w	r8, [r5, #12]

	/** Switch off backlight */
	aat31xx_disable_backlight();
  4014f8:	4b35      	ldr	r3, [pc, #212]	; (4015d0 <main+0x174>)
  4014fa:	4798      	blx	r3

	/** Initialize LCD */
	ili93xx_init(&g_ili93xx_display_opt);
  4014fc:	4628      	mov	r0, r5
  4014fe:	4b35      	ldr	r3, [pc, #212]	; (4015d4 <main+0x178>)
  401500:	4798      	blx	r3

	/** Set backlight level */
	aat31xx_set_backlight(AAT31XX_AVG_BACKLIGHT_LEVEL);
  401502:	2008      	movs	r0, #8
  401504:	4b34      	ldr	r3, [pc, #208]	; (4015d8 <main+0x17c>)
  401506:	4798      	blx	r3

	ili93xx_set_foreground_color(COLOR_WHITE);
  401508:	4640      	mov	r0, r8
  40150a:	4d34      	ldr	r5, [pc, #208]	; (4015dc <main+0x180>)
  40150c:	47a8      	blx	r5
	ili93xx_draw_filled_rectangle(0, 0, ILI93XX_LCD_WIDTH, ILI93XX_LCD_HEIGHT);
  40150e:	4620      	mov	r0, r4
  401510:	4621      	mov	r1, r4
  401512:	4632      	mov	r2, r6
  401514:	463b      	mov	r3, r7
  401516:	4f32      	ldr	r7, [pc, #200]	; (4015e0 <main+0x184>)
  401518:	47b8      	blx	r7
	ili93xx_set_foreground_color(COLOR_RED);
  40151a:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
  40151e:	47a8      	blx	r5
	ili93xx_draw_filled_rectangle(0, 85, ILI93XX_LCD_WIDTH,	95);
  401520:	4620      	mov	r0, r4
  401522:	2155      	movs	r1, #85	; 0x55
  401524:	4632      	mov	r2, r6
  401526:	235f      	movs	r3, #95	; 0x5f
  401528:	47b8      	blx	r7
	ili93xx_set_foreground_color(COLOR_GREEN);
  40152a:	f44f 407f 	mov.w	r0, #65280	; 0xff00
  40152e:	47a8      	blx	r5
	ili93xx_draw_filled_rectangle(0, 95, ILI93XX_LCD_WIDTH,	105);
  401530:	4620      	mov	r0, r4
  401532:	215f      	movs	r1, #95	; 0x5f
  401534:	4632      	mov	r2, r6
  401536:	2369      	movs	r3, #105	; 0x69
  401538:	47b8      	blx	r7
	/** Turn on LCD */
	ili93xx_display_on();
  40153a:	4b2a      	ldr	r3, [pc, #168]	; (4015e4 <main+0x188>)
  40153c:	4798      	blx	r3
	ili93xx_set_cursor_position(0, 0);
  40153e:	4620      	mov	r0, r4
  401540:	4621      	mov	r1, r4
  401542:	4b29      	ldr	r3, [pc, #164]	; (4015e8 <main+0x18c>)
  401544:	4798      	blx	r3

	/** Draw text, image and basic shapes on the LCD */
	/** cor */
	ili93xx_set_foreground_color(COLOR_BLACK);
  401546:	4620      	mov	r0, r4
  401548:	47a8      	blx	r5
	 /** escrito */
	ili93xx_draw_string(10, 20, (uint8_t *)"13 LCD");
  40154a:	200a      	movs	r0, #10
  40154c:	2114      	movs	r1, #20
  40154e:	4a27      	ldr	r2, [pc, #156]	; (4015ec <main+0x190>)
  401550:	4c27      	ldr	r4, [pc, #156]	; (4015f0 <main+0x194>)
  401552:	47a0      	blx	r4
	ili93xx_set_foreground_color(COLOR_BLUE);
  401554:	20ff      	movs	r0, #255	; 0xff
  401556:	47a8      	blx	r5
	ili93xx_draw_string(10, 45, (uint8_t *)"Adriana");
  401558:	200a      	movs	r0, #10
  40155a:	212d      	movs	r1, #45	; 0x2d
  40155c:	4a25      	ldr	r2, [pc, #148]	; (4015f4 <main+0x198>)
  40155e:	47a0      	blx	r4
	ili93xx_set_foreground_color(COLOR_BLUEVIOLET);
  401560:	4825      	ldr	r0, [pc, #148]	; (4015f8 <main+0x19c>)
  401562:	47a8      	blx	r5
	ili93xx_draw_string(10, 65, (uint8_t *)"Gabriel");
  401564:	200a      	movs	r0, #10
  401566:	2141      	movs	r1, #65	; 0x41
  401568:	4a24      	ldr	r2, [pc, #144]	; (4015fc <main+0x1a0>)
  40156a:	47a0      	blx	r4

	ili93xx_set_foreground_color(COLOR_RED);
  40156c:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
  401570:	47a8      	blx	r5
	ili93xx_draw_string(100, 100, (uint8_t *)str1);
  401572:	2064      	movs	r0, #100	; 0x64
  401574:	4601      	mov	r1, r0
  401576:	4a22      	ldr	r2, [pc, #136]	; (401600 <main+0x1a4>)
  401578:	47a0      	blx	r4
	ili93xx_set_foreground_color(COLOR_VIOLET);
	ili93xx_draw_line(0, 0, 240, 320);*/
	

	while (1) {
	}
  40157a:	e7fe      	b.n	40157a <main+0x11e>
  40157c:	00400129 	.word	0x00400129
  401580:	00400219 	.word	0x00400219
  401584:	00400fdd 	.word	0x00400fdd
  401588:	400e0600 	.word	0x400e0600
  40158c:	20000ce0 	.word	0x20000ce0
  401590:	004013dd 	.word	0x004013dd
  401594:	20000cdc 	.word	0x20000cdc
  401598:	00401355 	.word	0x00401355
  40159c:	20000cd8 	.word	0x20000cd8
  4015a0:	07270e00 	.word	0x07270e00
  4015a4:	00401031 	.word	0x00401031
  4015a8:	20000438 	.word	0x20000438
  4015ac:	004016f1 	.word	0x004016f1
  4015b0:	400e0000 	.word	0x400e0000
  4015b4:	00400b35 	.word	0x00400b35
  4015b8:	0a0a0404 	.word	0x0a0a0404
  4015bc:	00400b3d 	.word	0x00400b3d
  4015c0:	0016000a 	.word	0x0016000a
  4015c4:	00400b45 	.word	0x00400b45
  4015c8:	00400b4d 	.word	0x00400b4d
  4015cc:	20000cf0 	.word	0x20000cf0
  4015d0:	0040032d 	.word	0x0040032d
  4015d4:	00400665 	.word	0x00400665
  4015d8:	004002d1 	.word	0x004002d1
  4015dc:	00400585 	.word	0x00400585
  4015e0:	004009c5 	.word	0x004009c5
  4015e4:	00400551 	.word	0x00400551
  4015e8:	00400641 	.word	0x00400641
  4015ec:	00402c9c 	.word	0x00402c9c
  4015f0:	00400a89 	.word	0x00400a89
  4015f4:	00402ca4 	.word	0x00402ca4
  4015f8:	008a2be2 	.word	0x008a2be2
  4015fc:	00402cac 	.word	0x00402cac
  401600:	20000d00 	.word	0x20000d00

00401604 <__libc_init_array>:
  401604:	b570      	push	{r4, r5, r6, lr}
  401606:	4e0f      	ldr	r6, [pc, #60]	; (401644 <__libc_init_array+0x40>)
  401608:	4d0f      	ldr	r5, [pc, #60]	; (401648 <__libc_init_array+0x44>)
  40160a:	1b76      	subs	r6, r6, r5
  40160c:	10b6      	asrs	r6, r6, #2
  40160e:	bf18      	it	ne
  401610:	2400      	movne	r4, #0
  401612:	d005      	beq.n	401620 <__libc_init_array+0x1c>
  401614:	3401      	adds	r4, #1
  401616:	f855 3b04 	ldr.w	r3, [r5], #4
  40161a:	4798      	blx	r3
  40161c:	42a6      	cmp	r6, r4
  40161e:	d1f9      	bne.n	401614 <__libc_init_array+0x10>
  401620:	4e0a      	ldr	r6, [pc, #40]	; (40164c <__libc_init_array+0x48>)
  401622:	4d0b      	ldr	r5, [pc, #44]	; (401650 <__libc_init_array+0x4c>)
  401624:	1b76      	subs	r6, r6, r5
  401626:	f001 fb49 	bl	402cbc <_init>
  40162a:	10b6      	asrs	r6, r6, #2
  40162c:	bf18      	it	ne
  40162e:	2400      	movne	r4, #0
  401630:	d006      	beq.n	401640 <__libc_init_array+0x3c>
  401632:	3401      	adds	r4, #1
  401634:	f855 3b04 	ldr.w	r3, [r5], #4
  401638:	4798      	blx	r3
  40163a:	42a6      	cmp	r6, r4
  40163c:	d1f9      	bne.n	401632 <__libc_init_array+0x2e>
  40163e:	bd70      	pop	{r4, r5, r6, pc}
  401640:	bd70      	pop	{r4, r5, r6, pc}
  401642:	bf00      	nop
  401644:	00402cc8 	.word	0x00402cc8
  401648:	00402cc8 	.word	0x00402cc8
  40164c:	00402cd0 	.word	0x00402cd0
  401650:	00402cc8 	.word	0x00402cc8

00401654 <memset>:
  401654:	b470      	push	{r4, r5, r6}
  401656:	0784      	lsls	r4, r0, #30
  401658:	d046      	beq.n	4016e8 <memset+0x94>
  40165a:	1e54      	subs	r4, r2, #1
  40165c:	2a00      	cmp	r2, #0
  40165e:	d041      	beq.n	4016e4 <memset+0x90>
  401660:	b2cd      	uxtb	r5, r1
  401662:	4603      	mov	r3, r0
  401664:	e002      	b.n	40166c <memset+0x18>
  401666:	1e62      	subs	r2, r4, #1
  401668:	b3e4      	cbz	r4, 4016e4 <memset+0x90>
  40166a:	4614      	mov	r4, r2
  40166c:	f803 5b01 	strb.w	r5, [r3], #1
  401670:	079a      	lsls	r2, r3, #30
  401672:	d1f8      	bne.n	401666 <memset+0x12>
  401674:	2c03      	cmp	r4, #3
  401676:	d92e      	bls.n	4016d6 <memset+0x82>
  401678:	b2cd      	uxtb	r5, r1
  40167a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40167e:	2c0f      	cmp	r4, #15
  401680:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401684:	d919      	bls.n	4016ba <memset+0x66>
  401686:	f103 0210 	add.w	r2, r3, #16
  40168a:	4626      	mov	r6, r4
  40168c:	3e10      	subs	r6, #16
  40168e:	2e0f      	cmp	r6, #15
  401690:	f842 5c10 	str.w	r5, [r2, #-16]
  401694:	f842 5c0c 	str.w	r5, [r2, #-12]
  401698:	f842 5c08 	str.w	r5, [r2, #-8]
  40169c:	f842 5c04 	str.w	r5, [r2, #-4]
  4016a0:	f102 0210 	add.w	r2, r2, #16
  4016a4:	d8f2      	bhi.n	40168c <memset+0x38>
  4016a6:	f1a4 0210 	sub.w	r2, r4, #16
  4016aa:	f022 020f 	bic.w	r2, r2, #15
  4016ae:	f004 040f 	and.w	r4, r4, #15
  4016b2:	3210      	adds	r2, #16
  4016b4:	2c03      	cmp	r4, #3
  4016b6:	4413      	add	r3, r2
  4016b8:	d90d      	bls.n	4016d6 <memset+0x82>
  4016ba:	461e      	mov	r6, r3
  4016bc:	4622      	mov	r2, r4
  4016be:	3a04      	subs	r2, #4
  4016c0:	2a03      	cmp	r2, #3
  4016c2:	f846 5b04 	str.w	r5, [r6], #4
  4016c6:	d8fa      	bhi.n	4016be <memset+0x6a>
  4016c8:	1f22      	subs	r2, r4, #4
  4016ca:	f022 0203 	bic.w	r2, r2, #3
  4016ce:	3204      	adds	r2, #4
  4016d0:	4413      	add	r3, r2
  4016d2:	f004 0403 	and.w	r4, r4, #3
  4016d6:	b12c      	cbz	r4, 4016e4 <memset+0x90>
  4016d8:	b2c9      	uxtb	r1, r1
  4016da:	441c      	add	r4, r3
  4016dc:	f803 1b01 	strb.w	r1, [r3], #1
  4016e0:	42a3      	cmp	r3, r4
  4016e2:	d1fb      	bne.n	4016dc <memset+0x88>
  4016e4:	bc70      	pop	{r4, r5, r6}
  4016e6:	4770      	bx	lr
  4016e8:	4614      	mov	r4, r2
  4016ea:	4603      	mov	r3, r0
  4016ec:	e7c2      	b.n	401674 <memset+0x20>
  4016ee:	bf00      	nop

004016f0 <setbuf>:
  4016f0:	2900      	cmp	r1, #0
  4016f2:	bf0c      	ite	eq
  4016f4:	2202      	moveq	r2, #2
  4016f6:	2200      	movne	r2, #0
  4016f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4016fc:	f000 b800 	b.w	401700 <setvbuf>

00401700 <setvbuf>:
  401700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401704:	4c3a      	ldr	r4, [pc, #232]	; (4017f0 <setvbuf+0xf0>)
  401706:	6826      	ldr	r6, [r4, #0]
  401708:	460d      	mov	r5, r1
  40170a:	4604      	mov	r4, r0
  40170c:	4690      	mov	r8, r2
  40170e:	461f      	mov	r7, r3
  401710:	b116      	cbz	r6, 401718 <setvbuf+0x18>
  401712:	6bb3      	ldr	r3, [r6, #56]	; 0x38
  401714:	2b00      	cmp	r3, #0
  401716:	d03c      	beq.n	401792 <setvbuf+0x92>
  401718:	f1b8 0f02 	cmp.w	r8, #2
  40171c:	d82f      	bhi.n	40177e <setvbuf+0x7e>
  40171e:	2f00      	cmp	r7, #0
  401720:	db2d      	blt.n	40177e <setvbuf+0x7e>
  401722:	4621      	mov	r1, r4
  401724:	4630      	mov	r0, r6
  401726:	f000 f921 	bl	40196c <_fflush_r>
  40172a:	89a1      	ldrh	r1, [r4, #12]
  40172c:	2300      	movs	r3, #0
  40172e:	6063      	str	r3, [r4, #4]
  401730:	61a3      	str	r3, [r4, #24]
  401732:	060b      	lsls	r3, r1, #24
  401734:	d427      	bmi.n	401786 <setvbuf+0x86>
  401736:	f021 0183 	bic.w	r1, r1, #131	; 0x83
  40173a:	b289      	uxth	r1, r1
  40173c:	f1b8 0f02 	cmp.w	r8, #2
  401740:	81a1      	strh	r1, [r4, #12]
  401742:	d02a      	beq.n	40179a <setvbuf+0x9a>
  401744:	2d00      	cmp	r5, #0
  401746:	d036      	beq.n	4017b6 <setvbuf+0xb6>
  401748:	f1b8 0f01 	cmp.w	r8, #1
  40174c:	d011      	beq.n	401772 <setvbuf+0x72>
  40174e:	b289      	uxth	r1, r1
  401750:	f001 0008 	and.w	r0, r1, #8
  401754:	4b27      	ldr	r3, [pc, #156]	; (4017f4 <setvbuf+0xf4>)
  401756:	63f3      	str	r3, [r6, #60]	; 0x3c
  401758:	b280      	uxth	r0, r0
  40175a:	6025      	str	r5, [r4, #0]
  40175c:	6125      	str	r5, [r4, #16]
  40175e:	6167      	str	r7, [r4, #20]
  401760:	b178      	cbz	r0, 401782 <setvbuf+0x82>
  401762:	f011 0f03 	tst.w	r1, #3
  401766:	bf18      	it	ne
  401768:	2700      	movne	r7, #0
  40176a:	60a7      	str	r7, [r4, #8]
  40176c:	2000      	movs	r0, #0
  40176e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401772:	f041 0101 	orr.w	r1, r1, #1
  401776:	427b      	negs	r3, r7
  401778:	81a1      	strh	r1, [r4, #12]
  40177a:	61a3      	str	r3, [r4, #24]
  40177c:	e7e7      	b.n	40174e <setvbuf+0x4e>
  40177e:	f04f 30ff 	mov.w	r0, #4294967295
  401782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401786:	6921      	ldr	r1, [r4, #16]
  401788:	4630      	mov	r0, r6
  40178a:	f000 f9f1 	bl	401b70 <_free_r>
  40178e:	89a1      	ldrh	r1, [r4, #12]
  401790:	e7d1      	b.n	401736 <setvbuf+0x36>
  401792:	4630      	mov	r0, r6
  401794:	f000 f97e 	bl	401a94 <__sinit>
  401798:	e7be      	b.n	401718 <setvbuf+0x18>
  40179a:	2000      	movs	r0, #0
  40179c:	f104 0343 	add.w	r3, r4, #67	; 0x43
  4017a0:	f041 0102 	orr.w	r1, r1, #2
  4017a4:	2500      	movs	r5, #0
  4017a6:	2201      	movs	r2, #1
  4017a8:	81a1      	strh	r1, [r4, #12]
  4017aa:	60a5      	str	r5, [r4, #8]
  4017ac:	6023      	str	r3, [r4, #0]
  4017ae:	6123      	str	r3, [r4, #16]
  4017b0:	6162      	str	r2, [r4, #20]
  4017b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4017b6:	2f00      	cmp	r7, #0
  4017b8:	bf08      	it	eq
  4017ba:	f44f 6780 	moveq.w	r7, #1024	; 0x400
  4017be:	4638      	mov	r0, r7
  4017c0:	f000 fad8 	bl	401d74 <malloc>
  4017c4:	4605      	mov	r5, r0
  4017c6:	b128      	cbz	r0, 4017d4 <setvbuf+0xd4>
  4017c8:	89a1      	ldrh	r1, [r4, #12]
  4017ca:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  4017ce:	b289      	uxth	r1, r1
  4017d0:	81a1      	strh	r1, [r4, #12]
  4017d2:	e7b9      	b.n	401748 <setvbuf+0x48>
  4017d4:	f44f 6080 	mov.w	r0, #1024	; 0x400
  4017d8:	f000 facc 	bl	401d74 <malloc>
  4017dc:	4605      	mov	r5, r0
  4017de:	b918      	cbnz	r0, 4017e8 <setvbuf+0xe8>
  4017e0:	89a1      	ldrh	r1, [r4, #12]
  4017e2:	f04f 30ff 	mov.w	r0, #4294967295
  4017e6:	e7d9      	b.n	40179c <setvbuf+0x9c>
  4017e8:	f44f 6780 	mov.w	r7, #1024	; 0x400
  4017ec:	e7ec      	b.n	4017c8 <setvbuf+0xc8>
  4017ee:	bf00      	nop
  4017f0:	20000438 	.word	0x20000438
  4017f4:	00401999 	.word	0x00401999

004017f8 <register_fini>:
  4017f8:	4b02      	ldr	r3, [pc, #8]	; (401804 <register_fini+0xc>)
  4017fa:	b113      	cbz	r3, 401802 <register_fini+0xa>
  4017fc:	4802      	ldr	r0, [pc, #8]	; (401808 <register_fini+0x10>)
  4017fe:	f000 b805 	b.w	40180c <atexit>
  401802:	4770      	bx	lr
  401804:	00000000 	.word	0x00000000
  401808:	00401aa9 	.word	0x00401aa9

0040180c <atexit>:
  40180c:	4601      	mov	r1, r0
  40180e:	2000      	movs	r0, #0
  401810:	4602      	mov	r2, r0
  401812:	4603      	mov	r3, r0
  401814:	f000 bdb4 	b.w	402380 <__register_exitproc>

00401818 <__sflush_r>:
  401818:	898b      	ldrh	r3, [r1, #12]
  40181a:	b29a      	uxth	r2, r3
  40181c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401820:	460d      	mov	r5, r1
  401822:	0711      	lsls	r1, r2, #28
  401824:	4680      	mov	r8, r0
  401826:	d43c      	bmi.n	4018a2 <__sflush_r+0x8a>
  401828:	686a      	ldr	r2, [r5, #4]
  40182a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40182e:	2a00      	cmp	r2, #0
  401830:	81ab      	strh	r3, [r5, #12]
  401832:	dd65      	ble.n	401900 <__sflush_r+0xe8>
  401834:	6aae      	ldr	r6, [r5, #40]	; 0x28
  401836:	2e00      	cmp	r6, #0
  401838:	d04b      	beq.n	4018d2 <__sflush_r+0xba>
  40183a:	b29b      	uxth	r3, r3
  40183c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  401840:	2100      	movs	r1, #0
  401842:	b292      	uxth	r2, r2
  401844:	f8d8 4000 	ldr.w	r4, [r8]
  401848:	f8c8 1000 	str.w	r1, [r8]
  40184c:	2a00      	cmp	r2, #0
  40184e:	d05b      	beq.n	401908 <__sflush_r+0xf0>
  401850:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  401852:	075f      	lsls	r7, r3, #29
  401854:	d505      	bpl.n	401862 <__sflush_r+0x4a>
  401856:	6869      	ldr	r1, [r5, #4]
  401858:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40185a:	1a52      	subs	r2, r2, r1
  40185c:	b10b      	cbz	r3, 401862 <__sflush_r+0x4a>
  40185e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  401860:	1ad2      	subs	r2, r2, r3
  401862:	4640      	mov	r0, r8
  401864:	69e9      	ldr	r1, [r5, #28]
  401866:	2300      	movs	r3, #0
  401868:	47b0      	blx	r6
  40186a:	1c46      	adds	r6, r0, #1
  40186c:	d056      	beq.n	40191c <__sflush_r+0x104>
  40186e:	89ab      	ldrh	r3, [r5, #12]
  401870:	692a      	ldr	r2, [r5, #16]
  401872:	602a      	str	r2, [r5, #0]
  401874:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  401878:	b29b      	uxth	r3, r3
  40187a:	2200      	movs	r2, #0
  40187c:	606a      	str	r2, [r5, #4]
  40187e:	04da      	lsls	r2, r3, #19
  401880:	81ab      	strh	r3, [r5, #12]
  401882:	d43b      	bmi.n	4018fc <__sflush_r+0xe4>
  401884:	6b29      	ldr	r1, [r5, #48]	; 0x30
  401886:	f8c8 4000 	str.w	r4, [r8]
  40188a:	b311      	cbz	r1, 4018d2 <__sflush_r+0xba>
  40188c:	f105 0340 	add.w	r3, r5, #64	; 0x40
  401890:	4299      	cmp	r1, r3
  401892:	d002      	beq.n	40189a <__sflush_r+0x82>
  401894:	4640      	mov	r0, r8
  401896:	f000 f96b 	bl	401b70 <_free_r>
  40189a:	2000      	movs	r0, #0
  40189c:	6328      	str	r0, [r5, #48]	; 0x30
  40189e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4018a2:	692e      	ldr	r6, [r5, #16]
  4018a4:	b1ae      	cbz	r6, 4018d2 <__sflush_r+0xba>
  4018a6:	682c      	ldr	r4, [r5, #0]
  4018a8:	602e      	str	r6, [r5, #0]
  4018aa:	0791      	lsls	r1, r2, #30
  4018ac:	bf0c      	ite	eq
  4018ae:	696b      	ldreq	r3, [r5, #20]
  4018b0:	2300      	movne	r3, #0
  4018b2:	1ba4      	subs	r4, r4, r6
  4018b4:	60ab      	str	r3, [r5, #8]
  4018b6:	e00a      	b.n	4018ce <__sflush_r+0xb6>
  4018b8:	4632      	mov	r2, r6
  4018ba:	4623      	mov	r3, r4
  4018bc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4018be:	69e9      	ldr	r1, [r5, #28]
  4018c0:	4640      	mov	r0, r8
  4018c2:	47b8      	blx	r7
  4018c4:	2800      	cmp	r0, #0
  4018c6:	eba4 0400 	sub.w	r4, r4, r0
  4018ca:	4406      	add	r6, r0
  4018cc:	dd04      	ble.n	4018d8 <__sflush_r+0xc0>
  4018ce:	2c00      	cmp	r4, #0
  4018d0:	dcf2      	bgt.n	4018b8 <__sflush_r+0xa0>
  4018d2:	2000      	movs	r0, #0
  4018d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4018d8:	89ab      	ldrh	r3, [r5, #12]
  4018da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4018de:	81ab      	strh	r3, [r5, #12]
  4018e0:	f04f 30ff 	mov.w	r0, #4294967295
  4018e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4018e8:	89ab      	ldrh	r3, [r5, #12]
  4018ea:	692a      	ldr	r2, [r5, #16]
  4018ec:	6069      	str	r1, [r5, #4]
  4018ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4018f2:	b29b      	uxth	r3, r3
  4018f4:	81ab      	strh	r3, [r5, #12]
  4018f6:	04db      	lsls	r3, r3, #19
  4018f8:	602a      	str	r2, [r5, #0]
  4018fa:	d5c3      	bpl.n	401884 <__sflush_r+0x6c>
  4018fc:	6528      	str	r0, [r5, #80]	; 0x50
  4018fe:	e7c1      	b.n	401884 <__sflush_r+0x6c>
  401900:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  401902:	2a00      	cmp	r2, #0
  401904:	dc96      	bgt.n	401834 <__sflush_r+0x1c>
  401906:	e7e4      	b.n	4018d2 <__sflush_r+0xba>
  401908:	2301      	movs	r3, #1
  40190a:	4640      	mov	r0, r8
  40190c:	69e9      	ldr	r1, [r5, #28]
  40190e:	47b0      	blx	r6
  401910:	1c43      	adds	r3, r0, #1
  401912:	4602      	mov	r2, r0
  401914:	d019      	beq.n	40194a <__sflush_r+0x132>
  401916:	89ab      	ldrh	r3, [r5, #12]
  401918:	6aae      	ldr	r6, [r5, #40]	; 0x28
  40191a:	e79a      	b.n	401852 <__sflush_r+0x3a>
  40191c:	f8d8 1000 	ldr.w	r1, [r8]
  401920:	2900      	cmp	r1, #0
  401922:	d0e1      	beq.n	4018e8 <__sflush_r+0xd0>
  401924:	291d      	cmp	r1, #29
  401926:	d007      	beq.n	401938 <__sflush_r+0x120>
  401928:	2916      	cmp	r1, #22
  40192a:	d005      	beq.n	401938 <__sflush_r+0x120>
  40192c:	89ab      	ldrh	r3, [r5, #12]
  40192e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401932:	81ab      	strh	r3, [r5, #12]
  401934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401938:	89ab      	ldrh	r3, [r5, #12]
  40193a:	692a      	ldr	r2, [r5, #16]
  40193c:	602a      	str	r2, [r5, #0]
  40193e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  401942:	2200      	movs	r2, #0
  401944:	81ab      	strh	r3, [r5, #12]
  401946:	606a      	str	r2, [r5, #4]
  401948:	e79c      	b.n	401884 <__sflush_r+0x6c>
  40194a:	f8d8 3000 	ldr.w	r3, [r8]
  40194e:	2b00      	cmp	r3, #0
  401950:	d0e1      	beq.n	401916 <__sflush_r+0xfe>
  401952:	2b1d      	cmp	r3, #29
  401954:	d007      	beq.n	401966 <__sflush_r+0x14e>
  401956:	2b16      	cmp	r3, #22
  401958:	d005      	beq.n	401966 <__sflush_r+0x14e>
  40195a:	89ab      	ldrh	r3, [r5, #12]
  40195c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401960:	81ab      	strh	r3, [r5, #12]
  401962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401966:	f8c8 4000 	str.w	r4, [r8]
  40196a:	e7b2      	b.n	4018d2 <__sflush_r+0xba>

0040196c <_fflush_r>:
  40196c:	b510      	push	{r4, lr}
  40196e:	4604      	mov	r4, r0
  401970:	b082      	sub	sp, #8
  401972:	b108      	cbz	r0, 401978 <_fflush_r+0xc>
  401974:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401976:	b153      	cbz	r3, 40198e <_fflush_r+0x22>
  401978:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  40197c:	b908      	cbnz	r0, 401982 <_fflush_r+0x16>
  40197e:	b002      	add	sp, #8
  401980:	bd10      	pop	{r4, pc}
  401982:	4620      	mov	r0, r4
  401984:	b002      	add	sp, #8
  401986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40198a:	f7ff bf45 	b.w	401818 <__sflush_r>
  40198e:	9101      	str	r1, [sp, #4]
  401990:	f000 f880 	bl	401a94 <__sinit>
  401994:	9901      	ldr	r1, [sp, #4]
  401996:	e7ef      	b.n	401978 <_fflush_r+0xc>

00401998 <_cleanup_r>:
  401998:	4901      	ldr	r1, [pc, #4]	; (4019a0 <_cleanup_r+0x8>)
  40199a:	f000 b9c1 	b.w	401d20 <_fwalk_reent>
  40199e:	bf00      	nop
  4019a0:	00402449 	.word	0x00402449

004019a4 <__sinit.part.1>:
  4019a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4019a8:	4b35      	ldr	r3, [pc, #212]	; (401a80 <__sinit.part.1+0xdc>)
  4019aa:	6845      	ldr	r5, [r0, #4]
  4019ac:	63c3      	str	r3, [r0, #60]	; 0x3c
  4019ae:	2400      	movs	r4, #0
  4019b0:	4607      	mov	r7, r0
  4019b2:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  4019b6:	2304      	movs	r3, #4
  4019b8:	2103      	movs	r1, #3
  4019ba:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  4019be:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  4019c2:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  4019c6:	b083      	sub	sp, #12
  4019c8:	602c      	str	r4, [r5, #0]
  4019ca:	606c      	str	r4, [r5, #4]
  4019cc:	60ac      	str	r4, [r5, #8]
  4019ce:	666c      	str	r4, [r5, #100]	; 0x64
  4019d0:	81ec      	strh	r4, [r5, #14]
  4019d2:	612c      	str	r4, [r5, #16]
  4019d4:	616c      	str	r4, [r5, #20]
  4019d6:	61ac      	str	r4, [r5, #24]
  4019d8:	81ab      	strh	r3, [r5, #12]
  4019da:	4621      	mov	r1, r4
  4019dc:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4019e0:	2208      	movs	r2, #8
  4019e2:	f7ff fe37 	bl	401654 <memset>
  4019e6:	68be      	ldr	r6, [r7, #8]
  4019e8:	f8df b098 	ldr.w	fp, [pc, #152]	; 401a84 <__sinit.part.1+0xe0>
  4019ec:	f8df a098 	ldr.w	sl, [pc, #152]	; 401a88 <__sinit.part.1+0xe4>
  4019f0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 401a8c <__sinit.part.1+0xe8>
  4019f4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 401a90 <__sinit.part.1+0xec>
  4019f8:	f8c5 b020 	str.w	fp, [r5, #32]
  4019fc:	2301      	movs	r3, #1
  4019fe:	2209      	movs	r2, #9
  401a00:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  401a04:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  401a08:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  401a0c:	61ed      	str	r5, [r5, #28]
  401a0e:	4621      	mov	r1, r4
  401a10:	81f3      	strh	r3, [r6, #14]
  401a12:	81b2      	strh	r2, [r6, #12]
  401a14:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  401a18:	6034      	str	r4, [r6, #0]
  401a1a:	6074      	str	r4, [r6, #4]
  401a1c:	60b4      	str	r4, [r6, #8]
  401a1e:	6674      	str	r4, [r6, #100]	; 0x64
  401a20:	6134      	str	r4, [r6, #16]
  401a22:	6174      	str	r4, [r6, #20]
  401a24:	61b4      	str	r4, [r6, #24]
  401a26:	2208      	movs	r2, #8
  401a28:	9301      	str	r3, [sp, #4]
  401a2a:	f7ff fe13 	bl	401654 <memset>
  401a2e:	68fd      	ldr	r5, [r7, #12]
  401a30:	61f6      	str	r6, [r6, #28]
  401a32:	2012      	movs	r0, #18
  401a34:	2202      	movs	r2, #2
  401a36:	f8c6 b020 	str.w	fp, [r6, #32]
  401a3a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  401a3e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  401a42:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  401a46:	4621      	mov	r1, r4
  401a48:	81a8      	strh	r0, [r5, #12]
  401a4a:	81ea      	strh	r2, [r5, #14]
  401a4c:	602c      	str	r4, [r5, #0]
  401a4e:	606c      	str	r4, [r5, #4]
  401a50:	60ac      	str	r4, [r5, #8]
  401a52:	666c      	str	r4, [r5, #100]	; 0x64
  401a54:	612c      	str	r4, [r5, #16]
  401a56:	616c      	str	r4, [r5, #20]
  401a58:	61ac      	str	r4, [r5, #24]
  401a5a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  401a5e:	2208      	movs	r2, #8
  401a60:	f7ff fdf8 	bl	401654 <memset>
  401a64:	9b01      	ldr	r3, [sp, #4]
  401a66:	61ed      	str	r5, [r5, #28]
  401a68:	f8c5 b020 	str.w	fp, [r5, #32]
  401a6c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  401a70:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  401a74:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  401a78:	63bb      	str	r3, [r7, #56]	; 0x38
  401a7a:	b003      	add	sp, #12
  401a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401a80:	00401999 	.word	0x00401999
  401a84:	004022d5 	.word	0x004022d5
  401a88:	004022f9 	.word	0x004022f9
  401a8c:	00402331 	.word	0x00402331
  401a90:	00402351 	.word	0x00402351

00401a94 <__sinit>:
  401a94:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401a96:	b103      	cbz	r3, 401a9a <__sinit+0x6>
  401a98:	4770      	bx	lr
  401a9a:	f7ff bf83 	b.w	4019a4 <__sinit.part.1>
  401a9e:	bf00      	nop

00401aa0 <__sfp_lock_acquire>:
  401aa0:	4770      	bx	lr
  401aa2:	bf00      	nop

00401aa4 <__sfp_lock_release>:
  401aa4:	4770      	bx	lr
  401aa6:	bf00      	nop

00401aa8 <__libc_fini_array>:
  401aa8:	b538      	push	{r3, r4, r5, lr}
  401aaa:	4b08      	ldr	r3, [pc, #32]	; (401acc <__libc_fini_array+0x24>)
  401aac:	4d08      	ldr	r5, [pc, #32]	; (401ad0 <__libc_fini_array+0x28>)
  401aae:	1aed      	subs	r5, r5, r3
  401ab0:	10ac      	asrs	r4, r5, #2
  401ab2:	bf18      	it	ne
  401ab4:	18ed      	addne	r5, r5, r3
  401ab6:	d005      	beq.n	401ac4 <__libc_fini_array+0x1c>
  401ab8:	3c01      	subs	r4, #1
  401aba:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  401abe:	4798      	blx	r3
  401ac0:	2c00      	cmp	r4, #0
  401ac2:	d1f9      	bne.n	401ab8 <__libc_fini_array+0x10>
  401ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401ac8:	f001 b902 	b.w	402cd0 <_fini>
  401acc:	00402cdc 	.word	0x00402cdc
  401ad0:	00402ce0 	.word	0x00402ce0

00401ad4 <_malloc_trim_r>:
  401ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401ad6:	4f23      	ldr	r7, [pc, #140]	; (401b64 <_malloc_trim_r+0x90>)
  401ad8:	460c      	mov	r4, r1
  401ada:	4606      	mov	r6, r0
  401adc:	f000 fbe4 	bl	4022a8 <__malloc_lock>
  401ae0:	68bb      	ldr	r3, [r7, #8]
  401ae2:	685d      	ldr	r5, [r3, #4]
  401ae4:	f025 0503 	bic.w	r5, r5, #3
  401ae8:	1b29      	subs	r1, r5, r4
  401aea:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  401aee:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  401af2:	f021 010f 	bic.w	r1, r1, #15
  401af6:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  401afa:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  401afe:	db07      	blt.n	401b10 <_malloc_trim_r+0x3c>
  401b00:	4630      	mov	r0, r6
  401b02:	2100      	movs	r1, #0
  401b04:	f000 fbd4 	bl	4022b0 <_sbrk_r>
  401b08:	68bb      	ldr	r3, [r7, #8]
  401b0a:	442b      	add	r3, r5
  401b0c:	4298      	cmp	r0, r3
  401b0e:	d004      	beq.n	401b1a <_malloc_trim_r+0x46>
  401b10:	4630      	mov	r0, r6
  401b12:	f000 fbcb 	bl	4022ac <__malloc_unlock>
  401b16:	2000      	movs	r0, #0
  401b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401b1a:	4630      	mov	r0, r6
  401b1c:	4261      	negs	r1, r4
  401b1e:	f000 fbc7 	bl	4022b0 <_sbrk_r>
  401b22:	3001      	adds	r0, #1
  401b24:	d00d      	beq.n	401b42 <_malloc_trim_r+0x6e>
  401b26:	4b10      	ldr	r3, [pc, #64]	; (401b68 <_malloc_trim_r+0x94>)
  401b28:	68ba      	ldr	r2, [r7, #8]
  401b2a:	6819      	ldr	r1, [r3, #0]
  401b2c:	1b2d      	subs	r5, r5, r4
  401b2e:	f045 0501 	orr.w	r5, r5, #1
  401b32:	4630      	mov	r0, r6
  401b34:	1b09      	subs	r1, r1, r4
  401b36:	6055      	str	r5, [r2, #4]
  401b38:	6019      	str	r1, [r3, #0]
  401b3a:	f000 fbb7 	bl	4022ac <__malloc_unlock>
  401b3e:	2001      	movs	r0, #1
  401b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401b42:	4630      	mov	r0, r6
  401b44:	2100      	movs	r1, #0
  401b46:	f000 fbb3 	bl	4022b0 <_sbrk_r>
  401b4a:	68ba      	ldr	r2, [r7, #8]
  401b4c:	1a83      	subs	r3, r0, r2
  401b4e:	2b0f      	cmp	r3, #15
  401b50:	ddde      	ble.n	401b10 <_malloc_trim_r+0x3c>
  401b52:	4c06      	ldr	r4, [pc, #24]	; (401b6c <_malloc_trim_r+0x98>)
  401b54:	4904      	ldr	r1, [pc, #16]	; (401b68 <_malloc_trim_r+0x94>)
  401b56:	6824      	ldr	r4, [r4, #0]
  401b58:	f043 0301 	orr.w	r3, r3, #1
  401b5c:	1b00      	subs	r0, r0, r4
  401b5e:	6053      	str	r3, [r2, #4]
  401b60:	6008      	str	r0, [r1, #0]
  401b62:	e7d5      	b.n	401b10 <_malloc_trim_r+0x3c>
  401b64:	2000043c 	.word	0x2000043c
  401b68:	20000cb0 	.word	0x20000cb0
  401b6c:	20000848 	.word	0x20000848

00401b70 <_free_r>:
  401b70:	2900      	cmp	r1, #0
  401b72:	d04e      	beq.n	401c12 <_free_r+0xa2>
  401b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401b78:	460c      	mov	r4, r1
  401b7a:	4680      	mov	r8, r0
  401b7c:	f000 fb94 	bl	4022a8 <__malloc_lock>
  401b80:	f854 7c04 	ldr.w	r7, [r4, #-4]
  401b84:	4962      	ldr	r1, [pc, #392]	; (401d10 <_free_r+0x1a0>)
  401b86:	f027 0201 	bic.w	r2, r7, #1
  401b8a:	f1a4 0508 	sub.w	r5, r4, #8
  401b8e:	18ab      	adds	r3, r5, r2
  401b90:	688e      	ldr	r6, [r1, #8]
  401b92:	6858      	ldr	r0, [r3, #4]
  401b94:	429e      	cmp	r6, r3
  401b96:	f020 0003 	bic.w	r0, r0, #3
  401b9a:	d05a      	beq.n	401c52 <_free_r+0xe2>
  401b9c:	07fe      	lsls	r6, r7, #31
  401b9e:	6058      	str	r0, [r3, #4]
  401ba0:	d40b      	bmi.n	401bba <_free_r+0x4a>
  401ba2:	f854 7c08 	ldr.w	r7, [r4, #-8]
  401ba6:	1bed      	subs	r5, r5, r7
  401ba8:	f101 0e08 	add.w	lr, r1, #8
  401bac:	68ac      	ldr	r4, [r5, #8]
  401bae:	4574      	cmp	r4, lr
  401bb0:	443a      	add	r2, r7
  401bb2:	d067      	beq.n	401c84 <_free_r+0x114>
  401bb4:	68ef      	ldr	r7, [r5, #12]
  401bb6:	60e7      	str	r7, [r4, #12]
  401bb8:	60bc      	str	r4, [r7, #8]
  401bba:	181c      	adds	r4, r3, r0
  401bbc:	6864      	ldr	r4, [r4, #4]
  401bbe:	07e4      	lsls	r4, r4, #31
  401bc0:	d40c      	bmi.n	401bdc <_free_r+0x6c>
  401bc2:	4f54      	ldr	r7, [pc, #336]	; (401d14 <_free_r+0x1a4>)
  401bc4:	689c      	ldr	r4, [r3, #8]
  401bc6:	42bc      	cmp	r4, r7
  401bc8:	4402      	add	r2, r0
  401bca:	d07c      	beq.n	401cc6 <_free_r+0x156>
  401bcc:	68d8      	ldr	r0, [r3, #12]
  401bce:	60e0      	str	r0, [r4, #12]
  401bd0:	f042 0301 	orr.w	r3, r2, #1
  401bd4:	6084      	str	r4, [r0, #8]
  401bd6:	606b      	str	r3, [r5, #4]
  401bd8:	50aa      	str	r2, [r5, r2]
  401bda:	e003      	b.n	401be4 <_free_r+0x74>
  401bdc:	f042 0301 	orr.w	r3, r2, #1
  401be0:	606b      	str	r3, [r5, #4]
  401be2:	50aa      	str	r2, [r5, r2]
  401be4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  401be8:	d214      	bcs.n	401c14 <_free_r+0xa4>
  401bea:	08d2      	lsrs	r2, r2, #3
  401bec:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  401bf0:	6848      	ldr	r0, [r1, #4]
  401bf2:	689f      	ldr	r7, [r3, #8]
  401bf4:	60af      	str	r7, [r5, #8]
  401bf6:	1092      	asrs	r2, r2, #2
  401bf8:	2401      	movs	r4, #1
  401bfa:	fa04 f202 	lsl.w	r2, r4, r2
  401bfe:	4310      	orrs	r0, r2
  401c00:	60eb      	str	r3, [r5, #12]
  401c02:	6048      	str	r0, [r1, #4]
  401c04:	609d      	str	r5, [r3, #8]
  401c06:	60fd      	str	r5, [r7, #12]
  401c08:	4640      	mov	r0, r8
  401c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401c0e:	f000 bb4d 	b.w	4022ac <__malloc_unlock>
  401c12:	4770      	bx	lr
  401c14:	0a53      	lsrs	r3, r2, #9
  401c16:	2b04      	cmp	r3, #4
  401c18:	d847      	bhi.n	401caa <_free_r+0x13a>
  401c1a:	0993      	lsrs	r3, r2, #6
  401c1c:	f103 0438 	add.w	r4, r3, #56	; 0x38
  401c20:	0060      	lsls	r0, r4, #1
  401c22:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  401c26:	493a      	ldr	r1, [pc, #232]	; (401d10 <_free_r+0x1a0>)
  401c28:	6883      	ldr	r3, [r0, #8]
  401c2a:	4283      	cmp	r3, r0
  401c2c:	d043      	beq.n	401cb6 <_free_r+0x146>
  401c2e:	6859      	ldr	r1, [r3, #4]
  401c30:	f021 0103 	bic.w	r1, r1, #3
  401c34:	4291      	cmp	r1, r2
  401c36:	d902      	bls.n	401c3e <_free_r+0xce>
  401c38:	689b      	ldr	r3, [r3, #8]
  401c3a:	4298      	cmp	r0, r3
  401c3c:	d1f7      	bne.n	401c2e <_free_r+0xbe>
  401c3e:	68da      	ldr	r2, [r3, #12]
  401c40:	60ea      	str	r2, [r5, #12]
  401c42:	60ab      	str	r3, [r5, #8]
  401c44:	4640      	mov	r0, r8
  401c46:	6095      	str	r5, [r2, #8]
  401c48:	60dd      	str	r5, [r3, #12]
  401c4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401c4e:	f000 bb2d 	b.w	4022ac <__malloc_unlock>
  401c52:	07ff      	lsls	r7, r7, #31
  401c54:	4402      	add	r2, r0
  401c56:	d407      	bmi.n	401c68 <_free_r+0xf8>
  401c58:	f854 3c08 	ldr.w	r3, [r4, #-8]
  401c5c:	1aed      	subs	r5, r5, r3
  401c5e:	441a      	add	r2, r3
  401c60:	68a8      	ldr	r0, [r5, #8]
  401c62:	68eb      	ldr	r3, [r5, #12]
  401c64:	60c3      	str	r3, [r0, #12]
  401c66:	6098      	str	r0, [r3, #8]
  401c68:	4b2b      	ldr	r3, [pc, #172]	; (401d18 <_free_r+0x1a8>)
  401c6a:	681b      	ldr	r3, [r3, #0]
  401c6c:	f042 0001 	orr.w	r0, r2, #1
  401c70:	429a      	cmp	r2, r3
  401c72:	6068      	str	r0, [r5, #4]
  401c74:	608d      	str	r5, [r1, #8]
  401c76:	d3c7      	bcc.n	401c08 <_free_r+0x98>
  401c78:	4b28      	ldr	r3, [pc, #160]	; (401d1c <_free_r+0x1ac>)
  401c7a:	4640      	mov	r0, r8
  401c7c:	6819      	ldr	r1, [r3, #0]
  401c7e:	f7ff ff29 	bl	401ad4 <_malloc_trim_r>
  401c82:	e7c1      	b.n	401c08 <_free_r+0x98>
  401c84:	1819      	adds	r1, r3, r0
  401c86:	6849      	ldr	r1, [r1, #4]
  401c88:	07c9      	lsls	r1, r1, #31
  401c8a:	d409      	bmi.n	401ca0 <_free_r+0x130>
  401c8c:	68d9      	ldr	r1, [r3, #12]
  401c8e:	689b      	ldr	r3, [r3, #8]
  401c90:	4402      	add	r2, r0
  401c92:	f042 0001 	orr.w	r0, r2, #1
  401c96:	60d9      	str	r1, [r3, #12]
  401c98:	608b      	str	r3, [r1, #8]
  401c9a:	6068      	str	r0, [r5, #4]
  401c9c:	50aa      	str	r2, [r5, r2]
  401c9e:	e7b3      	b.n	401c08 <_free_r+0x98>
  401ca0:	f042 0301 	orr.w	r3, r2, #1
  401ca4:	606b      	str	r3, [r5, #4]
  401ca6:	50aa      	str	r2, [r5, r2]
  401ca8:	e7ae      	b.n	401c08 <_free_r+0x98>
  401caa:	2b14      	cmp	r3, #20
  401cac:	d814      	bhi.n	401cd8 <_free_r+0x168>
  401cae:	f103 045b 	add.w	r4, r3, #91	; 0x5b
  401cb2:	0060      	lsls	r0, r4, #1
  401cb4:	e7b5      	b.n	401c22 <_free_r+0xb2>
  401cb6:	684a      	ldr	r2, [r1, #4]
  401cb8:	10a4      	asrs	r4, r4, #2
  401cba:	2001      	movs	r0, #1
  401cbc:	40a0      	lsls	r0, r4
  401cbe:	4302      	orrs	r2, r0
  401cc0:	604a      	str	r2, [r1, #4]
  401cc2:	461a      	mov	r2, r3
  401cc4:	e7bc      	b.n	401c40 <_free_r+0xd0>
  401cc6:	f042 0301 	orr.w	r3, r2, #1
  401cca:	614d      	str	r5, [r1, #20]
  401ccc:	610d      	str	r5, [r1, #16]
  401cce:	60ec      	str	r4, [r5, #12]
  401cd0:	60ac      	str	r4, [r5, #8]
  401cd2:	606b      	str	r3, [r5, #4]
  401cd4:	50aa      	str	r2, [r5, r2]
  401cd6:	e797      	b.n	401c08 <_free_r+0x98>
  401cd8:	2b54      	cmp	r3, #84	; 0x54
  401cda:	d804      	bhi.n	401ce6 <_free_r+0x176>
  401cdc:	0b13      	lsrs	r3, r2, #12
  401cde:	f103 046e 	add.w	r4, r3, #110	; 0x6e
  401ce2:	0060      	lsls	r0, r4, #1
  401ce4:	e79d      	b.n	401c22 <_free_r+0xb2>
  401ce6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  401cea:	d804      	bhi.n	401cf6 <_free_r+0x186>
  401cec:	0bd3      	lsrs	r3, r2, #15
  401cee:	f103 0477 	add.w	r4, r3, #119	; 0x77
  401cf2:	0060      	lsls	r0, r4, #1
  401cf4:	e795      	b.n	401c22 <_free_r+0xb2>
  401cf6:	f240 5054 	movw	r0, #1364	; 0x554
  401cfa:	4283      	cmp	r3, r0
  401cfc:	d804      	bhi.n	401d08 <_free_r+0x198>
  401cfe:	0c93      	lsrs	r3, r2, #18
  401d00:	f103 047c 	add.w	r4, r3, #124	; 0x7c
  401d04:	0060      	lsls	r0, r4, #1
  401d06:	e78c      	b.n	401c22 <_free_r+0xb2>
  401d08:	20fc      	movs	r0, #252	; 0xfc
  401d0a:	247e      	movs	r4, #126	; 0x7e
  401d0c:	e789      	b.n	401c22 <_free_r+0xb2>
  401d0e:	bf00      	nop
  401d10:	2000043c 	.word	0x2000043c
  401d14:	20000444 	.word	0x20000444
  401d18:	20000844 	.word	0x20000844
  401d1c:	20000cac 	.word	0x20000cac

00401d20 <_fwalk_reent>:
  401d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401d24:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  401d28:	d01f      	beq.n	401d6a <_fwalk_reent+0x4a>
  401d2a:	4688      	mov	r8, r1
  401d2c:	4606      	mov	r6, r0
  401d2e:	f04f 0900 	mov.w	r9, #0
  401d32:	687d      	ldr	r5, [r7, #4]
  401d34:	68bc      	ldr	r4, [r7, #8]
  401d36:	3d01      	subs	r5, #1
  401d38:	d411      	bmi.n	401d5e <_fwalk_reent+0x3e>
  401d3a:	89a3      	ldrh	r3, [r4, #12]
  401d3c:	2b01      	cmp	r3, #1
  401d3e:	f105 35ff 	add.w	r5, r5, #4294967295
  401d42:	d908      	bls.n	401d56 <_fwalk_reent+0x36>
  401d44:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  401d48:	3301      	adds	r3, #1
  401d4a:	4621      	mov	r1, r4
  401d4c:	4630      	mov	r0, r6
  401d4e:	d002      	beq.n	401d56 <_fwalk_reent+0x36>
  401d50:	47c0      	blx	r8
  401d52:	ea49 0900 	orr.w	r9, r9, r0
  401d56:	1c6b      	adds	r3, r5, #1
  401d58:	f104 0468 	add.w	r4, r4, #104	; 0x68
  401d5c:	d1ed      	bne.n	401d3a <_fwalk_reent+0x1a>
  401d5e:	683f      	ldr	r7, [r7, #0]
  401d60:	2f00      	cmp	r7, #0
  401d62:	d1e6      	bne.n	401d32 <_fwalk_reent+0x12>
  401d64:	4648      	mov	r0, r9
  401d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401d6a:	46b9      	mov	r9, r7
  401d6c:	4648      	mov	r0, r9
  401d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401d72:	bf00      	nop

00401d74 <malloc>:
  401d74:	4b02      	ldr	r3, [pc, #8]	; (401d80 <malloc+0xc>)
  401d76:	4601      	mov	r1, r0
  401d78:	6818      	ldr	r0, [r3, #0]
  401d7a:	f000 b803 	b.w	401d84 <_malloc_r>
  401d7e:	bf00      	nop
  401d80:	20000438 	.word	0x20000438

00401d84 <_malloc_r>:
  401d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d88:	f101 050b 	add.w	r5, r1, #11
  401d8c:	2d16      	cmp	r5, #22
  401d8e:	b083      	sub	sp, #12
  401d90:	4606      	mov	r6, r0
  401d92:	d927      	bls.n	401de4 <_malloc_r+0x60>
  401d94:	f035 0507 	bics.w	r5, r5, #7
  401d98:	f100 80b6 	bmi.w	401f08 <_malloc_r+0x184>
  401d9c:	42a9      	cmp	r1, r5
  401d9e:	f200 80b3 	bhi.w	401f08 <_malloc_r+0x184>
  401da2:	f000 fa81 	bl	4022a8 <__malloc_lock>
  401da6:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  401daa:	d222      	bcs.n	401df2 <_malloc_r+0x6e>
  401dac:	4fc2      	ldr	r7, [pc, #776]	; (4020b8 <_malloc_r+0x334>)
  401dae:	08e8      	lsrs	r0, r5, #3
  401db0:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
  401db4:	68dc      	ldr	r4, [r3, #12]
  401db6:	429c      	cmp	r4, r3
  401db8:	f000 81c8 	beq.w	40214c <_malloc_r+0x3c8>
  401dbc:	6863      	ldr	r3, [r4, #4]
  401dbe:	68e1      	ldr	r1, [r4, #12]
  401dc0:	68a5      	ldr	r5, [r4, #8]
  401dc2:	f023 0303 	bic.w	r3, r3, #3
  401dc6:	4423      	add	r3, r4
  401dc8:	4630      	mov	r0, r6
  401dca:	685a      	ldr	r2, [r3, #4]
  401dcc:	60e9      	str	r1, [r5, #12]
  401dce:	f042 0201 	orr.w	r2, r2, #1
  401dd2:	608d      	str	r5, [r1, #8]
  401dd4:	605a      	str	r2, [r3, #4]
  401dd6:	f000 fa69 	bl	4022ac <__malloc_unlock>
  401dda:	3408      	adds	r4, #8
  401ddc:	4620      	mov	r0, r4
  401dde:	b003      	add	sp, #12
  401de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401de4:	2910      	cmp	r1, #16
  401de6:	f200 808f 	bhi.w	401f08 <_malloc_r+0x184>
  401dea:	f000 fa5d 	bl	4022a8 <__malloc_lock>
  401dee:	2510      	movs	r5, #16
  401df0:	e7dc      	b.n	401dac <_malloc_r+0x28>
  401df2:	0a68      	lsrs	r0, r5, #9
  401df4:	f000 808f 	beq.w	401f16 <_malloc_r+0x192>
  401df8:	2804      	cmp	r0, #4
  401dfa:	f200 8154 	bhi.w	4020a6 <_malloc_r+0x322>
  401dfe:	09a8      	lsrs	r0, r5, #6
  401e00:	3038      	adds	r0, #56	; 0x38
  401e02:	0041      	lsls	r1, r0, #1
  401e04:	4fac      	ldr	r7, [pc, #688]	; (4020b8 <_malloc_r+0x334>)
  401e06:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  401e0a:	68cc      	ldr	r4, [r1, #12]
  401e0c:	42a1      	cmp	r1, r4
  401e0e:	d106      	bne.n	401e1e <_malloc_r+0x9a>
  401e10:	e00c      	b.n	401e2c <_malloc_r+0xa8>
  401e12:	2a00      	cmp	r2, #0
  401e14:	f280 8082 	bge.w	401f1c <_malloc_r+0x198>
  401e18:	68e4      	ldr	r4, [r4, #12]
  401e1a:	42a1      	cmp	r1, r4
  401e1c:	d006      	beq.n	401e2c <_malloc_r+0xa8>
  401e1e:	6863      	ldr	r3, [r4, #4]
  401e20:	f023 0303 	bic.w	r3, r3, #3
  401e24:	1b5a      	subs	r2, r3, r5
  401e26:	2a0f      	cmp	r2, #15
  401e28:	ddf3      	ble.n	401e12 <_malloc_r+0x8e>
  401e2a:	3801      	subs	r0, #1
  401e2c:	3001      	adds	r0, #1
  401e2e:	49a2      	ldr	r1, [pc, #648]	; (4020b8 <_malloc_r+0x334>)
  401e30:	693c      	ldr	r4, [r7, #16]
  401e32:	f101 0e08 	add.w	lr, r1, #8
  401e36:	4574      	cmp	r4, lr
  401e38:	f000 817d 	beq.w	402136 <_malloc_r+0x3b2>
  401e3c:	6863      	ldr	r3, [r4, #4]
  401e3e:	f023 0303 	bic.w	r3, r3, #3
  401e42:	1b5a      	subs	r2, r3, r5
  401e44:	2a0f      	cmp	r2, #15
  401e46:	f300 8163 	bgt.w	402110 <_malloc_r+0x38c>
  401e4a:	2a00      	cmp	r2, #0
  401e4c:	f8c1 e014 	str.w	lr, [r1, #20]
  401e50:	f8c1 e010 	str.w	lr, [r1, #16]
  401e54:	da73      	bge.n	401f3e <_malloc_r+0x1ba>
  401e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401e5a:	f080 8139 	bcs.w	4020d0 <_malloc_r+0x34c>
  401e5e:	08db      	lsrs	r3, r3, #3
  401e60:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  401e64:	ea4f 0ca3 	mov.w	ip, r3, asr #2
  401e68:	684a      	ldr	r2, [r1, #4]
  401e6a:	f8d8 9008 	ldr.w	r9, [r8, #8]
  401e6e:	f8c4 9008 	str.w	r9, [r4, #8]
  401e72:	2301      	movs	r3, #1
  401e74:	fa03 f30c 	lsl.w	r3, r3, ip
  401e78:	4313      	orrs	r3, r2
  401e7a:	f8c4 800c 	str.w	r8, [r4, #12]
  401e7e:	604b      	str	r3, [r1, #4]
  401e80:	f8c8 4008 	str.w	r4, [r8, #8]
  401e84:	f8c9 400c 	str.w	r4, [r9, #12]
  401e88:	1082      	asrs	r2, r0, #2
  401e8a:	2401      	movs	r4, #1
  401e8c:	4094      	lsls	r4, r2
  401e8e:	429c      	cmp	r4, r3
  401e90:	d862      	bhi.n	401f58 <_malloc_r+0x1d4>
  401e92:	4223      	tst	r3, r4
  401e94:	d106      	bne.n	401ea4 <_malloc_r+0x120>
  401e96:	f020 0003 	bic.w	r0, r0, #3
  401e9a:	0064      	lsls	r4, r4, #1
  401e9c:	4223      	tst	r3, r4
  401e9e:	f100 0004 	add.w	r0, r0, #4
  401ea2:	d0fa      	beq.n	401e9a <_malloc_r+0x116>
  401ea4:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
  401ea8:	46c4      	mov	ip, r8
  401eaa:	4681      	mov	r9, r0
  401eac:	f8dc 300c 	ldr.w	r3, [ip, #12]
  401eb0:	459c      	cmp	ip, r3
  401eb2:	d107      	bne.n	401ec4 <_malloc_r+0x140>
  401eb4:	e141      	b.n	40213a <_malloc_r+0x3b6>
  401eb6:	2900      	cmp	r1, #0
  401eb8:	f280 8151 	bge.w	40215e <_malloc_r+0x3da>
  401ebc:	68db      	ldr	r3, [r3, #12]
  401ebe:	459c      	cmp	ip, r3
  401ec0:	f000 813b 	beq.w	40213a <_malloc_r+0x3b6>
  401ec4:	685a      	ldr	r2, [r3, #4]
  401ec6:	f022 0203 	bic.w	r2, r2, #3
  401eca:	1b51      	subs	r1, r2, r5
  401ecc:	290f      	cmp	r1, #15
  401ece:	ddf2      	ble.n	401eb6 <_malloc_r+0x132>
  401ed0:	461c      	mov	r4, r3
  401ed2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  401ed6:	f854 8f08 	ldr.w	r8, [r4, #8]!
  401eda:	195a      	adds	r2, r3, r5
  401edc:	f045 0901 	orr.w	r9, r5, #1
  401ee0:	f041 0501 	orr.w	r5, r1, #1
  401ee4:	f8c3 9004 	str.w	r9, [r3, #4]
  401ee8:	4630      	mov	r0, r6
  401eea:	f8c8 c00c 	str.w	ip, [r8, #12]
  401eee:	f8cc 8008 	str.w	r8, [ip, #8]
  401ef2:	617a      	str	r2, [r7, #20]
  401ef4:	613a      	str	r2, [r7, #16]
  401ef6:	f8c2 e00c 	str.w	lr, [r2, #12]
  401efa:	f8c2 e008 	str.w	lr, [r2, #8]
  401efe:	6055      	str	r5, [r2, #4]
  401f00:	5051      	str	r1, [r2, r1]
  401f02:	f000 f9d3 	bl	4022ac <__malloc_unlock>
  401f06:	e769      	b.n	401ddc <_malloc_r+0x58>
  401f08:	2400      	movs	r4, #0
  401f0a:	230c      	movs	r3, #12
  401f0c:	4620      	mov	r0, r4
  401f0e:	6033      	str	r3, [r6, #0]
  401f10:	b003      	add	sp, #12
  401f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f16:	217e      	movs	r1, #126	; 0x7e
  401f18:	203f      	movs	r0, #63	; 0x3f
  401f1a:	e773      	b.n	401e04 <_malloc_r+0x80>
  401f1c:	4423      	add	r3, r4
  401f1e:	68e1      	ldr	r1, [r4, #12]
  401f20:	685a      	ldr	r2, [r3, #4]
  401f22:	68a5      	ldr	r5, [r4, #8]
  401f24:	f042 0201 	orr.w	r2, r2, #1
  401f28:	60e9      	str	r1, [r5, #12]
  401f2a:	4630      	mov	r0, r6
  401f2c:	608d      	str	r5, [r1, #8]
  401f2e:	605a      	str	r2, [r3, #4]
  401f30:	f000 f9bc 	bl	4022ac <__malloc_unlock>
  401f34:	3408      	adds	r4, #8
  401f36:	4620      	mov	r0, r4
  401f38:	b003      	add	sp, #12
  401f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f3e:	4423      	add	r3, r4
  401f40:	4630      	mov	r0, r6
  401f42:	685a      	ldr	r2, [r3, #4]
  401f44:	f042 0201 	orr.w	r2, r2, #1
  401f48:	605a      	str	r2, [r3, #4]
  401f4a:	f000 f9af 	bl	4022ac <__malloc_unlock>
  401f4e:	3408      	adds	r4, #8
  401f50:	4620      	mov	r0, r4
  401f52:	b003      	add	sp, #12
  401f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f58:	68bc      	ldr	r4, [r7, #8]
  401f5a:	6863      	ldr	r3, [r4, #4]
  401f5c:	f023 0803 	bic.w	r8, r3, #3
  401f60:	4545      	cmp	r5, r8
  401f62:	d804      	bhi.n	401f6e <_malloc_r+0x1ea>
  401f64:	ebc5 0308 	rsb	r3, r5, r8
  401f68:	2b0f      	cmp	r3, #15
  401f6a:	f300 808c 	bgt.w	402086 <_malloc_r+0x302>
  401f6e:	4b53      	ldr	r3, [pc, #332]	; (4020bc <_malloc_r+0x338>)
  401f70:	f8df a158 	ldr.w	sl, [pc, #344]	; 4020cc <_malloc_r+0x348>
  401f74:	681a      	ldr	r2, [r3, #0]
  401f76:	f8da 3000 	ldr.w	r3, [sl]
  401f7a:	3301      	adds	r3, #1
  401f7c:	442a      	add	r2, r5
  401f7e:	eb04 0b08 	add.w	fp, r4, r8
  401f82:	f000 8150 	beq.w	402226 <_malloc_r+0x4a2>
  401f86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  401f8a:	320f      	adds	r2, #15
  401f8c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  401f90:	f022 020f 	bic.w	r2, r2, #15
  401f94:	4611      	mov	r1, r2
  401f96:	4630      	mov	r0, r6
  401f98:	9201      	str	r2, [sp, #4]
  401f9a:	f000 f989 	bl	4022b0 <_sbrk_r>
  401f9e:	f1b0 3fff 	cmp.w	r0, #4294967295
  401fa2:	4681      	mov	r9, r0
  401fa4:	9a01      	ldr	r2, [sp, #4]
  401fa6:	f000 8147 	beq.w	402238 <_malloc_r+0x4b4>
  401faa:	4583      	cmp	fp, r0
  401fac:	f200 80ee 	bhi.w	40218c <_malloc_r+0x408>
  401fb0:	4b43      	ldr	r3, [pc, #268]	; (4020c0 <_malloc_r+0x33c>)
  401fb2:	6819      	ldr	r1, [r3, #0]
  401fb4:	45cb      	cmp	fp, r9
  401fb6:	4411      	add	r1, r2
  401fb8:	6019      	str	r1, [r3, #0]
  401fba:	f000 8142 	beq.w	402242 <_malloc_r+0x4be>
  401fbe:	f8da 0000 	ldr.w	r0, [sl]
  401fc2:	f8df e108 	ldr.w	lr, [pc, #264]	; 4020cc <_malloc_r+0x348>
  401fc6:	3001      	adds	r0, #1
  401fc8:	bf1b      	ittet	ne
  401fca:	ebcb 0b09 	rsbne	fp, fp, r9
  401fce:	4459      	addne	r1, fp
  401fd0:	f8ce 9000 	streq.w	r9, [lr]
  401fd4:	6019      	strne	r1, [r3, #0]
  401fd6:	f019 0107 	ands.w	r1, r9, #7
  401fda:	f000 8107 	beq.w	4021ec <_malloc_r+0x468>
  401fde:	f1c1 0008 	rsb	r0, r1, #8
  401fe2:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  401fe6:	4481      	add	r9, r0
  401fe8:	3108      	adds	r1, #8
  401fea:	444a      	add	r2, r9
  401fec:	f3c2 020b 	ubfx	r2, r2, #0, #12
  401ff0:	ebc2 0a01 	rsb	sl, r2, r1
  401ff4:	4651      	mov	r1, sl
  401ff6:	4630      	mov	r0, r6
  401ff8:	9301      	str	r3, [sp, #4]
  401ffa:	f000 f959 	bl	4022b0 <_sbrk_r>
  401ffe:	1c43      	adds	r3, r0, #1
  402000:	9b01      	ldr	r3, [sp, #4]
  402002:	f000 812c 	beq.w	40225e <_malloc_r+0x4da>
  402006:	ebc9 0200 	rsb	r2, r9, r0
  40200a:	4452      	add	r2, sl
  40200c:	f042 0201 	orr.w	r2, r2, #1
  402010:	6819      	ldr	r1, [r3, #0]
  402012:	f8c7 9008 	str.w	r9, [r7, #8]
  402016:	4451      	add	r1, sl
  402018:	42bc      	cmp	r4, r7
  40201a:	f8c9 2004 	str.w	r2, [r9, #4]
  40201e:	6019      	str	r1, [r3, #0]
  402020:	f8df a09c 	ldr.w	sl, [pc, #156]	; 4020c0 <_malloc_r+0x33c>
  402024:	d016      	beq.n	402054 <_malloc_r+0x2d0>
  402026:	f1b8 0f0f 	cmp.w	r8, #15
  40202a:	f240 80ee 	bls.w	40220a <_malloc_r+0x486>
  40202e:	6862      	ldr	r2, [r4, #4]
  402030:	f1a8 030c 	sub.w	r3, r8, #12
  402034:	f023 0307 	bic.w	r3, r3, #7
  402038:	18e0      	adds	r0, r4, r3
  40203a:	f002 0201 	and.w	r2, r2, #1
  40203e:	f04f 0e05 	mov.w	lr, #5
  402042:	431a      	orrs	r2, r3
  402044:	2b0f      	cmp	r3, #15
  402046:	6062      	str	r2, [r4, #4]
  402048:	f8c0 e004 	str.w	lr, [r0, #4]
  40204c:	f8c0 e008 	str.w	lr, [r0, #8]
  402050:	f200 8109 	bhi.w	402266 <_malloc_r+0x4e2>
  402054:	4b1b      	ldr	r3, [pc, #108]	; (4020c4 <_malloc_r+0x340>)
  402056:	68bc      	ldr	r4, [r7, #8]
  402058:	681a      	ldr	r2, [r3, #0]
  40205a:	4291      	cmp	r1, r2
  40205c:	bf88      	it	hi
  40205e:	6019      	strhi	r1, [r3, #0]
  402060:	4b19      	ldr	r3, [pc, #100]	; (4020c8 <_malloc_r+0x344>)
  402062:	681a      	ldr	r2, [r3, #0]
  402064:	4291      	cmp	r1, r2
  402066:	6862      	ldr	r2, [r4, #4]
  402068:	bf88      	it	hi
  40206a:	6019      	strhi	r1, [r3, #0]
  40206c:	f022 0203 	bic.w	r2, r2, #3
  402070:	4295      	cmp	r5, r2
  402072:	eba2 0305 	sub.w	r3, r2, r5
  402076:	d801      	bhi.n	40207c <_malloc_r+0x2f8>
  402078:	2b0f      	cmp	r3, #15
  40207a:	dc04      	bgt.n	402086 <_malloc_r+0x302>
  40207c:	4630      	mov	r0, r6
  40207e:	f000 f915 	bl	4022ac <__malloc_unlock>
  402082:	2400      	movs	r4, #0
  402084:	e6aa      	b.n	401ddc <_malloc_r+0x58>
  402086:	1962      	adds	r2, r4, r5
  402088:	f043 0301 	orr.w	r3, r3, #1
  40208c:	f045 0501 	orr.w	r5, r5, #1
  402090:	6065      	str	r5, [r4, #4]
  402092:	4630      	mov	r0, r6
  402094:	60ba      	str	r2, [r7, #8]
  402096:	6053      	str	r3, [r2, #4]
  402098:	f000 f908 	bl	4022ac <__malloc_unlock>
  40209c:	3408      	adds	r4, #8
  40209e:	4620      	mov	r0, r4
  4020a0:	b003      	add	sp, #12
  4020a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4020a6:	2814      	cmp	r0, #20
  4020a8:	d968      	bls.n	40217c <_malloc_r+0x3f8>
  4020aa:	2854      	cmp	r0, #84	; 0x54
  4020ac:	f200 8097 	bhi.w	4021de <_malloc_r+0x45a>
  4020b0:	0b28      	lsrs	r0, r5, #12
  4020b2:	306e      	adds	r0, #110	; 0x6e
  4020b4:	0041      	lsls	r1, r0, #1
  4020b6:	e6a5      	b.n	401e04 <_malloc_r+0x80>
  4020b8:	2000043c 	.word	0x2000043c
  4020bc:	20000cac 	.word	0x20000cac
  4020c0:	20000cb0 	.word	0x20000cb0
  4020c4:	20000ca8 	.word	0x20000ca8
  4020c8:	20000ca4 	.word	0x20000ca4
  4020cc:	20000848 	.word	0x20000848
  4020d0:	0a5a      	lsrs	r2, r3, #9
  4020d2:	2a04      	cmp	r2, #4
  4020d4:	d955      	bls.n	402182 <_malloc_r+0x3fe>
  4020d6:	2a14      	cmp	r2, #20
  4020d8:	f200 80a7 	bhi.w	40222a <_malloc_r+0x4a6>
  4020dc:	325b      	adds	r2, #91	; 0x5b
  4020de:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  4020e2:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
  4020e6:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 4022a4 <_malloc_r+0x520>
  4020ea:	f8dc 1008 	ldr.w	r1, [ip, #8]
  4020ee:	4561      	cmp	r1, ip
  4020f0:	d07f      	beq.n	4021f2 <_malloc_r+0x46e>
  4020f2:	684a      	ldr	r2, [r1, #4]
  4020f4:	f022 0203 	bic.w	r2, r2, #3
  4020f8:	4293      	cmp	r3, r2
  4020fa:	d202      	bcs.n	402102 <_malloc_r+0x37e>
  4020fc:	6889      	ldr	r1, [r1, #8]
  4020fe:	458c      	cmp	ip, r1
  402100:	d1f7      	bne.n	4020f2 <_malloc_r+0x36e>
  402102:	68ca      	ldr	r2, [r1, #12]
  402104:	687b      	ldr	r3, [r7, #4]
  402106:	60e2      	str	r2, [r4, #12]
  402108:	60a1      	str	r1, [r4, #8]
  40210a:	6094      	str	r4, [r2, #8]
  40210c:	60cc      	str	r4, [r1, #12]
  40210e:	e6bb      	b.n	401e88 <_malloc_r+0x104>
  402110:	1963      	adds	r3, r4, r5
  402112:	f042 0701 	orr.w	r7, r2, #1
  402116:	f045 0501 	orr.w	r5, r5, #1
  40211a:	6065      	str	r5, [r4, #4]
  40211c:	4630      	mov	r0, r6
  40211e:	614b      	str	r3, [r1, #20]
  402120:	610b      	str	r3, [r1, #16]
  402122:	f8c3 e00c 	str.w	lr, [r3, #12]
  402126:	f8c3 e008 	str.w	lr, [r3, #8]
  40212a:	605f      	str	r7, [r3, #4]
  40212c:	509a      	str	r2, [r3, r2]
  40212e:	3408      	adds	r4, #8
  402130:	f000 f8bc 	bl	4022ac <__malloc_unlock>
  402134:	e652      	b.n	401ddc <_malloc_r+0x58>
  402136:	684b      	ldr	r3, [r1, #4]
  402138:	e6a6      	b.n	401e88 <_malloc_r+0x104>
  40213a:	f109 0901 	add.w	r9, r9, #1
  40213e:	f019 0f03 	tst.w	r9, #3
  402142:	f10c 0c08 	add.w	ip, ip, #8
  402146:	f47f aeb1 	bne.w	401eac <_malloc_r+0x128>
  40214a:	e02c      	b.n	4021a6 <_malloc_r+0x422>
  40214c:	f104 0308 	add.w	r3, r4, #8
  402150:	6964      	ldr	r4, [r4, #20]
  402152:	42a3      	cmp	r3, r4
  402154:	bf08      	it	eq
  402156:	3002      	addeq	r0, #2
  402158:	f43f ae69 	beq.w	401e2e <_malloc_r+0xaa>
  40215c:	e62e      	b.n	401dbc <_malloc_r+0x38>
  40215e:	441a      	add	r2, r3
  402160:	461c      	mov	r4, r3
  402162:	6851      	ldr	r1, [r2, #4]
  402164:	68db      	ldr	r3, [r3, #12]
  402166:	f854 5f08 	ldr.w	r5, [r4, #8]!
  40216a:	f041 0101 	orr.w	r1, r1, #1
  40216e:	6051      	str	r1, [r2, #4]
  402170:	4630      	mov	r0, r6
  402172:	60eb      	str	r3, [r5, #12]
  402174:	609d      	str	r5, [r3, #8]
  402176:	f000 f899 	bl	4022ac <__malloc_unlock>
  40217a:	e62f      	b.n	401ddc <_malloc_r+0x58>
  40217c:	305b      	adds	r0, #91	; 0x5b
  40217e:	0041      	lsls	r1, r0, #1
  402180:	e640      	b.n	401e04 <_malloc_r+0x80>
  402182:	099a      	lsrs	r2, r3, #6
  402184:	3238      	adds	r2, #56	; 0x38
  402186:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  40218a:	e7aa      	b.n	4020e2 <_malloc_r+0x35e>
  40218c:	42bc      	cmp	r4, r7
  40218e:	4b45      	ldr	r3, [pc, #276]	; (4022a4 <_malloc_r+0x520>)
  402190:	f43f af0e 	beq.w	401fb0 <_malloc_r+0x22c>
  402194:	689c      	ldr	r4, [r3, #8]
  402196:	6862      	ldr	r2, [r4, #4]
  402198:	f022 0203 	bic.w	r2, r2, #3
  40219c:	e768      	b.n	402070 <_malloc_r+0x2ec>
  40219e:	f8d8 8000 	ldr.w	r8, [r8]
  4021a2:	4598      	cmp	r8, r3
  4021a4:	d17c      	bne.n	4022a0 <_malloc_r+0x51c>
  4021a6:	f010 0f03 	tst.w	r0, #3
  4021aa:	f1a8 0308 	sub.w	r3, r8, #8
  4021ae:	f100 30ff 	add.w	r0, r0, #4294967295
  4021b2:	d1f4      	bne.n	40219e <_malloc_r+0x41a>
  4021b4:	687b      	ldr	r3, [r7, #4]
  4021b6:	ea23 0304 	bic.w	r3, r3, r4
  4021ba:	607b      	str	r3, [r7, #4]
  4021bc:	0064      	lsls	r4, r4, #1
  4021be:	429c      	cmp	r4, r3
  4021c0:	f63f aeca 	bhi.w	401f58 <_malloc_r+0x1d4>
  4021c4:	2c00      	cmp	r4, #0
  4021c6:	f43f aec7 	beq.w	401f58 <_malloc_r+0x1d4>
  4021ca:	4223      	tst	r3, r4
  4021cc:	4648      	mov	r0, r9
  4021ce:	f47f ae69 	bne.w	401ea4 <_malloc_r+0x120>
  4021d2:	0064      	lsls	r4, r4, #1
  4021d4:	4223      	tst	r3, r4
  4021d6:	f100 0004 	add.w	r0, r0, #4
  4021da:	d0fa      	beq.n	4021d2 <_malloc_r+0x44e>
  4021dc:	e662      	b.n	401ea4 <_malloc_r+0x120>
  4021de:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  4021e2:	d818      	bhi.n	402216 <_malloc_r+0x492>
  4021e4:	0be8      	lsrs	r0, r5, #15
  4021e6:	3077      	adds	r0, #119	; 0x77
  4021e8:	0041      	lsls	r1, r0, #1
  4021ea:	e60b      	b.n	401e04 <_malloc_r+0x80>
  4021ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4021f0:	e6fb      	b.n	401fea <_malloc_r+0x266>
  4021f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4021f6:	1092      	asrs	r2, r2, #2
  4021f8:	f04f 0c01 	mov.w	ip, #1
  4021fc:	fa0c f202 	lsl.w	r2, ip, r2
  402200:	4313      	orrs	r3, r2
  402202:	f8c8 3004 	str.w	r3, [r8, #4]
  402206:	460a      	mov	r2, r1
  402208:	e77d      	b.n	402106 <_malloc_r+0x382>
  40220a:	2301      	movs	r3, #1
  40220c:	f8c9 3004 	str.w	r3, [r9, #4]
  402210:	464c      	mov	r4, r9
  402212:	2200      	movs	r2, #0
  402214:	e72c      	b.n	402070 <_malloc_r+0x2ec>
  402216:	f240 5354 	movw	r3, #1364	; 0x554
  40221a:	4298      	cmp	r0, r3
  40221c:	d81c      	bhi.n	402258 <_malloc_r+0x4d4>
  40221e:	0ca8      	lsrs	r0, r5, #18
  402220:	307c      	adds	r0, #124	; 0x7c
  402222:	0041      	lsls	r1, r0, #1
  402224:	e5ee      	b.n	401e04 <_malloc_r+0x80>
  402226:	3210      	adds	r2, #16
  402228:	e6b4      	b.n	401f94 <_malloc_r+0x210>
  40222a:	2a54      	cmp	r2, #84	; 0x54
  40222c:	d823      	bhi.n	402276 <_malloc_r+0x4f2>
  40222e:	0b1a      	lsrs	r2, r3, #12
  402230:	326e      	adds	r2, #110	; 0x6e
  402232:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  402236:	e754      	b.n	4020e2 <_malloc_r+0x35e>
  402238:	68bc      	ldr	r4, [r7, #8]
  40223a:	6862      	ldr	r2, [r4, #4]
  40223c:	f022 0203 	bic.w	r2, r2, #3
  402240:	e716      	b.n	402070 <_malloc_r+0x2ec>
  402242:	f3cb 000b 	ubfx	r0, fp, #0, #12
  402246:	2800      	cmp	r0, #0
  402248:	f47f aeb9 	bne.w	401fbe <_malloc_r+0x23a>
  40224c:	4442      	add	r2, r8
  40224e:	68bb      	ldr	r3, [r7, #8]
  402250:	f042 0201 	orr.w	r2, r2, #1
  402254:	605a      	str	r2, [r3, #4]
  402256:	e6fd      	b.n	402054 <_malloc_r+0x2d0>
  402258:	21fc      	movs	r1, #252	; 0xfc
  40225a:	207e      	movs	r0, #126	; 0x7e
  40225c:	e5d2      	b.n	401e04 <_malloc_r+0x80>
  40225e:	2201      	movs	r2, #1
  402260:	f04f 0a00 	mov.w	sl, #0
  402264:	e6d4      	b.n	402010 <_malloc_r+0x28c>
  402266:	f104 0108 	add.w	r1, r4, #8
  40226a:	4630      	mov	r0, r6
  40226c:	f7ff fc80 	bl	401b70 <_free_r>
  402270:	f8da 1000 	ldr.w	r1, [sl]
  402274:	e6ee      	b.n	402054 <_malloc_r+0x2d0>
  402276:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40227a:	d804      	bhi.n	402286 <_malloc_r+0x502>
  40227c:	0bda      	lsrs	r2, r3, #15
  40227e:	3277      	adds	r2, #119	; 0x77
  402280:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  402284:	e72d      	b.n	4020e2 <_malloc_r+0x35e>
  402286:	f240 5154 	movw	r1, #1364	; 0x554
  40228a:	428a      	cmp	r2, r1
  40228c:	d804      	bhi.n	402298 <_malloc_r+0x514>
  40228e:	0c9a      	lsrs	r2, r3, #18
  402290:	327c      	adds	r2, #124	; 0x7c
  402292:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  402296:	e724      	b.n	4020e2 <_malloc_r+0x35e>
  402298:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
  40229c:	227e      	movs	r2, #126	; 0x7e
  40229e:	e720      	b.n	4020e2 <_malloc_r+0x35e>
  4022a0:	687b      	ldr	r3, [r7, #4]
  4022a2:	e78b      	b.n	4021bc <_malloc_r+0x438>
  4022a4:	2000043c 	.word	0x2000043c

004022a8 <__malloc_lock>:
  4022a8:	4770      	bx	lr
  4022aa:	bf00      	nop

004022ac <__malloc_unlock>:
  4022ac:	4770      	bx	lr
  4022ae:	bf00      	nop

004022b0 <_sbrk_r>:
  4022b0:	b538      	push	{r3, r4, r5, lr}
  4022b2:	4c07      	ldr	r4, [pc, #28]	; (4022d0 <_sbrk_r+0x20>)
  4022b4:	2300      	movs	r3, #0
  4022b6:	4605      	mov	r5, r0
  4022b8:	4608      	mov	r0, r1
  4022ba:	6023      	str	r3, [r4, #0]
  4022bc:	f7ff f82a 	bl	401314 <_sbrk>
  4022c0:	1c43      	adds	r3, r0, #1
  4022c2:	d000      	beq.n	4022c6 <_sbrk_r+0x16>
  4022c4:	bd38      	pop	{r3, r4, r5, pc}
  4022c6:	6823      	ldr	r3, [r4, #0]
  4022c8:	2b00      	cmp	r3, #0
  4022ca:	d0fb      	beq.n	4022c4 <_sbrk_r+0x14>
  4022cc:	602b      	str	r3, [r5, #0]
  4022ce:	bd38      	pop	{r3, r4, r5, pc}
  4022d0:	20000d68 	.word	0x20000d68

004022d4 <__sread>:
  4022d4:	b510      	push	{r4, lr}
  4022d6:	460c      	mov	r4, r1
  4022d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4022dc:	f000 f90a 	bl	4024f4 <_read_r>
  4022e0:	2800      	cmp	r0, #0
  4022e2:	db03      	blt.n	4022ec <__sread+0x18>
  4022e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4022e6:	4403      	add	r3, r0
  4022e8:	6523      	str	r3, [r4, #80]	; 0x50
  4022ea:	bd10      	pop	{r4, pc}
  4022ec:	89a3      	ldrh	r3, [r4, #12]
  4022ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4022f2:	81a3      	strh	r3, [r4, #12]
  4022f4:	bd10      	pop	{r4, pc}
  4022f6:	bf00      	nop

004022f8 <__swrite>:
  4022f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4022fc:	4616      	mov	r6, r2
  4022fe:	898a      	ldrh	r2, [r1, #12]
  402300:	461d      	mov	r5, r3
  402302:	05d3      	lsls	r3, r2, #23
  402304:	460c      	mov	r4, r1
  402306:	4607      	mov	r7, r0
  402308:	d506      	bpl.n	402318 <__swrite+0x20>
  40230a:	2200      	movs	r2, #0
  40230c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402310:	2302      	movs	r3, #2
  402312:	f000 f8db 	bl	4024cc <_lseek_r>
  402316:	89a2      	ldrh	r2, [r4, #12]
  402318:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40231c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  402320:	81a2      	strh	r2, [r4, #12]
  402322:	4638      	mov	r0, r7
  402324:	4632      	mov	r2, r6
  402326:	462b      	mov	r3, r5
  402328:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40232c:	f000 b814 	b.w	402358 <_write_r>

00402330 <__sseek>:
  402330:	b510      	push	{r4, lr}
  402332:	460c      	mov	r4, r1
  402334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402338:	f000 f8c8 	bl	4024cc <_lseek_r>
  40233c:	89a3      	ldrh	r3, [r4, #12]
  40233e:	1c42      	adds	r2, r0, #1
  402340:	bf0e      	itee	eq
  402342:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  402346:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40234a:	6520      	strne	r0, [r4, #80]	; 0x50
  40234c:	81a3      	strh	r3, [r4, #12]
  40234e:	bd10      	pop	{r4, pc}

00402350 <__sclose>:
  402350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402354:	f000 b866 	b.w	402424 <_close_r>

00402358 <_write_r>:
  402358:	b570      	push	{r4, r5, r6, lr}
  40235a:	4c08      	ldr	r4, [pc, #32]	; (40237c <_write_r+0x24>)
  40235c:	4606      	mov	r6, r0
  40235e:	2500      	movs	r5, #0
  402360:	4608      	mov	r0, r1
  402362:	4611      	mov	r1, r2
  402364:	461a      	mov	r2, r3
  402366:	6025      	str	r5, [r4, #0]
  402368:	f7fd ff2e 	bl	4001c8 <_write>
  40236c:	1c43      	adds	r3, r0, #1
  40236e:	d000      	beq.n	402372 <_write_r+0x1a>
  402370:	bd70      	pop	{r4, r5, r6, pc}
  402372:	6823      	ldr	r3, [r4, #0]
  402374:	2b00      	cmp	r3, #0
  402376:	d0fb      	beq.n	402370 <_write_r+0x18>
  402378:	6033      	str	r3, [r6, #0]
  40237a:	bd70      	pop	{r4, r5, r6, pc}
  40237c:	20000d68 	.word	0x20000d68

00402380 <__register_exitproc>:
  402380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402384:	4c25      	ldr	r4, [pc, #148]	; (40241c <__register_exitproc+0x9c>)
  402386:	6825      	ldr	r5, [r4, #0]
  402388:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40238c:	4606      	mov	r6, r0
  40238e:	4688      	mov	r8, r1
  402390:	4692      	mov	sl, r2
  402392:	4699      	mov	r9, r3
  402394:	b3cc      	cbz	r4, 40240a <__register_exitproc+0x8a>
  402396:	6860      	ldr	r0, [r4, #4]
  402398:	281f      	cmp	r0, #31
  40239a:	dc18      	bgt.n	4023ce <__register_exitproc+0x4e>
  40239c:	1c43      	adds	r3, r0, #1
  40239e:	b17e      	cbz	r6, 4023c0 <__register_exitproc+0x40>
  4023a0:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4023a4:	2101      	movs	r1, #1
  4023a6:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  4023aa:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  4023ae:	fa01 f200 	lsl.w	r2, r1, r0
  4023b2:	4317      	orrs	r7, r2
  4023b4:	2e02      	cmp	r6, #2
  4023b6:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4023ba:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  4023be:	d01e      	beq.n	4023fe <__register_exitproc+0x7e>
  4023c0:	3002      	adds	r0, #2
  4023c2:	6063      	str	r3, [r4, #4]
  4023c4:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4023c8:	2000      	movs	r0, #0
  4023ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4023ce:	4b14      	ldr	r3, [pc, #80]	; (402420 <__register_exitproc+0xa0>)
  4023d0:	b303      	cbz	r3, 402414 <__register_exitproc+0x94>
  4023d2:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4023d6:	f7ff fccd 	bl	401d74 <malloc>
  4023da:	4604      	mov	r4, r0
  4023dc:	b1d0      	cbz	r0, 402414 <__register_exitproc+0x94>
  4023de:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4023e2:	2700      	movs	r7, #0
  4023e4:	e880 0088 	stmia.w	r0, {r3, r7}
  4023e8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4023ec:	4638      	mov	r0, r7
  4023ee:	2301      	movs	r3, #1
  4023f0:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4023f4:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4023f8:	2e00      	cmp	r6, #0
  4023fa:	d0e1      	beq.n	4023c0 <__register_exitproc+0x40>
  4023fc:	e7d0      	b.n	4023a0 <__register_exitproc+0x20>
  4023fe:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  402402:	430a      	orrs	r2, r1
  402404:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  402408:	e7da      	b.n	4023c0 <__register_exitproc+0x40>
  40240a:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40240e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402412:	e7c0      	b.n	402396 <__register_exitproc+0x16>
  402414:	f04f 30ff 	mov.w	r0, #4294967295
  402418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40241c:	00402cb8 	.word	0x00402cb8
  402420:	00401d75 	.word	0x00401d75

00402424 <_close_r>:
  402424:	b538      	push	{r3, r4, r5, lr}
  402426:	4c07      	ldr	r4, [pc, #28]	; (402444 <_close_r+0x20>)
  402428:	2300      	movs	r3, #0
  40242a:	4605      	mov	r5, r0
  40242c:	4608      	mov	r0, r1
  40242e:	6023      	str	r3, [r4, #0]
  402430:	f7fe ff8a 	bl	401348 <_close>
  402434:	1c43      	adds	r3, r0, #1
  402436:	d000      	beq.n	40243a <_close_r+0x16>
  402438:	bd38      	pop	{r3, r4, r5, pc}
  40243a:	6823      	ldr	r3, [r4, #0]
  40243c:	2b00      	cmp	r3, #0
  40243e:	d0fb      	beq.n	402438 <_close_r+0x14>
  402440:	602b      	str	r3, [r5, #0]
  402442:	bd38      	pop	{r3, r4, r5, pc}
  402444:	20000d68 	.word	0x20000d68

00402448 <_fclose_r>:
  402448:	2900      	cmp	r1, #0
  40244a:	d03d      	beq.n	4024c8 <_fclose_r+0x80>
  40244c:	b570      	push	{r4, r5, r6, lr}
  40244e:	4605      	mov	r5, r0
  402450:	460c      	mov	r4, r1
  402452:	b108      	cbz	r0, 402458 <_fclose_r+0x10>
  402454:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402456:	b37b      	cbz	r3, 4024b8 <_fclose_r+0x70>
  402458:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40245c:	b90b      	cbnz	r3, 402462 <_fclose_r+0x1a>
  40245e:	2000      	movs	r0, #0
  402460:	bd70      	pop	{r4, r5, r6, pc}
  402462:	4628      	mov	r0, r5
  402464:	4621      	mov	r1, r4
  402466:	f7ff f9d7 	bl	401818 <__sflush_r>
  40246a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40246c:	4606      	mov	r6, r0
  40246e:	b133      	cbz	r3, 40247e <_fclose_r+0x36>
  402470:	4628      	mov	r0, r5
  402472:	69e1      	ldr	r1, [r4, #28]
  402474:	4798      	blx	r3
  402476:	2800      	cmp	r0, #0
  402478:	bfb8      	it	lt
  40247a:	f04f 36ff 	movlt.w	r6, #4294967295
  40247e:	89a3      	ldrh	r3, [r4, #12]
  402480:	061b      	lsls	r3, r3, #24
  402482:	d41c      	bmi.n	4024be <_fclose_r+0x76>
  402484:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402486:	b141      	cbz	r1, 40249a <_fclose_r+0x52>
  402488:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40248c:	4299      	cmp	r1, r3
  40248e:	d002      	beq.n	402496 <_fclose_r+0x4e>
  402490:	4628      	mov	r0, r5
  402492:	f7ff fb6d 	bl	401b70 <_free_r>
  402496:	2300      	movs	r3, #0
  402498:	6323      	str	r3, [r4, #48]	; 0x30
  40249a:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40249c:	b121      	cbz	r1, 4024a8 <_fclose_r+0x60>
  40249e:	4628      	mov	r0, r5
  4024a0:	f7ff fb66 	bl	401b70 <_free_r>
  4024a4:	2300      	movs	r3, #0
  4024a6:	6463      	str	r3, [r4, #68]	; 0x44
  4024a8:	f7ff fafa 	bl	401aa0 <__sfp_lock_acquire>
  4024ac:	2300      	movs	r3, #0
  4024ae:	81a3      	strh	r3, [r4, #12]
  4024b0:	f7ff faf8 	bl	401aa4 <__sfp_lock_release>
  4024b4:	4630      	mov	r0, r6
  4024b6:	bd70      	pop	{r4, r5, r6, pc}
  4024b8:	f7ff faec 	bl	401a94 <__sinit>
  4024bc:	e7cc      	b.n	402458 <_fclose_r+0x10>
  4024be:	4628      	mov	r0, r5
  4024c0:	6921      	ldr	r1, [r4, #16]
  4024c2:	f7ff fb55 	bl	401b70 <_free_r>
  4024c6:	e7dd      	b.n	402484 <_fclose_r+0x3c>
  4024c8:	2000      	movs	r0, #0
  4024ca:	4770      	bx	lr

004024cc <_lseek_r>:
  4024cc:	b570      	push	{r4, r5, r6, lr}
  4024ce:	4c08      	ldr	r4, [pc, #32]	; (4024f0 <_lseek_r+0x24>)
  4024d0:	4606      	mov	r6, r0
  4024d2:	2500      	movs	r5, #0
  4024d4:	4608      	mov	r0, r1
  4024d6:	4611      	mov	r1, r2
  4024d8:	461a      	mov	r2, r3
  4024da:	6025      	str	r5, [r4, #0]
  4024dc:	f7fe ff38 	bl	401350 <_lseek>
  4024e0:	1c43      	adds	r3, r0, #1
  4024e2:	d000      	beq.n	4024e6 <_lseek_r+0x1a>
  4024e4:	bd70      	pop	{r4, r5, r6, pc}
  4024e6:	6823      	ldr	r3, [r4, #0]
  4024e8:	2b00      	cmp	r3, #0
  4024ea:	d0fb      	beq.n	4024e4 <_lseek_r+0x18>
  4024ec:	6033      	str	r3, [r6, #0]
  4024ee:	bd70      	pop	{r4, r5, r6, pc}
  4024f0:	20000d68 	.word	0x20000d68

004024f4 <_read_r>:
  4024f4:	b570      	push	{r4, r5, r6, lr}
  4024f6:	4c08      	ldr	r4, [pc, #32]	; (402518 <_read_r+0x24>)
  4024f8:	4606      	mov	r6, r0
  4024fa:	2500      	movs	r5, #0
  4024fc:	4608      	mov	r0, r1
  4024fe:	4611      	mov	r1, r2
  402500:	461a      	mov	r2, r3
  402502:	6025      	str	r5, [r4, #0]
  402504:	f7fd fe42 	bl	40018c <_read>
  402508:	1c43      	adds	r3, r0, #1
  40250a:	d000      	beq.n	40250e <_read_r+0x1a>
  40250c:	bd70      	pop	{r4, r5, r6, pc}
  40250e:	6823      	ldr	r3, [r4, #0]
  402510:	2b00      	cmp	r3, #0
  402512:	d0fb      	beq.n	40250c <_read_r+0x18>
  402514:	6033      	str	r3, [r6, #0]
  402516:	bd70      	pop	{r4, r5, r6, pc}
  402518:	20000d68 	.word	0x20000d68

0040251c <p_uc_charset10x14>:
	...
  402538:	ccffccff 00000000 00000000 00000000     ................
  402548:	00f000f0 00000000 00f000f0 00000000     ................
  402558:	c00cc00c fcfffcff c00cc00c fcfffcff     ................
  402568:	c00cc00c 701e600c 3033303f fcfffcff     .....`.p?030....
  402578:	f0333033 c018e039 0cf00060 f0603cf0     303.9...`....<`.
  402588:	000fc003 3cf0183c 18003cc0 f87ff03c     ....<..<.<..<...
  402598:	8cc71cc3 ecdccccf 30307878 cc00fc00     ........xx00....
  4025a8:	00000000 00440000 00f800ec 00000070     ......D.....p...
	...
  4025c0:	f03fc00f 18607878 0cc00cc0 00000000     ..?.xx`.........
  4025d0:	00000000 0cc00cc0 78781860 c00ff03f     ........`.xx?...
  4025e0:	00000000 e00e600c 8003c007 f83ff83f     .....`......?.?.
  4025f0:	c0078003 600ce00e 00030003 00030003     .......`........
  402600:	f03ff03f 00030003 00030003 ec004400     ?.?..........D..
  402610:	7000f800 00000000 00000000 00000000     ...p............
  402620:	00030003 00030003 00030003 00030003     ................
  402630:	00030003 3c001800 18003c00 00000000     .......<.<......
	...
  402648:	0c000000 f0003c00 000fc003 00f0003c     .....<......<...
  402658:	000000c0 f87ff03f ccc1fce0 0cc78cc3     ....?...........
  402668:	1cfc0cce f03ff87f 00000000 0c700c30     ......?.....0.p.
  402678:	fcfffcff 0c000c00 00000000 1c700c30     ............0.p.
  402688:	7cc03ce0 ccc1ecc0 0ce78cc3 0c3c0c7e     .<.|........~.<.
  402698:	38703030 0cc01ce0 0cc30cc0 1ce30cc3     00p8............
  4026a8:	f03cf87f c007c003 c01cc00e c070c038     ..<.........8.p.
  4026b8:	fcfffcff c000c000 38fc30fc 0ccc1ccc     .........0.8....
  4026c8:	0ccc0ccc 1cce0ccc f0c3f8c7 f87ff03f     ............?...
  4026d8:	0cc31ce3 0cc30cc3 9ce30cc3 f030f871     ............q.0.
  4026e8:	00c000c0 00c000c0 fcc7fcc3 00dc00ce     ................
  4026f8:	00f000f8 f87ff03c 0cc39ce7 0cc30cc3     ....<...........
  402708:	9ce70cc3 f03cf87f 007e003c 0cc30ce7     ......<.<.~.....
  402718:	38c31cc3 e0e770c3 803fc07f 00000000     ...8.p....?.....
  402728:	60180000 f03cf03c 00006018 00000000     ...`<.<..`......
  402738:	00000000 44180000 f83cec3c 00007018     .......D<.<..p..
  402748:	00000000 00030000 c00f8007 7038e01c     ..............8p
  402758:	1ce03870 00000cc0 c00cc00c c00cc00c     p8..............
  402768:	c00cc00c c00cc00c c00cc00c 0cc00000     ................
  402778:	38701ce0 e01c7038 8007c00f 00000003     ..p88p..........
  402788:	00700030 00c000e0 ecc3ecc1 00e600c3     0.p.............
  402798:	003c007e f871f030 0cc39ce3 fcc3fcc3     ~.<.0.q.........
  4027a8:	1ce00cc0 f03ff87f fc7ffc3f c0c0c0e0     ......?.?.......
  4027b8:	c0c0c0c0 c0e0c0c0 fc3ffc7f fcfffcff     ..........?.....
  4027c8:	0cc30cc3 0cc30cc3 9ce70cc3 f03cf87f     ..............<.
  4027d8:	f87ff03f 0cc01ce0 0cc00cc0 1ce00cc0     ?...............
  4027e8:	30303870 fcfffcff 0cc00cc0 0cc00cc0     p800............
  4027f8:	1ce00cc0 f03ff87f fcfffcff 0cc30cc3     ......?.........
  402808:	0cc30cc3 0cc30cc3 0cc00cc0 fcfffcff     ................
  402818:	00c300c3 00c300c3 00c300c3 00c000c0     ................
  402828:	f87ff03f 0cc01ce0 0cc30cc0 1ce30cc3     ?...............
  402838:	f033f873 fcfffcff 00030003 00030003     s.3.............
  402848:	00030003 fcfffcff 00000000 0cc00cc0     ................
  402858:	fcfffcff 0cc00cc0 00000000 38003000     .............0.8
  402868:	0cc01cc0 1cc00cc0 f0fff8ff 00c000c0     ................
  402878:	fcfffcff 80078007 e01cc00f 38707038     ............8pp8
  402888:	0cc01ce0 fcfffcff 0c000c00 0c000c00     ................
  402898:	0c000c00 0c000c00 fcfffcff 00380070     ............p.8.
  4028a8:	001f001f 00700038 fcfffcff fcfffcff     ....8.p.........
  4028b8:	000e001c 80030007 e000c001 fcfffcff     ................
  4028c8:	f87ff03f 0cc01ce0 0cc00cc0 1ce00cc0     ?...............
  4028d8:	f03ff87f fcfffcff 00c300c3 00c300c3     ..?.............
  4028e8:	00e700c3 003c007e f87ff03f 0cc01ce0     ....~.<.?.......
  4028f8:	ecc0ccc0 38e07cc0 ec3ffc7f fcfffcff     .....|.8..?.....
  402908:	80c300c3 c0c380c3 70e7c0c3 1c3c3c7e     ...........p~<<.
  402918:	1c7e183c 0cc30ce7 0cc30cc3 9cc30cc3     <.~.............
  402928:	f060f8e1 00c000c0 00c000c0 fcfffcff     ..`.............
  402938:	00c000c0 00c000c0 f8fff0ff 0c001c00     ................
  402948:	0c000c00 1c000c00 f0fff8ff e0ffc0ff     ................
  402958:	38007000 1c001c00 70003800 c0ffe0ff     .p.8.....8.p....
  402968:	f8fff0ff 3c001c00 f800f800 1c003c00     .......<.....<..
  402978:	f0fff8ff 7cf83cf0 c00fe01c 80078007     .....<.|........
  402988:	e01cc00f 3cf07cf8 00fe00fc 80030007     .....|.<........
  402998:	fc01fc01 00078003 00fc00fe 7cc03cc0     .............<.|
  4029a8:	ccc1ecc0 0cc78cc3 0cdc0cce 0cf00cf8     ................
  4029b8:	00000000 fcfffcff 0cc00cc0 00000cc0     ................
  4029c8:	00000000 00300030 000c000c 00030003     ....0.0.........
  4029d8:	c000c000 30003000 00000000 0cc00cc0     .....0.0........
  4029e8:	fcff0cc0 0000fcff 00000000 001c000c     ................
  4029f8:	00700038 00e000e0 00380070 000c001c     8.p.....p.8.....
  402a08:	0c000c00 0c000c00 0c000c00 0c000c00     ................
  402a18:	0c000c00 00000000 00e000c0 00380070     ............p.8.
  402a28:	00000018 00000000 78063000 cc0cfc0e     .........0.x....
  402a38:	cc0ccc0c cc0ecc0c f803fc07 fcfffcff     ................
  402a48:	0c030c03 0c030c03 9c030c03 f000f801     ................
  402a58:	f807f003 0c0c1c0e 0c0c0c0c 1c0e0c0c     ................
  402a68:	30033807 f801f000 0c039c03 0c030c03     .8.0............
  402a78:	0c030c03 fcfffcff f807f003 cc0cdc0e     ................
  402a88:	cc0ccc0c dc0ecc0c 9003d807 00030000     ................
  402a98:	fc7ffc3f 00e300e3 00300070 00000000     ?.......p.0.....
  402aa8:	9c071803 cc0ccc0f cc0ccc0c dc0ccc0c     ................
  402ab8:	f007f80f fcfffcff 00030003 00030003     ................
  402ac8:	fc018003 0000fc00 00000000 00000000     ................
  402ad8:	fc1bfc1b 00000000 00000000 30000000     ...............0
  402ae8:	1c003800 0c000c00 f8cf1c00 0000f0cf     .8..............
  402af8:	fcff0000 e000fcff f003e001 1c0e3807     .............8..
  402b08:	00000c0c 00000000 0cc00cc0 fcfffcff     ................
  402b18:	0c000c00 00000000 fc0ffc0f 0007000e     ................
  402b28:	c003c003 000e0007 fc0ffc0f fc0ffc0f     ................
  402b38:	00070003 000c000e 000e000c fc03fc07     ................
  402b48:	f807f003 0c0c1c0e 0c0c0c0c 1c0e0c0c     ................
  402b58:	f003f807 fc0ffc0f c00cc00c c00cc00c     ................
  402b68:	c00fc00c 00038007 80070003 c00cc00f     ................
  402b78:	c00cc00c c00cc00c fc0ffc0f fc0ffc0f     ................
  402b88:	00078003 000c000e 000e000c 00030007     ................
  402b98:	9c071803 cc0ccc0f cc0ccc0c fc0ccc0c     ................
  402ba8:	3006780e 000c0000 f0ff000c 1c0cf8ff     .x.0............
  402bb8:	380c1c0c 0000300c f80ff00f 0c001c00     ...8.0..........
  402bc8:	0c000c00 1c000c00 f00ff80f e00fc00f     ................
  402bd8:	38007000 1c001c00 70003800 c00fe00f     .p.8.....8.p....
  402be8:	f80ff00f 1c001c00 f800f800 1c001c00     ................
  402bf8:	f00ff80f 1c0e0c0c f0033807 e001e001     .........8......
  402c08:	3807f003 0c0c1c0e 000e000c 9c030c07     ...8............
  402c18:	f001f801 00078003 000c000e 1c0c0c0c     ................
  402c28:	7c0c3c0c cc0dec0c 0c0f8c0f 0c0c0c0e     .<.|............
  402c38:	00030000 f03f8007 1ce0f87c 0cc00cc0     ......?.|.......
  402c48:	00000cc0 0c030c03 fc7ffc3f 0cc30ce3     ........?.......
  402c58:	0ce00cc0 0c300c70 0cc00000 0cc00cc0     ....p.0.........
  402c68:	f87c1ce0 8007f03f 00000003 00c000c0     ..|.?...........
  402c78:	00c000c0 00c000c0 00c000c0 00c000c0     ................
  402c88:	fcfffcff fcfffcff fcfffcff fcfffcff     ................
  402c98:	fcfffcff 4c203331 00004443 69726441     ....13 LCD..Adri
  402ca8:	00616e61 72626147 006c6569 00000043     ana.Gabriel.C...

00402cb8 <_global_impure_ptr>:
  402cb8:	20000010                                ... 

00402cbc <_init>:
  402cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402cbe:	bf00      	nop
  402cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402cc2:	bc08      	pop	{r3}
  402cc4:	469e      	mov	lr, r3
  402cc6:	4770      	bx	lr

00402cc8 <__init_array_start>:
  402cc8:	004017f9 	.word	0x004017f9

00402ccc <__frame_dummy_init_array_entry>:
  402ccc:	004000f1                                ..@.

00402cd0 <_fini>:
  402cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402cd2:	bf00      	nop
  402cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402cd6:	bc08      	pop	{r3}
  402cd8:	469e      	mov	lr, r3
  402cda:	4770      	bx	lr

00402cdc <__fini_array_start>:
  402cdc:	004000cd 	.word	0x004000cd
